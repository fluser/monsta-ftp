{"version":3,"sources":["FileTransferStats/filetransferstats.class.js","functions/basicurlvalidate.func.js","functions/extractfileextension.func.js","functions/isempty.func.js","functions/namejoin.func.js","functions/normalizefilesize.func.js","functions/parentpath.func.js","functions/parseerrorresponse.func.js","functions/pathjoin.func.js","functions/responseisunsuccessful.func.js","functions/showresponseerror.func.js","functions/unicodesafebase64.func.js","functions/validatefilename.func.js","functions/versionislessthan.func.js","monsta.js","Authentication/authentication.factory.js","Breadcrumb/breadcrumb.controller.js","Configuration/configuration.factory.js","Configuration/localconfiguration.factory.js","CodeMirror/codemirror.factory.js","Connection/connection.factory.js","DirectorySorting/directorysorting.factory.js","DragDrop/dragdrop.controller.js","FileBrowser/filebrowser.controller.js","FileBrowser/rowmousetracker.factory.js","FileBrowser/selecteditems.factory.js","FileEditor/fileeditor.controller.js","Footer/footer.controller.js","Header/header.controller.js","History/history.controller.js","History/history.factory.js","JQuery/jquery.factory.js","License/license.factory.js","LoginLinkModal/modalloginlink.controller.js","LoginPanel/loginpanel.controller.js","ModalAddons/modaladdons.controller.js","ModalChoice/modalchoice.controller.js","ModalConfirm/modalconfirm.controller.js","ModalError/modalerror.controller.js","ModalPermissions/modalpermissions.controller.js","ModalPrompt/modalprompt.controller.js","ModalProperties/modalproperties.controller.js","ModalSettings/modalsettings.controller.js","ModalTransfer/modaltransfer.controller.js","ModalTransfer/uploadprogressbar.directive.js","Permissions/permissions.factory.js","Slidebar/slidebar.controller.js","Spinner/spinner.controller.js","UIOperation/uioperation.factory.js","URLLogin/requestlogin.factory.js","Upload/upload.factory.js","UploadUI/uploadui.factory.js","filters/file_last_modified.filter.js","filters/file_size.filter.js","filters/html_safe.filter.js","filters/human_time_since.filter.js","filters/icon.filter.js","filters/item_permission_description.filter.js","filters/sort_description.filter.js","filters/spaces_to_nbsp.filter.js","filters/transfer_percent.filter.js","filters/transfer_rate.filter.js","prototypes/string.prototype.js"],"names":["FileTransferStats","totalBytes","this","completedBytes","previousCompletedBytes","previousSampleTime","_transferRateSamples","basicURLValidate","url","re","RegExp","test","extractFileExtension","fileName","nameComponents","split","length","toLowerCase","isEmpty","val","nameJoin","names","retVal","i","normalizeFileSize","fileSize","units","scaledSize","sizeSteps","toFixed","Math","round","parentPath","inputPath","hasLeadingSlash","substr","normalizedPath","splitPath","pathIndex","pathComponent","push","join","parseErrorResponse","response","action","data","errors","actionMsg","status","pathJoin","prefix","suffix","joiner","responseIsUnsuccessful","undefined","success","showResponseError","$rootScope","$translate","translateErrorDone","translatedError","translatedErrors","expectedTranslations","$broadcast","localizedErrors","context","window","console","error","errorName","then","b64EncodeUnicode","str","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","b64DecodeUnicode","decodeURIComponent","Array","prototype","map","call","atob","c","charCodeAt","toString","slice","validateFileNameNonEmpty","validateFileNameContainsNoSlash","indexOf","mapParseInt","simpleCompare","a","b","betaVersionComponentCompare","component1","component2","component1IsBeta","component2IsBeta","splitComponent1","splitComponent2","c1Compare","versionComponentCompare","versionIsLessThan","version1","version2","splitV1","splitV2","comparison","HISTORY_RECENT","TRANSFER_RATE_UPDATE_INTERVAL","TRANSFER_BYTES_MIN_UPDATE","TRANSFER_RATE_SAMPLES_MAX","AUTOSAVE_DELAY_MS","MAX_CONCURRENT_UPLOADS","MAX_UPLOAD_BYTES","UPLOAD_ACTION","UPLOAD_ARCHIVE_ACTION","API_PATH","DOWNLOAD_PATH","UPLOAD_PATH","CM_MODE_BASE","EXTRACT_UPLOAD","DEBUG","g_ConnectionDefaults","ftp","port","sftp","angular","module","config","$httpProvider","activeRequestCount","interceptors","$q","handleActiveRequestChange","delta","request","responseError","rejection","reject","$translateProvider","useSanitizeValueStrategy","underTest","useStaticFilesLoader","useMessageFormatInterpolation","fallbackLanguage","localStorage","storedLanguage","getItem","g_defaultLanguage","JSON","parse","e","preferredLanguage","authenticationFactory","configurationKey","connectionTypeKey","initialDirectoryKey","rememberLoginKey","isAuthenticatedKey","hasServerSavedAuthenticationKey","isAuthenticated","rememberLogin","configuration","connectionType","initialDirectory","hasServerSavedAuthentication","_localStorageSupported","getConfigurationAsJSON","stringify","setConfigurationFromJSON","jsonConfig","localStorageSupported","testKey","storage","setItem","removeItem","postLogin","saveSettings","loadSettings","loadMetaConfiguration","loadConfiguration","saveMetaConfiguration","saveConfiguration","clearConfiguration","clearSettings","logout","hasStoredAuthenticationDetails","getActiveConfiguration","activeConfiguration","factory","BreadcrumbController","$scope","jQuery","linkClick","ev","preventDefault","vm","changeDirectoryToItem","makeBreadcrumbItem","linkText","index","$span","$link","text","click","append","renderBreadcrumbs","RIGHT_COMPONENT_BUFFER","RIGHT_FULL_BUFFER","$breadcrumbContainer","$homeLink","historyButton","windowWidth","width","maxWidth","totalWidth","find","remove","lastIndex","pathComponents","$rightSpan","component","after","outerWidth","$initialSpan","charactersRemoved","offset","left","lastComponent","lastComponentLength","trimmedName","setPath","path","splice","itemIndex","joinedPath","newPath","directoryChanged","$on","resize","controller","$inject","configurationFactory","connectionFactory","getSystemConfiguration","promise","lastRequestFailed","getSystemVars","requestSuccess","requestFailure","saveApplicationSettings","setApplicationSettings","applicationSettings","setApplicationSetting","key","value","keyChanged","getApplicationSetting","localConfigurationFactory","isLocalStorageSupported","getItemFromLocalStorage","rawItem","storeItemInLocalStorage","item","storeItem","inMemoryStorage","getConfigurationItem","getApplicationSettings","systemVars","setConfigurationItem","codeMirrorFactory","$window","_jQuery","loadedModes","convertFilenameToMode","fileExtension","modeLookup","htm","html","php","asp","aspx","js","css","xhtml","cfm","pl","py","cpp","rb","java","xml","hasOwnProperty","getModeDependencies","modeName","dependencyLookup","htmlmixed","generateModePath","setupCodeMirror","editorElement","postSetupCallback","cm","CodeMirror","fromTextArea","mode","lineNumbers","lineWrapping","postScriptLoad","loadModeAfterDependencies","_this","getScript","initiateCodeMirror","dependencies","neededDependencies","dependencyName","$http","NETWORK_TIMEOUT_SECONDS","IGNORE_TIMEOUT_TYPES","addRemoteFileRequest","actionName","remotePath","addSourceDestinationRequest","source","destination","_sendRequest","requestBody","timeout","req","method","headers","Content-Type","transformRequest","obj","p","log","getRequestBody","copy","defaultsForConnectionType","defaultName","getEmptyRequestBody","getListDirectoryRequest","showHidden","getFetchFileRequest","getMakeDirectoryRequest","getDeleteDirectoryRequest","getDeleteFileRequest","getCopyRequest","getRenameRequest","getChangePermissionsRequest","getPutFileContentsRequest","fileContents","getGetFileContentsRequest","getTestConnectAndAuthenticateRequest","getCheckSavedAuthExistsRequest","getWriteSavedAuthRequest","password","authData","getReadSavedAuthRequest","getReadLicenseRequest","getGetSystemVarsRequest","getFetchRemoteFileRequest","remoteSource","destinationDirectory","getDownloadMultipleFilesRequest","baseDirectory","items","getSetApplicationSettingsRequest","getDeleteMultipleRequest","pathsAndTypes","getExtractArchiveRequest","fileKey","fileIndexOffset","extractCount","getUpdateLicenseRequest","license","listDirectory","fetchFile","rename","changePermissions","deleteFile","deleteDirectory","makeDirectory","getFileContents","putFileContents","contents","testConnectAndAuthenticate","checkSavedAuthExists","writeSavedAuth","readSavedAuth","getLicense","fetchRemoteFile","downloadMultipleFiles","deleteMultiple","extractArchive","updateLicense","directorySortingFactory","compareByDirectoryFlag","isDirectory","compareByName","directoryCompare","name","compareByModificationDate","modificationDate","compareBySize","size","compareByType","aExt","bExt","_handleReverse","sortedList","reverse","sortByName","unsortedList","sort","sortByModificationDate","sortBySize","sortByType","DragDropController","uploadUIFactory","containsFiles","browserEvent","dataTransfer","types","handleDropEvent","event","handleItemsBasedUpload","files","handleFilesBasedUpload","overDrop","$html","ready","$fileDrop","on","$files","top","position","height","display","show","hide","dragenter","stopPropagation","dragleave","contains","target","dragover","drop","originalEvent","dragend","FileBrowserController","uiOperationFactory","historyFactory","$timeout","selectedItemsFactory","rowMouseTrackerFactory","loggedIn","changeDirectory","contextMenuStyleForEvent","clientX","CONTEXT_MENU_X_OFFSET","clientY","CONTEXT_MENU_Y_OFFSET","margin-left","margin-top","fixContextMenuOffScreen","$dropdownMenu","elementWillExtendPastWindowWidth","CONTEXT_MENU_INSET","elementWillExtendPastWindowHeight","setupContextMenuEvents","contextmenu","$tr","first","rowIndex","preventRowDeselect","getSelectedItems","dropdown","tagName","selectItem","$fileToobar","currentContextMenu","$dropDownMenuParent","parent","removeClass","outerHeight","addClass","$contextCatcherUl","attr","xOffset","$element","yOffset","doReorder","directoryList","sortDirectoryList","sortName","sortReversed","handleReorderChange","newSortName","sortMethodName","directoryListSuccess","change","currentDirectory","clearSelection","isHistoryChangeDir","addEntry","isFirstLoad","allowTimeout","handleError","refreshDirectoryList","filesReadyForDownloadCallback","location","fileFetchFailureCallback","downloadFileAtPath","downloadMultiple","selectedItems","itemNames","downloadSingle","fullFilePath","joinNameToCurrentDirectory","downloadSelectedFiles","getSelectedPaths","selectedPathCopy","initiateCopyOfPaths","paths","setCopySource","initiateCutOfPaths","setCutSource","initiateCutOfSelectedPaths","initiateCopyOfSelectedPaths","performPaste","cutSource","copySource","sourcePaths","operation","sourcePath","splitSourceFileName","sourceFileName","destinationPath","pasteComplete","deleteComplete","allItems","concat","directoriesToDelete","filesToDelete","confirmDelete","itemsToDelete","isCutOrCopySource","clearCutAndCopySource","cancelDelete","showTranslatedDeleteConfirm","translatedMessage","showDeleteConfirm","fileNames","item_count","message","initiateDeleteOfSelectedPaths","fullPath","clearNewItemTempVars","newItemPath","makeItemType","makeItemSuccessCallback","shouldEditItem","itemIsEditable","makeItemFailureCallback","errorMessage","translations","displayPromptError","getFileNameError","translateAndDisplayPromptError","promptErrorID","makeItemOKCallback","itemName","itemNameError","item_type","initiateMakeItem","itemType","ucItemType","capitalizeFirstLetter","NEW_ITEM_PROMPT_TITLE","NEW_ITEM_NAME_PLACEHOLDER","initiateChmodOfSelectedItems","itemPaths","numericPerms","numericPermissions","fileRenameCallback","finalValue","initialValue","renameSource","showRenamePrompt","RENAME_FILE_PROMPT_TITLE","RENAME_FILE_NAME_PLACEHOLDER","initiateRename","handleChangeDirectory","didLogout","clearHistory","systemVarLoadSuccess","vars","setEditableExtensions","systemVarLoadFailure","editableExtensionStr","splitExtensions","editableExtensions","trimmedExtension","trim","itemPath","extension","navigateUpOneLevel","showProperties","handleBodyClick","$event","which","id","hasPasteSource","$extraDropdownButton","rowMouseDown","mouseDown","rowMouseMove","$index","mouseMove","rowMouseUp","mouseUp","rowMouseLeave","mouseLeave","rowDragStartIndex","isMetaDrag","previousDragOverIndex","reorder","currentTarget","getAttribute","initiateDeleteOfItem","downloadItem","initiateCutOfItem","initiateCopyOfItem","editItem","initiateRenameOfItem","handleClick","directoryPath","parentNode","buttonName","initiateChmodOfItem","mouseIsDown","mouseDownEvent","mouseMovedWhileDown","mouseClick","startDrag","mouseDrag","rowClickTargetElementNames","metaDraggedToIndex","draggedToIndex","ctrlKey","metaKey","metaClickAtIndex","shiftKey","shiftClickAtIndex","standardClickAtIndex","startMetaDraggingAtIndex","startDraggingAtIndex","generateRange","start","stop","range","broadcastSelectionChange","initialSelectedIndex","indexOfIndex","dragStartIndex","metaDragStartIndex","metaSelectedItems","newSelectedItems","lowerBound","min","upperBound","max","FileEditorController","licenseFactory","hideProUpgradeMessages","savedDirectories","modalFileEditorId","modal","editorFiles","setupAdvancedEditor","filePath","codeMode","setTimeout","editorItem","getEditorFileByPath","cmSetup","textAreaId","document","getElementById","cMirror","getValue","textChange","startEditingFile","ensureFileInScope","activeFile","isLicensed","contentsLoadedCallback","filePathIsInScope","editorFile","dirty","saving","loadFileContents","getFileIndexByPath","fileIndex","updateFileContents","file","removeFile","closingFiles","toTextArea","newFileIndex","showTabCloseConfirm","confirmMessage","confirmTabClose","cancelTabClose","initiateConfirmTabClose","pathOfTabToRemove","file_name","contentPutFinish","dirName","beginAutosave","settings","autoSave","autoSaveTimeout","clearTimeout","saveActiveFile","fileListClick","$filePickerMenu","toggleClass","shouldShowProUpgrade","itemsMoved","deletedItems","pathsToRemove","deletedPathIndex","deletedPath","deletedPathAsDirectory","editorFileIndex","removeIndex","activateTab","closeTabForFile","movedItems","moveSources","wasStarted","Date","now","updateTransferAmount","addTransferRate","getInstantaneousTransferRate","calculateTransferRate","sum","rate","elapsedTime","getTransferPercent","complete","hasBeenStarted","FooterController","handleUpload","uploadSingleInput","fileChangeHandler","isArchiveUpload","validateArchiveUpload","showModalError","handleUploadFolder","userAgent","navigator","uploadFolderInput","allowAction","editorActive","actionsRequiringSelection","selectedItemsCount","performRemoteFetch","translatedBusyMessage","setModalPromptError","remoteFetchCallback","final","initiateRemoteFetch","FETCH_FILE_PROMPT_TITLE","FETCH_FILE_URL_PLACEHOLDER","onEditorHide","activeFileCount","showEditor","maxUploadBytes","currentUsername","currentHost","currentVersion","newVersionAvailable","buttonClick","addEventListener","currentConfig","username","host","maxFileUpload","version","MONSTA_LATEST_VERSION","HeaderController","canGoBack","canGoForward","updateScopeFromHistoryFactory","hasPreviousHistoryItem","hasNextHistoryItem","navigateBack","newDir","navigateForward","refresh","HistoryController","updateHistory","fullHistory","getUniqueHistory","recentHistory","sortedHistory","history","historyClick","removeEntry","HISTORY_CHANGED_EVENT_NAME","ensureTrailingSlash","_fullHistory","_historyIndex","getFullHistory","getFullHistoryCount","changed","historyItem","getFullHistoryItem","getHistoryIndex","setHistoryIndex","historySize","uniqueHistory","fullHistoryIndex","historyPath","monstaJQuery","isNullLicense","email","expiryDate","purchaseDate","handleGetFailure","handleGetSuccess","licenseData","isTrial","isLicenseExpired","isTrialLicense","ModalLoginLinkController","requestLoginFactory","configURL","getConfigURL","type","supportsCopy","browserSupportsCopy","modalId","alertOnCopyFailure","textArea","alert","select","copySuccess","execCommand","err","copyFailureMessage","queryCommandEnabled","LoginPanelController","setStoredAuthenticationErrorMessage","storedAuthenticationErrorMessage","showRemoveProfileConfirm","removeProfile","buildDefaultConfiguration","availableConnectionTypes","connectionTypes","ctIndex","connectionTypeAllowed","modalLoginId","modalConfig","backdrop","keyboard","updateHasServerSavedAuth","$modal","modalSetup","options","displayTranslatedError","connectionErrorMessage","setupInitialDirectory","resumeType","connType","authInitDir","writeAuthenticationToServer","metaConfiguration","masterPassword","savedAuthentication","saveCurrentAuthentication","profileToSave","enteredProfileName","profileArray","savedProfileIndex","initiateAuthenticationSave","saveAuthentication","handleAuthenticationSuccess","handleAuthenticationFailure","transferConfigToAuthFactory","applyRestrictionsToConfiguration","successCallback","handleTestConfiguration","testConfiguration","transferConfigFromAuthFactory","initWithStoredAuth","initWithURLConfig","urlConfig","addDefaultsToConfig","passive","initWithDefaultAuth","init","configFromURL","readURL","getConfigFromCurrentURL","handleCreateAuthSuccess","masterPasswordValid","handleLoadSavedAuthSuccess","handleAuthFileFailure","performCreateAuthFile","defaultAuth","tIndex","initiateLoadOfAuthFile","loadProfileAtIndex","profileIndex","loadNewProfile","configurationSettable","connectionRestrictions","typeConnectionSettings","settingName","Object","shouldShowProfiles","disableMasterLogin","showLoginLink","profileIsSelected","getProfileName","profile","useDefault","remoteUsername","getDefaultProfileName","defaults","systemConfiguration","$","$apply","handleProfileChange","connect","sftpAvailable","handleLoginKeyPress","handleAuthGo","masterPasswordKeypress","selectValue","isNaN","initiateProfileDelete","shouldHideDeleteButton","ModalAddonsController","$filter","licenseUpdateError","models","tab","localizedError","refreshLicenseData","formattedExpiryDate","licenseExpired","ModalChoiceController","handleCallback","callbackIndex","callbacks","title","ModalConfirmController","okHandler","modalConfirmId","okCallback","cancelHandler","cancelCallback","ok","cancel","ModalErrorController","modalErrorId","dismissCallback","ModalPermissionsController","permissionsFactory","modalPermissionsEditorId","invalidRange","filePaths","setPermissions","permissions","numericToObject","zeroPadLeft","input","setFormattedPermissions","formattedPermissions","permissionsChange","objectToNumeric","validateFormattedPermission","formattedPermission","formattedPermissionsChange","permissionSaveError","permissionSaveSuccess","initiatePermissionsSave","filesSaved","checkCompleted","$watch","manualFocus","okClick","cancelClick","ModalPromptController","modalPromptId","setVars","initial","placeHolder","translatedTitle","translatedPlaceholder","errorSet","isBusy","busyMessage","updateDismissMessage","translatedDismissMessage","dismissMessage","focus","successClose","handlePromptKeypress","clearError","clearBusy","setBusy","translatedErrorMessage","ModalPropertiesController","modalPropertiesId","ModalSettingsController","previousShowDotFiles","showDotFiles","systemShowDotFiles","applicationSettingsKeys","keys","debug","use","ModalTransferController","uploadFactory","updateUploads","instantUpdate","uploads","getUploads","updateApplyTimeout","TRANSFER_UI_UPDATE_DELAY","uploadFinished","abortItem","abortAll","fsFilter","itemToAbort","updateCallback","uploadProgressBar","transfer_percentFilter","getProgressBarHtml","upload","indeterminateClasses","stats","transferPercent","restrict","scope","template","link","element","attrs","updatePBarHtml","directive","ownerRead","ownerWrite","ownerExecute","groupRead","groupWrite","groupExecute","otherRead","otherWrite","otherExecute","numericPermission","SlidebarController","confirmLogout","slidebars","close","showModalConfirm","initiateLogout","showAddonsModal","showSettingsModal","showLoginPanel","SpinnerController","spinnerVisible","reqCount","newCutSource","newCopySource","$location","encodeConfiguration","configDict","t","compactConfigKeys","decodeConfiguration","encodedConfiguration","uncompactConfigKeys","decodePostHash","postHash","splitURL","decodedConfiguration","usernameKey","getPreHashURL","absURL","absUrl","getTransformLookup","isCompact","compactLookup","to","from","transformLookup","compactAndUncompact","toTransform","transformResult","getFormFieldHTML","entityMap","&","<",">","\"","s","EXTRACT_PROGRESS_STEPS","_uploads","_activeUploadCount","addUpload","fileObject","isArchive","hasError","archiveExtractMax","archiveExtractCurrent","startUploadOfItemAtIndex","startNextItem","getUploadItem","progressItem","uploadItem","transferredBytes","getUploadRequestBody","encodeRequestBody","jsonRequestBody","getXHR","XMLHttpRequest","startXHR","open","setRequestHeader","send","fileRequestDescription","readyState","OPENED","lengthComputable","loaded","onreadystatechange","DONE","completeItem","responseText","setItemError","progressExtract","fileCount","fileOffset","isPostExtract","responseData","broadcastComplete","abort","_uploadIterator","_itemIndex","_item","callback","showErrorModal","showTooLargeFilesError","tooLargeFiles","fileData","sizeFilter","broadcastExtractMessage","uploadStandardCallback","uploadAndExtractCallback","NAME_INDEX","REMOTE_PATH_INDEX","FILE_INDEX","SIZE_INDEX","IS_ARCHIVE_INDEX","filesToQueue","fileQueueIndex","treeTotalSize","treeProcessed","traverseFinished","processUploadQueue","promptForExtract","file_type","checkTooLargeFiles","performUploads","fileInfo","tLFCopy","maximum_size","doUploadAdd","relativeFilePath","traverseFileTree","isFile","dirReader","createReader","readEntries","entries","entryIndex","webkitGetAsEntry","checkedFilesCount","handleFileCheckFinished","webkitRelativePath","FileReader","loadSuccess","showChromeFolderUploadError","isInternetExplorer","reader","onerror","onload","readAsBinaryString","filesLastModified","dateFilter","filter","format","inputDate","currentDate","getDate","getMonth","getFullYear","$sce","htmlCode","trustAsHtml","humanTimeSince","timestampToFormattedDate","timeStamp","dmyFormat","d","scaledTimeDelta","timeDiff","timeSteps","isLink","iconName","description","permissionObject","toUpperCase","tr","charAt"],"mappings":"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","file":"monsta-min.js","sourcesContent":["function FileTransferStats(totalBytes) {\n    this.completedBytes = 0;\n    this.previousCompletedBytes = 0;\n    this.totalBytes = totalBytes;\n    this.previousSampleTime = -1;\n    this._transferRateSamples = [];\n}\n\nFileTransferStats.prototype.wasStarted = function () {\n    this.previousSampleTime = Date.now();\n};\n\nFileTransferStats.prototype.updateTransferAmount = function (completedBytes) {\n    if (Date.now() - this.previousSampleTime < TRANSFER_RATE_UPDATE_INTERVAL)\n        return false;\n\n    if (completedBytes < this.completedBytes)\n        return false;\n\n    if(completedBytes != this.totalBytes && (completedBytes - this.completedBytes <= TRANSFER_BYTES_MIN_UPDATE))\n        return false; // limit update rate\n\n    this.previousCompletedBytes = this.completedBytes;\n    this.completedBytes = completedBytes;\n    this.addTransferRate();\n    return true;\n};\n\nFileTransferStats.prototype.addTransferRate = function () {\n    if (this._transferRateSamples.length == TRANSFER_RATE_SAMPLES_MAX)\n        this._transferRateSamples.splice(0, 1);\n\n    this._transferRateSamples.push(this.getInstantaneousTransferRate());\n};\n\nFileTransferStats.prototype.calculateTransferRate = function () {\n    if (this._transferRateSamples.length == 0)\n        return 0;\n\n    var sum = 0;\n\n    this._transferRateSamples.map(function (rate) {\n        sum += rate;\n    });\n\n    return sum / this._transferRateSamples.length;\n};\n\nFileTransferStats.prototype.getInstantaneousTransferRate = function () {\n    var elapsedTime = Date.now() - this.previousSampleTime;\n    this.previousSampleTime = Date.now();\n    return (this.completedBytes - this.previousCompletedBytes) / (elapsedTime / 1000);\n};\n\nFileTransferStats.prototype.getTransferPercent = function () {\n    if (this.totalBytes == 0 || this.totalBytes == null || this.completedBytes == null)\n        return 0;\n\n    return (100 * this.completedBytes) / this.totalBytes;\n};\n\nFileTransferStats.prototype.complete = function () {\n    this.completedBytes = this.totalBytes;\n};\n\nFileTransferStats.prototype.hasBeenStarted = function () {\n    return this.previousSampleTime != -1;\n};","function basicURLValidate(url) {\n    var re = new RegExp(\"^\\\\s*https?:\\/\\/.+\", \"i\");\n    return re.test(url);\n}","function extractFileExtension(fileName) {\n    if (typeof (fileName) != 'string')\n        return '';\n\n    var nameComponents = fileName.split('.');\n\n    if (nameComponents.length == 1 || (nameComponents.length == 2 && nameComponents[0] == ''))  // case 2 -> it starts with a .\n        return '';\n\n    return nameComponents[nameComponents.length - 1].toLowerCase();\n}","function isEmpty(val) {\n    return val === null || typeof val == 'undefined' || val === '';\n}","function nameJoin(names) {\n    switch (names.length) {\n        case 0:\n            return '';\n        case 1:\n            return names[0];\n        default:\n            var retVal = '';\n            for (var i = 0; i < names.length - 1; ++i) {\n                retVal += names[i];\n                if (i < names.length - 2)\n                    retVal += ', ';\n            }\n            retVal += ' and ' + names[names.length - 1];\n            return retVal;\n    }\n}","function normalizeFileSize(fileSize) {\n    if (typeof(fileSize) != 'number')\n        return '';\n\n    var units = 'B', scaledSize = fileSize, sizeSteps = [\n        [1099511627776, 'TB'],\n        [1073741824, 'GB'],\n        [1048576, 'MB'],\n        [1024, 'KB']\n    ];\n\n    for (var i = 0; i < sizeSteps.length; ++i) {\n        if (fileSize >= sizeSteps[i][0]) {\n            scaledSize = fileSize / sizeSteps[i][0];\n            scaledSize = scaledSize.toFixed(1);\n            units = sizeSteps[i][1];\n            break;\n        }\n    }\n\n    if (units == 'KB')\n        scaledSize = Math.round(scaledSize);\n\n    return scaledSize + units;\n}","function parentPath(inputPath){\n    if(inputPath.length <= 1)\n        return '/';\n\n    var hasLeadingSlash = inputPath.substr(0, 1) == '/';\n\n    while(inputPath.length && inputPath.substr(inputPath.length - 1, 1) == '/')\n        inputPath = inputPath.substr(0, inputPath.length - 1);\n\n    var normalizedPath = [];\n\n    var splitPath = inputPath.split('/');\n\n    for(var pathIndex = 0; pathIndex < splitPath.length - 1; ++pathIndex) {\n        var pathComponent = splitPath[pathIndex];\n\n        if (pathComponent.length == 0)\n            continue;\n\n        normalizedPath.push(pathComponent);\n    }\n\n    if (normalizedPath.length == 0)\n        return '/';\n\n    return (hasLeadingSlash ? '/' : '') + normalizedPath.join('/');\n}","function parseErrorResponse(response, action) {\n    if (!response.data || !response.data.errors) {\n        var actionMsg = isEmpty(action) ? '' : ' during ' + action;\n\n        if(response.status == 408 || response.status == -1)\n            return \"OPERATION_TIMEOUT\";\n        else\n            return \"An unknown error occurred\" + actionMsg + \".\";\n    } else {\n        return response.data.errors.join(' ');\n    }\n}","function pathJoin(prefix, suffix) {\n    var joiner = prefix.substr(prefix.length - 1, 1) == '/' ? '' : '/';\n    return prefix + joiner + suffix;\n}","function responseIsUnsuccessful(response) {\n    return response.data == undefined || response.data.success != true;\n}","function showResponseError(response, action, $rootScope, $translate) {\n    if (response.data && response.data.localizedErrors) {\n        var expectedTranslations = response.data.localizedErrors.length, translatedErrors = [];\n\n        function translateErrorDone(translatedError) {\n            translatedErrors.push(translatedError);\n\n            if (translatedErrors.length == expectedTranslations)\n                $rootScope.$broadcast('modal-error:show', translatedErrors.join(' '));\n        }\n\n        for (var i = 0; i < expectedTranslations; ++i) {\n            if (typeof(response.data.localizedErrors[i].context) == \"undefined\"\n                || response.data.localizedErrors[i].context == null || true) {\n                if (window.console && window.console.error) {\n                    console.error(response.data);\n                }\n            }\n\n            $translate(response.data.localizedErrors[i].errorName, response.data.localizedErrors[i].context).then(\n                translateErrorDone, translateErrorDone);\n        }\n    } else\n        $rootScope.$broadcast('modal-error:show', parseErrorResponse(response, action), null, {action: action});\n}","function b64EncodeUnicode(str) {\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n        return String.fromCharCode(parseInt('0x' + p1));\n    }));\n}\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n}","function validateFileNameNonEmpty(fileName) {\n    return fileName != '';\n}\n\nfunction validateFileNameContainsNoSlash(fileName) {\n    return fileName.indexOf('/') == -1;\n}","function mapParseInt(val) {\n    return parseInt(val);\n}\n\nfunction simpleCompare(a, b) {\n    return a - b;\n}\n\nfunction betaVersionComponentCompare(component1, component2) {\n    var component1IsBeta = component1.indexOf('b') != -1;\n    var component2IsBeta = component2.indexOf('b') != -1;\n\n    var splitComponent1 = component1.split('b').map(mapParseInt);\n    var splitComponent2 = component2.split('b').map(mapParseInt);\n\n    if (component1IsBeta && component2IsBeta) {\n        var c1Compare = simpleCompare(splitComponent1[0], splitComponent2[0]);\n        if (c1Compare != 0)\n            return c1Compare;\n\n        return simpleCompare(splitComponent1[1], splitComponent2[1]);\n    } else if (component1IsBeta) {\n        return splitComponent1[0] > splitComponent2[0] ? 1 : -1;\n        // xby < x\n    } else {\n        return splitComponent2[0] > splitComponent1[0] ? 1 : -1;\n    }\n}\n\nfunction versionComponentCompare(component1, component2) {\n    if (component1.indexOf('b') != -1 || component2.indexOf('b') != -1)\n        return betaVersionComponentCompare(component1, component2);\n\n    return simpleCompare(parseInt(component1), parseInt(component2));\n}\n\nfunction versionIsLessThan(version1, version2) {\n    var splitV1 = version1.split('.');\n\n    if (splitV1.length == 2)\n        splitV1.push('0');\n\n    var splitV2 = version2.split('.');\n\n    if (splitV2.length == 2)\n        splitV2.push('0');\n\n    for (var i = 0; i < 3; ++i) {\n        var comparison = versionComponentCompare(splitV1[i], splitV2[i]);\n\n        if (comparison != 0)\n            return comparison < 0;\n    }\n\n    return false;\n}","var HISTORY_RECENT = 3;\nvar TRANSFER_RATE_UPDATE_INTERVAL = 200;\nvar TRANSFER_BYTES_MIN_UPDATE = 8192;\nvar TRANSFER_RATE_SAMPLES_MAX = 10;\nvar AUTOSAVE_DELAY_MS = 3000;\nvar MAX_CONCURRENT_UPLOADS = 1;\nvar MAX_UPLOAD_BYTES = -1;\nvar UPLOAD_ACTION = 'uploadFileToNewDirectory';\nvar UPLOAD_ARCHIVE_ACTION = 'uploadArchive';\nvar API_PATH = 'application/api/api.php';\nvar DOWNLOAD_PATH = 'application/api/download.php';\nvar UPLOAD_PATH = 'application/api/upload.php';\nvar CM_MODE_BASE = \"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/mode/\";\nvar EXTRACT_UPLOAD = false;\nvar DEBUG = false;\n\nvar g_ConnectionDefaults = {\n    ftp: {\n        port: 21\n    },\n    sftp: {\n        port: 22\n    }\n};\n\nangular.module('MonstaFTP', ['pascalprecht.translate']);\n\nangular.module('MonstaFTP').config(['$httpProvider', function ($httpProvider) {\n    'use strict';\n    var activeRequestCount = 0;\n\n    $httpProvider.interceptors.push(['$rootScope', '$q', function ($rootScope, $q) {\n        var handleActiveRequestChange = function (delta) {\n            activeRequestCount += delta;\n            $rootScope.$broadcast('request-count-change', activeRequestCount);\n        };\n\n        return {\n            'request': function (config) {\n                handleActiveRequestChange(1);\n                return config;\n            },\n            'responseError': function (rejection) {\n                handleActiveRequestChange(-1);\n                return $q.reject(rejection);\n            },\n            'response': function (response) {\n                handleActiveRequestChange(-1);\n                return response;\n            }\n        };\n    }]);\n}]);\n\nangular.module('MonstaFTP').config(['$translateProvider', function ($translateProvider) {\n    'use strict';\n    $translateProvider.useSanitizeValueStrategy('escape');\n    if (!window.underTest) { // TODO this is a bit hack\n        $translateProvider.useStaticFilesLoader({\n            prefix: 'application/languages/',\n            suffix: '.json'\n        });\n    }\n\n    $translateProvider.useMessageFormatInterpolation();\n    $translateProvider.fallbackLanguage('en_us');\n\n    if(window.localStorage) {\n        try {\n            var storedLanguage = localStorage.getItem('monsta-setting-language');\n            if(storedLanguage)\n                g_defaultLanguage = JSON.parse(storedLanguage);\n        } catch (e) {\n\n        }\n    }\n\n    $translateProvider.preferredLanguage(g_defaultLanguage);\n}]);","(function () {\n    angular.module('MonstaFTP').factory('authenticationFactory', authenticationFactory);\n\n    function authenticationFactory() {\n        var configurationKey = 'monsta-configuration',\n            connectionTypeKey = 'monsta-connectionType',\n            initialDirectoryKey = 'monsta-initialDirectory',\n            rememberLoginKey = 'monsta-rememberLogin',\n            isAuthenticatedKey = 'monsta-isAuthenticated',\n            hasServerSavedAuthenticationKey = 'monsta-hasServerSavedAuthentication';\n\n        return {\n            isAuthenticated: false,\n            rememberLogin: false,\n            configuration: null,\n            connectionType: null,\n            initialDirectory: null,\n            hasServerSavedAuthentication: false,\n            _localStorageSupported: null,\n            getConfigurationAsJSON: function () {\n                return JSON.stringify(this.configuration);\n            },\n            setConfigurationFromJSON: function (jsonConfig) {\n                this.configuration = jsonConfig == null ? null : JSON.parse(jsonConfig);\n            },\n            localStorageSupported: function () {\n                if (this._localStorageSupported == null) {\n                    var testKey = 'test', storage = window.localStorage;\n                    try {\n                        storage.setItem(testKey, '1');\n                        storage.removeItem(testKey);\n                        this._localStorageSupported = true;\n                    } catch (error) {\n                        this._localStorageSupported = false;\n                    }\n                }\n                return this._localStorageSupported;\n            },\n            postLogin: function () {\n                this.isAuthenticated = true;\n                this.saveSettings();\n            },\n            loadSettings: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.loadMetaConfiguration();\n\n                if (this.rememberLogin)\n                    this.loadConfiguration();\n            },\n            saveSettings: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.saveMetaConfiguration();\n\n                if (this.rememberLogin)\n                    this.saveConfiguration();\n                else\n                    this.clearConfiguration();\n            },\n            clearSettings: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                if (!this.rememberLogin)\n                    this.clearConfiguration();\n            },\n            logout: function () {\n                this.isAuthenticated = false;\n                this.initialDirectory = null;\n                this.saveSettings();\n                this.clearSettings();  // looks weird, but we want to save all, then clear out ones we don't want\n                this.configuration = null;\n                // if config has been saved to localStorage, this will be repopulated,  otherwise it clears out the form\n            },\n            loadConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.setConfigurationFromJSON(localStorage.getItem(configurationKey));\n                this.connectionType = localStorage.getItem(connectionTypeKey);\n                this.initialDirectory = localStorage.getItem(initialDirectoryKey);\n            },\n            saveConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                localStorage.setItem(configurationKey, this.getConfigurationAsJSON());\n                localStorage.setItem(connectionTypeKey, this.connectionType);\n                localStorage.setItem(initialDirectoryKey, this.initialDirectory);\n            },\n            clearConfiguration: function () {\n                localStorage.removeItem(configurationKey);\n                localStorage.removeItem(connectionTypeKey);\n                localStorage.removeItem(initialDirectoryKey);\n            },\n            loadMetaConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.rememberLogin = localStorage.getItem(rememberLoginKey) === 'true';\n                this.isAuthenticated = localStorage.getItem(isAuthenticatedKey) === 'true';\n                this.hasServerSavedAuthentication = localStorage.getItem(hasServerSavedAuthenticationKey) === 'true';\n            },\n            saveMetaConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                localStorage.setItem(isAuthenticatedKey, this.isAuthenticated == true ? 'true' : 'false');\n                localStorage.setItem(rememberLoginKey, this.rememberLogin == true ? 'true' : 'false');\n                localStorage.setItem(hasServerSavedAuthenticationKey,\n                    this.hasServerSavedAuthentication == true ? 'true' : 'false');\n            },\n            hasStoredAuthenticationDetails: function () {\n                return !isEmpty(this.connectionType) && !isEmpty(this.configuration);\n            },\n            getActiveConfiguration: function () {\n                var activeConfiguration = this.configuration[this.connectionType];\n                if (typeof(activeConfiguration.port) != 'undefined' && activeConfiguration.port != null)\n                    activeConfiguration.port = parseInt(activeConfiguration.port);\n                return activeConfiguration;\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('BreadcrumbController', BreadcrumbController);\n\n    BreadcrumbController.$inject = ['$scope', '$rootScope', 'jQuery'];\n\n    function BreadcrumbController($scope, $rootScope, jQuery) {\n        var vm = this;\n\n        vm.pathComponents = [];\n        vm.hasLeadingSlash = false;\n        vm.renderBreadcrumbs = renderBreadcrumbs;\n\n        this.setPath = setPath;\n        this.changeDirectoryToItem = changeDirectoryToItem;\n\n        $scope.$on('directory-changed', directoryChanged);\n\n        $scope.$on(\"logout\", function(){\n            vm.setPath(\"/\");\n        });\n\n        jQuery(window).resize(function () {\n            vm.renderBreadcrumbs();\n        });\n\n        function linkClick(ev) {\n            ev.preventDefault();\n            vm.changeDirectoryToItem(jQuery(this).data('index'));\n            return false;\n        }\n\n        function makeBreadcrumbItem(linkText, index) {\n            var $span = jQuery('<li class=\"breadcrumb-display\"></li>');\n            var $link = jQuery('<a href=\"#\" data-index=\"' + index + '\"></a>').text(linkText + ' ');\n            $link.click(linkClick);\n            $span.append($link);\n            return $span;\n        }\n\n        function renderBreadcrumbs() {\n            var RIGHT_COMPONENT_BUFFER = 15, RIGHT_FULL_BUFFER = 120;\n            // TODO: cache these elements so they aren't looked up every time\n            var $breadcrumbContainer = jQuery(\"#breadcrumb-ol\"), $homeLink = jQuery(\"#breadcrumb__home_link\"),\n                historyButton = jQuery('#history > button'), windowWidth = jQuery(window).width(),\n                maxWidth = windowWidth - historyButton.width() - RIGHT_FULL_BUFFER, totalWidth = 0;\n            $breadcrumbContainer.find('.breadcrumb-display').remove();\n\n            var lastIndex = vm.pathComponents.length - 1, $rightSpan = null;\n\n            for (var i = lastIndex; i >= 0; --i) {\n                var component = vm.pathComponents[i];\n\n                var $span = makeBreadcrumbItem(component, i + 1);\n\n                if ($rightSpan === null)\n                    $rightSpan = $span;\n\n                $homeLink.after($span);\n\n                totalWidth += $span.outerWidth();\n\n                if (totalWidth > maxWidth) {\n                    if (i != lastIndex) {\n                        // only remove it if this isn't the first try\n                        $span.remove();\n                    }\n\n                    if (lastIndex != 0) {\n                        var $initialSpan = makeBreadcrumbItem(\"…\", i + 1);\n                        $homeLink.after($initialSpan);\n                    }\n                    break;\n                }\n            }\n\n            if (totalWidth > maxWidth) {\n                var charactersRemoved = 1;\n\n                while ($rightSpan.offset().left + $rightSpan.outerWidth() + RIGHT_COMPONENT_BUFFER > windowWidth) {\n                    ++charactersRemoved;\n                    var lastComponent = vm.pathComponents[lastIndex], lastComponentLength = lastComponent.length;\n                    var trimmedName = lastComponent.substr(0, lastComponentLength - charactersRemoved);\n                    trimmedName += \"…\";\n                    $rightSpan.text(trimmedName);\n                    if (lastComponentLength - charactersRemoved == 1)\n                        break; // this is safety to prevent infinite loops\n                }\n            }\n        }\n\n        function setPath(path) {\n            if (typeof(path) != 'string' || path.length == 0) {\n                vm.pathComponents = [];\n                vm.hasLeadingSlash = false;\n                return;\n            }\n\n            vm.hasLeadingSlash = path.substr(0, 1) == '/';\n\n            if (path == '/')\n                vm.pathComponents = [];\n            else {\n                vm.pathComponents = path.split('/');\n                if (vm.pathComponents[0] == '')\n                    vm.pathComponents.splice(0, 1);\n\n                if (vm.pathComponents[vm.pathComponents.length - 1] == '')\n                    vm.pathComponents.splice(vm.pathComponents.length - 1, 1);\n            }\n\n            vm.renderBreadcrumbs();\n        }\n\n        function changeDirectoryToItem(itemIndex) {\n            var joinedPath = '';\n            if (itemIndex != 0)\n                joinedPath = vm.pathComponents.slice(0, itemIndex).join('/');\n\n            var newPath = (vm.hasLeadingSlash ? '/' : '') + joinedPath;\n            $rootScope.$broadcast('change-directory', newPath);\n        }\n\n        function directoryChanged(ev, path) {\n            vm.setPath(path);\n        }\n    }\n}());","(function(){\n    angular.module('MonstaFTP').factory('configurationFactory', configurationFactory);\n\n    configurationFactory.$inject = ['connectionFactory', '$q', '$rootScope'];\n\n    function configurationFactory(connectionFactory, $q, $rootScope) {\n        var factory = {\n            getSystemConfiguration: getSystemConfiguration,\n            saveApplicationSettings: saveApplicationSettings,\n            setApplicationSetting: setApplicationSetting,\n            getApplicationSetting: getApplicationSetting\n        }, promise = null, lastRequestFailed = false, config = null;\n\n        function getSystemConfiguration() {\n            if(promise === null || lastRequestFailed)\n                promise = connectionFactory.getSystemVars().then(requestSuccess, requestFailure);\n\n            return promise;\n        }\n\n        function requestSuccess(response) {\n            config = response.data.data;\n            return config;\n        }\n\n        function requestFailure(response) {\n            lastRequestFailed = true;\n            return $q.reject(response);\n        }\n\n        function saveApplicationSettings() {\n            return connectionFactory.setApplicationSettings(config.applicationSettings);\n        }\n\n        function setApplicationSetting(key, value) {\n            if (config == null)\n                return;\n\n            if (config.applicationSettings == undefined)\n                config.applicationSettings = {};\n\n            var keyChanged = config.applicationSettings[key] != value;\n\n            config.applicationSettings[key] = value;\n\n            if(keyChanged)\n                $rootScope.$broadcast('configuration:key-changed', key, value);\n        }\n\n        function getApplicationSetting(key) {\n            if(config == null)\n                return null;\n\n            return config.applicationSettings[key];\n        }\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('localConfigurationFactory', localConfigurationFactory);\n\n    localConfigurationFactory.$inject = ['configurationFactory', '$rootScope'];\n\n    function localConfigurationFactory(configurationFactory, $rootScope) {\n        var factory = {\n            getApplicationSettings: getApplicationSettings,\n            getConfigurationItem: getConfigurationItem,\n            setConfigurationItem: setConfigurationItem\n        };\n\n        var isLocalStorageSupported = null, inMemoryStorage = {}, applicationSettings = {};\n\n        function localStorageSupported() {\n            if (isLocalStorageSupported == null) {\n                var testKey = 'test', storage = window.localStorage;\n                try {\n                    storage.setItem(testKey, '1');\n                    storage.removeItem(testKey);\n                    isLocalStorageSupported = true;\n                } catch (error) {\n                    isLocalStorageSupported = false;\n                }\n            }\n            return isLocalStorageSupported;\n        }\n\n        function getItemFromLocalStorage(key) {\n            var rawItem = localStorage.getItem(key);\n\n            if (typeof (rawItem) == \"string\")\n                return JSON.parse(rawItem);\n\n            return rawItem;\n        }\n\n        function storeItemInLocalStorage(key, item) {\n            localStorage.setItem(key, JSON.stringify(item));\n        }\n\n        function storeItem(key, item) {\n            key = \"monsta-setting-\" + key;\n            if (localStorageSupported())\n                storeItemInLocalStorage(key, item);\n            else\n                inMemoryStorage[key] = item;\n        }\n\n        function getItem(key) {\n            key = \"monsta-setting-\" + key;\n            if (localStorageSupported())\n                return getItemFromLocalStorage(key);\n\n            return inMemoryStorage[key];\n        }\n\n        function getConfigurationItem(key) {\n            if(getItem(key) == undefined)\n                return applicationSettings[key];\n\n            return getItem(key);\n        }\n\n        function getApplicationSettings() {\n            return configurationFactory.getSystemConfiguration().then(function (systemVars) {\n                applicationSettings = systemVars.applicationSettings;\n            }, requestFailure);\n        }\n\n        function setConfigurationItem(key, item) {\n            var keyChanged = getItem(key) != item;\n\n            storeItem(key, item);\n\n            if(keyChanged)\n                $rootScope.$broadcast('configuration:key-changed', key, item);\n        }\n\n        function requestFailure(response) {\n            return $q.reject(response);\n        }\n\n        return factory;\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').factory('codeMirrorFactory', codeMirrorFactory);\n\n    codeMirrorFactory.$inject = ['$window'];\n\n    function codeMirrorFactory($window) {\n        var _jQuery = $window.jQuery; // can't inject factory into factory it seems\n        return {\n            jQuery: _jQuery, // for reference in tests & mocking\n            loadedModes: [],\n            convertFilenameToMode: function (fileName) {\n                var fileExtension = extractFileExtension(fileName);\n\n                var modeLookup = {\n                    htm: 'htmlmixed',\n                    html: 'htmlmixed',\n                    php: 'php',\n                    asp: 'htmlembedded',\n                    aspx: 'htmlembedded',\n                    js: 'javascript',\n                    css: 'css',\n                    xhtml: 'htmlmixed',\n                    cfm: 'htmlembedded',\n                    pl: 'perl',\n                    py: 'python',\n                    c: 'clike',\n                    cpp: 'clike',\n                    rb: 'ruby',\n                    java: 'java',\n                    xml: 'xml'\n                };\n\n                return modeLookup.hasOwnProperty(fileExtension) ? modeLookup[fileExtension] : null;\n            },\n            getModeDependencies: function (modeName) {\n                var dependencyLookup = {\n                    'htmlmixed': ['xml', 'javascript', 'css'],\n                    'php': ['xml', 'javascript', 'css', 'htmlmixed', 'clike']\n                    // todo: make these work recursively instead of coding all deps in\n                };\n\n                return dependencyLookup.hasOwnProperty(modeName) ? dependencyLookup[modeName] : null;\n            },\n            generateModePath: function (modeName) {\n                return CM_MODE_BASE + modeName + \"/\" + modeName + '.js';\n            }, setupCodeMirror: function (modeName, editorElement, postSetupCallback) {\n                var cm = CodeMirror.fromTextArea(editorElement, {\n                    value: editorElement.value,\n                    mode: modeName,\n                    lineNumbers: true,\n                    lineWrapping: true\n                });\n\n                postSetupCallback(cm);\n            }, postScriptLoad: function (modeName, editorElement, postSetupCallback) {\n                if (this.loadedModes.indexOf(modeName) == -1)\n                    this.loadedModes.push(modeName);\n\n                this.setupCodeMirror(modeName, editorElement, postSetupCallback);\n            }, loadModeAfterDependencies: function (modeName, editorElement, postSetupCallback) {\n                if (this.loadedModes.indexOf(modeName) != -1) {\n                    this.setupCodeMirror(modeName, editorElement, postSetupCallback);\n                    return;\n                }\n                var _this = this;\n                this.jQuery.getScript(this.generateModePath(modeName), function () {\n                    _this.postScriptLoad.call(_this, modeName, editorElement, postSetupCallback);\n                });\n            }, initiateCodeMirror: function (modeName, editorElement, postSetupCallback) {\n                var dependencies = this.getModeDependencies(modeName);\n\n                var neededDependencies = [];\n\n                if (dependencies != null) {\n                    for (var i = 0; i < dependencies.length; ++i)\n                        if (this.loadedModes.indexOf(dependencies[i]) == -1)\n                            neededDependencies.push(dependencies[i]);\n                }\n\n                if (neededDependencies.length == 0)\n                    this.loadModeAfterDependencies(modeName, editorElement, postSetupCallback);\n                else {\n                    var dependencyName = neededDependencies[0], _this = this;\n\n                    this.jQuery.getScript(this.generateModePath(dependencyName), function () {\n                        _this.loadedModes.push(dependencyName);\n                        _this.initiateCodeMirror.call(_this, modeName, editorElement, postSetupCallback);\n                    });\n                }\n            }\n        };\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').factory('connectionFactory', connectionFactory);\n\n    connectionFactory.$inject = ['$http', 'authenticationFactory'];\n\n    function connectionFactory($http, authenticationFactory) {\n        var NETWORK_TIMEOUT_SECONDS = 30;\n        var IGNORE_TIMEOUT_TYPES = [\n            \"downloadMultipleFiles\",\n            \"fetchRemoteFile\",\n            \"copy\",\n            \"extractArchive\",\n            \"deleteMultiple\"\n        ];\n\n        var addRemoteFileRequest = function (request, actionName, remotePath) {\n            request['actionName'] = actionName;\n            request['context'] = {\n                'remotePath': remotePath\n            };\n        };\n\n        var addSourceDestinationRequest = function (request, actionName, source, destination) {\n            request['actionName'] = actionName;\n            request['context'] = {\n                'source': source,\n                'destination': destination\n            };\n        };\n\n        return {\n            _sendRequest: function (requestBody) {\n                var timeout = IGNORE_TIMEOUT_TYPES.indexOf(requestBody.actionName) == -1 ? NETWORK_TIMEOUT_SECONDS * 1000 : null;\n\n                var req = {\n                    method: 'POST',\n                    url: API_PATH,\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    transformRequest: function (obj) {\n                        var str = [];\n                        for (var p in obj) {\n                            if (!obj.hasOwnProperty(p))\n                                continue;\n                            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(JSON.stringify(obj[p])));\n                        }\n                        return str.join(\"&\");\n                    },\n                    timeout: timeout,\n                    data: {\n                        request: requestBody\n                    }\n                };\n\n                if (DEBUG)\n                    console.log(req);\n\n                return $http(req);\n            },\n            getRequestBody: function () {\n                var config = angular.copy(authenticationFactory.getActiveConfiguration());\n\n                var defaultsForConnectionType = g_ConnectionDefaults[authenticationFactory.connectionType];\n\n                if (defaultsForConnectionType) {\n                    for (var defaultName in defaultsForConnectionType) {\n                        if (!defaultsForConnectionType.hasOwnProperty(defaultName))\n                            continue;\n\n                        if (config[defaultName] == null || config[defaultName] == undefined || config[defaultName] == '')\n                            config[defaultName] = defaultsForConnectionType[defaultName];\n                    }\n                }\n\n                return {\n                    connectionType: authenticationFactory.connectionType,\n                    configuration: config\n                };\n            },\n            getEmptyRequestBody: function () {\n                return {connectionType: null, configuration: null};\n            },\n            getListDirectoryRequest: function (request, path, showHidden) {\n                request['actionName'] = 'listDirectory';\n                request['context'] = {\n                    path: path,\n                    showHidden: showHidden\n                };\n            },\n            getFetchFileRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'fetchFile', remotePath);\n            },\n            getMakeDirectoryRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'makeDirectory', remotePath);\n            },\n            getDeleteDirectoryRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'deleteDirectory', remotePath);\n            },\n            getDeleteFileRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'deleteFile', remotePath);\n            },\n            getCopyRequest: function (request, source, destination) {\n                addSourceDestinationRequest(request, 'copy', source, destination);\n            },\n            getRenameRequest: function (request, source, destination) {\n                addSourceDestinationRequest(request, 'rename', source, destination);\n            },\n            getChangePermissionsRequest: function (request, remotePath, mode) {\n                addRemoteFileRequest(request, 'changePermissions', remotePath);\n                request['context']['mode'] = mode;\n            },\n            getPutFileContentsRequest: function (request, remotePath, fileContents) {\n                request['actionName'] = 'putFileContents';\n                request['context'] = {remotePath: remotePath, fileContents: fileContents};\n            },\n            getGetFileContentsRequest: function (request, remotePath) {\n                request['actionName'] = 'getFileContents';\n                request['context'] = {remotePath: remotePath};\n            },\n            getTestConnectAndAuthenticateRequest: function (request) {\n                request['actionName'] = 'testConnectAndAuthenticate';\n                request['context'] = {}\n            },\n            getCheckSavedAuthExistsRequest: function (request) {\n                request['actionName'] = 'checkSavedAuthExists';\n                request['context'] = {};\n            },\n            getWriteSavedAuthRequest: function (request, password, authData) {\n                request['actionName'] = 'writeSavedAuth';\n                request['context'] = {\n                    password: password,\n                    authData: authData\n                };\n            },\n            getReadSavedAuthRequest: function (request, password) {\n                request['actionName'] = 'readSavedAuth';\n                request['context'] = {\n                    password: password\n                };\n            },\n            getReadLicenseRequest: function (request) {\n                request['actionName'] = 'readLicense';\n                request['context'] = {};\n            },\n            getGetSystemVarsRequest: function (request) {\n                request['actionName'] = 'getSystemVars';\n                request['context'] = {};\n            },\n            getFetchRemoteFileRequest: function (request, remoteSource, destinationDirectory) {\n                addSourceDestinationRequest(request, 'fetchRemoteFile', remoteSource, destinationDirectory);\n            },\n            getDownloadMultipleFilesRequest: function (request, baseDirectory, items) {\n                request['actionName'] = 'downloadMultipleFiles';\n                request['context'] = {baseDirectory: baseDirectory, items: items};\n            },\n            getSetApplicationSettingsRequest: function(request, applicationSettings){\n                request['actionName'] = 'setApplicationSettings';\n                request['context'] = {applicationSettings: applicationSettings};\n            },\n            getDeleteMultipleRequest: function (request, pathsAndTypes) {\n                request['actionName'] = 'deleteMultiple';\n                request['context'] = {pathsAndTypes: pathsAndTypes};\n            },\n            getExtractArchiveRequest: function (request, fileKey, fileIndexOffset, extractCount) {\n                request['actionName'] = 'extractArchive';\n                request['context'] = {fileKey: fileKey, fileIndexOffset: fileIndexOffset, extractCount: extractCount};\n            },\n            getUpdateLicenseRequest: function (request, license) {\n                request['actionName'] = 'updateLicense';\n                request['context'] = {license: license};\n            },\n            listDirectory: function (path, showHidden) {\n                this.requestBody = this.getRequestBody();\n                this.getListDirectoryRequest(this.requestBody, path, showHidden);\n                return this._sendRequest(this.requestBody);\n            },\n            fetchFile: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getFetchFileRequest(this.requestBody, path, true);\n                return this._sendRequest(this.requestBody);\n            },\n            rename: function (source, destination) {\n                this.requestBody = this.getRequestBody();\n                this.getRenameRequest(this.requestBody, source, destination);\n                return this._sendRequest(this.requestBody);\n            },\n            changePermissions: function (path, mode) {\n                this.requestBody = this.getRequestBody();\n                this.getChangePermissionsRequest(this.requestBody, path, mode);\n                return this._sendRequest(this.requestBody);\n            },\n            copy: function (source, destination) {\n                this.requestBody = this.getRequestBody();\n                this.getCopyRequest(this.requestBody, source, destination);\n                return this._sendRequest(this.requestBody);\n            },\n            deleteFile: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getDeleteFileRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            deleteDirectory: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getDeleteDirectoryRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            makeDirectory: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getMakeDirectoryRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            getFileContents: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getGetFileContentsRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            putFileContents: function (path, contents) {\n                this.requestBody = this.getRequestBody();\n                this.getPutFileContentsRequest(this.requestBody, path, contents);\n                return this._sendRequest(this.requestBody);\n            },\n            testConnectAndAuthenticate: function () {\n                this.requestBody = this.getRequestBody();\n                this.getTestConnectAndAuthenticateRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            },\n            checkSavedAuthExists: function () {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getCheckSavedAuthExistsRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            }, writeSavedAuth: function (password, authData) {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getWriteSavedAuthRequest(this.requestBody, password, authData);\n                return this._sendRequest(this.requestBody);\n            }, readSavedAuth: function (password) {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getReadSavedAuthRequest(this.requestBody, password);\n                return this._sendRequest(this.requestBody);\n            }, getLicense: function () {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getReadLicenseRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            }, getSystemVars: function () {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getGetSystemVarsRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            }, fetchRemoteFile: function (remoteSource, destinationDirectory) {\n                this.requestBody = this.getRequestBody();\n                this.getFetchRemoteFileRequest(this.requestBody, remoteSource, destinationDirectory);\n                return this._sendRequest(this.requestBody);\n            }, downloadMultipleFiles: function (baseDirectory, items) {\n                this.requestBody = this.getRequestBody();\n                this.getDownloadMultipleFilesRequest(this.requestBody, baseDirectory, items);\n                return this._sendRequest(this.requestBody);\n            }, setApplicationSettings: function(applicationSettings) {\n                this.requestBody = this.getRequestBody();\n                this.getSetApplicationSettingsRequest(this.requestBody, applicationSettings);\n                return this._sendRequest(this.requestBody);\n            }, deleteMultiple: function(pathsAndTypes) {\n                this.requestBody = this.getRequestBody();\n                this.getDeleteMultipleRequest(this.requestBody, pathsAndTypes);\n                return this._sendRequest(this.requestBody);\n            }, extractArchive: function (fileKey, fileIndexOffset, extractCount) {\n                this.requestBody = this.getRequestBody();\n                this.getExtractArchiveRequest(this.requestBody, fileKey, fileIndexOffset, extractCount);\n                return this._sendRequest(this.requestBody);\n            }, updateLicense: function (license) {\n                this.requestBody = this.getRequestBody();\n                this.getUpdateLicenseRequest(this.requestBody, license);\n                return this._sendRequest(this.requestBody);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('directorySortingFactory', directorySortingFactory);\n\n    function directorySortingFactory() {\n        var compareByDirectoryFlag = function (a, b) {\n            if (a.isDirectory == b.isDirectory)\n                return 0;\n\n            return a.isDirectory ? -1 : 1;\n        };\n\n        var compareByName = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            if (a.name.toLowerCase() == b.name.toLowerCase())\n                return 0;\n\n            return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n        };\n\n        var compareByModificationDate = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            if (a.modificationDate != b.modificationDate)\n                return a.modificationDate - b.modificationDate;\n\n            return compareByName(a, b);\n        };\n\n        var compareBySize = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            if (a.size != b.size)\n                return a.size - b.size;\n\n            return compareByName(a, b);\n        };\n\n        var compareByType = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            var aExt = extractFileExtension(a.name), bExt = extractFileExtension(b.name);\n            if (aExt != bExt)\n                return aExt > bExt ? 1 : -1;\n\n            return compareByName(a, b);\n        };\n\n        return {\n            _handleReverse: function (sortedList, reverse) {\n                if (reverse)\n                    sortedList.reverse();\n\n                return sortedList;\n            },\n            sortByName: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareByName), reverse);\n            },\n            sortByModificationDate: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareByModificationDate), reverse);\n            },\n            sortBySize: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareBySize), reverse);\n            },\n            sortByType: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareByType), reverse);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('DragDropController', DragDropController);\n\n    DragDropController.$inject = ['uploadUIFactory', 'jQuery'];\n\n    function DragDropController(uploadUIFactory, jQuery) {\n        'use strict';\n        var overDrop = false, vm = this, $html = jQuery('html');\n\n        vm.handleDropEvent = handleDropEvent;\n\n        $html.ready(function () {\n            var $fileDrop = jQuery(\"#file-xfer-drop\");\n            $html.on('dragenter', function () {\n                var $files = jQuery('#files');\n\n                $fileDrop.css({\n                    top: $files.position().top,\n                    height: $files.height(),\n                    display: \"table\"\n                });\n\n                $fileDrop.show();\n            });\n\n            $html.on('dragend', function () {\n                if (overDrop)\n                    return;\n\n                $fileDrop.hide();\n            });\n\n            $fileDrop.ready(function () {\n                $fileDrop.on({\n                    dragenter: function (e) {\n                        overDrop = true;\n                        e.stopPropagation();\n                        e.preventDefault();\n                    },\n                    dragleave: function (e) {\n                        if (!jQuery.contains($fileDrop, jQuery(e.target)))\n                            overDrop = false;\n                        e.stopPropagation();\n                        e.preventDefault();\n                        $fileDrop.hide();\n                    },\n                    dragover: function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                    },\n                    drop: function (e) {\n                        overDrop = false;\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        var browserEvent = e.originalEvent;\n                        if (!browserEvent.dataTransfer || !browserEvent.dataTransfer.files)\n                            return false;\n\n                        if (!containsFiles(browserEvent))\n                            return false;\n\n                        vm.handleDropEvent(browserEvent);\n                        $fileDrop.hide();\n                    },\n                    dragend: function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        $fileDrop.hide();\n                    }\n                });\n            });\n        });\n\n        function containsFiles(browserEvent) {\n            if (browserEvent.dataTransfer.types) {\n                for (var i = 0; i < browserEvent.dataTransfer.types.length; i++) {\n                    if (browserEvent.dataTransfer.types[i] == \"Files\") {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n        }\n\n        function handleDropEvent(event) {\n            event.preventDefault();\n\n            var items = event.dataTransfer.items;\n\n            if (items != undefined)\n                uploadUIFactory.handleItemsBasedUpload(items, null);\n            else {\n                var files = event.dataTransfer.files;\n                // for IE this needs to be re-referenced, if passing it directly it empties\n                uploadUIFactory.handleFilesBasedUpload(files, null);\n            }\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('FileBrowserController', FileBrowserController);\n\n\n    FileBrowserController.$inject = ['$scope', '$rootScope', 'connectionFactory', 'uiOperationFactory', '$window',\n        'authenticationFactory', 'historyFactory', 'jQuery', '$timeout', 'directorySortingFactory', '$translate',\n        'selectedItemsFactory', 'configurationFactory', 'localConfigurationFactory', 'rowMouseTrackerFactory'];\n\n    function FileBrowserController($scope, $rootScope, connectionFactory, uiOperationFactory, $window,\n                                   authenticationFactory, historyFactory, jQuery, $timeout, directorySortingFactory,\n                                   $translate, selectedItemsFactory, configurationFactory, localConfigurationFactory,\n                                   rowMouseTrackerFactory) {\n        'use strict';\n        var vm = this, CONTEXT_MENU_X_OFFSET = 7, CONTEXT_MENU_Y_OFFSET = 14, CONTEXT_MENU_INSET = 20,\n            systemVars = null, loggedIn = false, editableExtensions = [], currentContextMenu = null,\n            preventRowDeselect = false;\n\n        $scope.directoryList = [];\n        $scope.selectedItems = selectedItemsFactory.getSelectedItems();\n        $scope.directoriesToDelete = null;\n        $scope.filesToDelete = null;\n        $scope.isHistoryChangeDir = false;\n        $scope.sortName = 'name';\n        $scope.sortReversed = false;\n        vm.renameSource = null;\n        vm.rowDragStartIndex = null;\n        vm.isMetaDrag = false;\n        vm.previousDragOverIndex = null;\n        vm.uiOperationFactory = uiOperationFactory;\n\n        vm.didLogout = didLogout;\n        vm.doReorder = doReorder;\n        vm.cancelDelete = cancelDelete;\n        vm.performPaste = performPaste;\n        vm.confirmDelete = confirmDelete;\n        vm.deleteComplete = deleteComplete;\n        vm.downloadSingle = downloadSingle;\n        vm.initiateRename = initiateRename;\n        vm.changeDirectory = changeDirectory;\n        vm.downloadMultiple = downloadMultiple;\n        vm.getSelectedPaths = getSelectedPaths;\n        vm.initiateMakeItem = initiateMakeItem;\n        vm.showDeleteConfirm = showDeleteConfirm;\n        vm.sortDirectoryList = sortDirectoryList;\n        vm.downloadFileAtPath = downloadFileAtPath;\n        vm.fileRenameCallback = fileRenameCallback;\n        vm.initiateCutOfPaths = initiateCutOfPaths;\n        vm.makeItemOKCallback = makeItemOKCallback;\n        vm.handleReorderChange = handleReorderChange;\n        vm.initiateCopyOfPaths = initiateCopyOfPaths;\n        vm.directoryListSuccess = directoryListSuccess;\n        vm.refreshDirectoryList = refreshDirectoryList;\n        vm.downloadSelectedFiles = downloadSelectedFiles;\n        vm.handleChangeDirectory = handleChangeDirectory;\n        vm.makeItemSuccessCallback = makeItemSuccessCallback;\n        vm.makeItemFailureCallback = makeItemFailureCallback;\n        vm.setupContextMenuEvents = setupContextMenuEvents;\n        vm.initiateCutOfSelectedPaths = initiateCutOfSelectedPaths;\n        vm.initiateCopyOfSelectedPaths = initiateCopyOfSelectedPaths;\n        vm.initiateChmodOfSelectedItems = initiateChmodOfSelectedItems;\n        vm.initiateDeleteOfSelectedPaths = initiateDeleteOfSelectedPaths;\n\n        vm.rowMouseDown = rowMouseDown;\n        vm.rowMouseMove = rowMouseMove;\n        vm.rowMouseUp = rowMouseUp;\n        vm.rowMouseLeave = rowMouseLeave;\n\n        vm.setEditableExtensions = setEditableExtensions;\n        vm.itemIsEditable = itemIsEditable;\n        vm.navigateUpOneLevel = navigateUpOneLevel;\n        vm.showProperties = showProperties;\n        vm.handleBodyClick = handleBodyClick;\n\n        $scope.reorder = function ($event) {\n            vm.handleReorderChange($event.currentTarget.getAttribute('data-sort-name'));\n        };\n\n        $scope.initiateDeleteOfItem = function (item) {\n            var itemPath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n\n            if (item.isDirectory == true) {\n                $scope.directoriesToDelete = [itemPath];\n                $scope.filesToDelete = null;\n            } else {\n                $scope.filesToDelete = [itemPath];\n                $scope.directoriesToDelete = null;\n            }\n\n            vm.showDeleteConfirm([item.name]);\n        };\n\n        $scope.downloadItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            vm.downloadFileAtPath(fullFilePath);\n        };\n\n        $scope.initiateCutOfItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            vm.initiateCutOfPaths([fullFilePath]);\n        };\n\n        $scope.initiateCopyOfItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            vm.initiateCopyOfPaths([fullFilePath]);\n        };\n\n        $scope.editItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            $rootScope.$broadcast('file-editor:edit', item.name, fullFilePath);\n        };\n\n        $scope.initiateRenameOfItem = function (item) {\n            vm.renameSource = item.name;\n            vm.initiateRename();\n        };\n\n        $scope.$on('change-directory:on-history', function (ev, path) {\n            $scope.isHistoryChangeDir = true;\n            vm.handleChangeDirectory(path);\n        });\n\n        $scope.$on('change-directory', function (ev, path) {\n            $scope.isHistoryChangeDir = false;\n            vm.handleChangeDirectory(path);\n        });\n\n        $scope.$on('change-directory:on-upload', function () {\n            vm.handleChangeDirectory(null, true)\n        });\n\n        $scope.handleClick = function ($event, index) {\n            $event.stopPropagation();\n            var item = this.item;\n            if (item.isDirectory) {\n                var directoryPath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n                vm.changeDirectory(directoryPath);\n            } else {\n                jQuery($event.target.parentNode.parentNode).find('.context-catcher-button').dropdown('toggle');\n                selectedItemsFactory.selectItem(index);\n            }\n        };\n\n        $scope.$on('footer-button-click', function (ev, buttonName) {\n            // todo: this doesn't necessarily need to be here as it's a $rootScope.$bc so available anywhere\n            switch (buttonName) {\n                case 'download':\n                    vm.downloadSelectedFiles();\n                    break;\n                case 'cut':\n                    vm.initiateCutOfSelectedPaths();\n                    break;\n                case 'copy':\n                    vm.initiateCopyOfSelectedPaths();\n                    break;\n                case 'paste':\n                    vm.performPaste();\n                    break;\n                case 'delete':\n                    vm.initiateDeleteOfSelectedPaths();\n                    break;\n                case 'new-folder':\n                    vm.initiateMakeItem('folder');\n                    break;\n                case 'new-file':\n                    vm.initiateMakeItem('file');\n                    break;\n                case 'chmod':\n                    vm.initiateChmodOfSelectedItems();\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        function postLogin() {\n            if (systemVars != null && loggedIn == true)\n                vm.changeDirectory(authenticationFactory.initialDirectory, true);\n        }\n\n        $scope.$on('login', function () {\n            loggedIn = true;\n            postLogin();\n        });\n\n        $scope.initiateChmodOfItem = function (item) {\n            $rootScope.$broadcast('modal-permissions:show', [uiOperationFactory.joinNameToCurrentDirectory(item.name)],\n                item.numericPermissions);\n        };\n\n        $scope.$on('selected-items-changed', function () {\n            $scope.selectedItems = selectedItemsFactory.getSelectedItems();\n        });\n\n        $scope.$on('logout', function () {\n            vm.didLogout();\n        });\n\n        $scope.$on('configuration:key-changed', function (ev, key, value) {\n            if (key == 'editableFileExtensions') {\n                vm.setEditableExtensions(value);\n            }\n        });\n\n        configurationFactory.getSystemConfiguration().then(systemVarLoadSuccess, systemVarLoadFailure);\n\n        function contextMenuStyleForEvent(ev) {\n            return {\n                position: \"fixed\",\n                left: ev.clientX + CONTEXT_MENU_X_OFFSET + \"px\",\n                top: ev.clientY + CONTEXT_MENU_Y_OFFSET + \"px\",\n                'margin-left': 0,\n                'margin-top': 0\n            };\n        }\n\n        function fixContextMenuOffScreen(event, $dropdownMenu) {\n            if (elementWillExtendPastWindowWidth(event.clientX + CONTEXT_MENU_X_OFFSET, $dropdownMenu))\n                $dropdownMenu.css(\"margin-left\", -($dropdownMenu.width() + CONTEXT_MENU_INSET));\n\n            if (elementWillExtendPastWindowHeight(event.clientY + CONTEXT_MENU_Y_OFFSET, $dropdownMenu))\n                $dropdownMenu.css(\"margin-top\", -($dropdownMenu.height() + CONTEXT_MENU_INSET));\n        }\n\n        function setupContextMenuEvents() {\n            jQuery(\".context-catcher-tr\").contextmenu(function (e) {\n                var $tr = jQuery(this);\n                var $dropdownMenu = $tr.find('.dropdown-menu').first();\n                var rowIndex = $tr.data('index');\n                preventRowDeselect = selectedItemsFactory.getSelectedItems().indexOf(rowIndex) != -1;\n                $dropdownMenu.css(contextMenuStyleForEvent(e));\n\n                jQuery(this).find('.context-catcher-button').dropdown('toggle');\n\n                fixContextMenuOffScreen(e, $dropdownMenu);\n\n                if([\"DIV\", \"TR\", \"TD\"].indexOf(e.target.tagName) == -1)\n                     selectedItemsFactory.selectItem(rowIndex);\n\n                return false;\n            });\n\n            var $fileToobar = jQuery('.file-toolbar');\n\n            $fileToobar.on('shown.bs.dropdown', function () {\n                var $dropdownMenu = jQuery(this).find('.dropdown-menu');\n                currentContextMenu = $dropdownMenu;\n                var $dropDownMenuParent = $dropdownMenu.parent().removeClass('dropup');\n\n                if ($dropdownMenu.css('position') == 'fixed')  // it was shown with rightclick so don't mess with it\n                    return;\n\n                if ($dropdownMenu.offset().top + $dropdownMenu.outerHeight() > jQuery(window).height() - jQuery(\"#footer\").height())\n                    $dropDownMenuParent.addClass('dropup');\n            });\n\n            $fileToobar.on('hidden.bs.dropdown', function () {\n                var $contextCatcherUl = jQuery(this).find('.dropdown-menu');\n                $contextCatcherUl.attr('style', null);\n                currentContextMenu = null;\n            });\n        }\n\n        function elementWillExtendPastWindowWidth(xOffset, $element) {\n            return xOffset + $element.width() > jQuery(window).width();\n        }\n\n        function elementWillExtendPastWindowHeight(yOffset, $element) {\n            return yOffset + $element.height() > jQuery(window).height()\n        }\n\n        function doReorder() {\n            $scope.directoryList = vm.sortDirectoryList($scope.directoryList, $scope.sortName, $scope.sortReversed);\n        }\n\n        function handleReorderChange(newSortName) {\n            $scope.sortReversed = newSortName == $scope.sortName ? !$scope.sortReversed : false;\n            $scope.sortName = newSortName;\n            vm.doReorder();\n        }\n\n        function sortDirectoryList(directoryList, sortName, sortReversed) {\n            var sortMethodName = null;\n            switch (sortName) {\n                case 'name':\n                    sortMethodName = 'sortByName';\n                    break;\n                case 'modified':\n                    sortMethodName = 'sortByModificationDate';\n                    break;\n                case 'size':\n                    sortMethodName = 'sortBySize';\n                    break;\n                case 'type':\n                    sortMethodName = 'sortByType';\n                    break;\n                default:\n                    break;\n            }\n\n            if (sortMethodName == null)\n                return directoryList;\n\n            return directorySortingFactory[sortMethodName](directoryList, sortReversed);\n        }\n\n        function directoryListSuccess(path, response, change) {\n            $scope.directoryList = vm.sortDirectoryList(response.data.data, $scope.sortName, $scope.sortReversed);\n            uiOperationFactory.currentDirectory = path;\n            selectedItemsFactory.clearSelection();\n\n            if (change) {\n                if (!$scope.isHistoryChangeDir)\n                    historyFactory.addEntry(uiOperationFactory.currentDirectory);\n                $scope.isHistoryChangeDir = false;\n                $rootScope.$broadcast('directory-changed', path);\n                authenticationFactory.initialDirectory = path;\n                authenticationFactory.saveSettings();\n            }\n            $timeout(function () {\n                vm.setupContextMenuEvents();\n                //DOM has finished rendering\n            });\n        }\n\n        function changeDirectory(path, isFirstLoad, allowTimeout) {\n            localConfigurationFactory.getApplicationSettings().then(\n                function () {\n                    var handleError;\n\n                    if (allowTimeout) {\n                        handleError = function () {\n                            // this is on upload finish which might fail sometimes but we don't care\n                        };\n                    } else {\n                        handleError = function (response) {\n                            if (isFirstLoad)\n                                vm.changeDirectory(\"/\");\n                            else\n                                showResponseError(response, 'directory change', $rootScope, $translate);\n                        };\n                    }\n\n                    connectionFactory.listDirectory(path, localConfigurationFactory.getConfigurationItem('showDotFiles')).then(\n                        function (response) {\n                            vm.directoryListSuccess(path, response, path != uiOperationFactory.currentDirectory);\n                        },\n                        handleError\n                    );\n                },\n                function (response) {\n                    showResponseError(response, 'application settings load', $rootScope, $translate);\n                });\n        }\n\n        function refreshDirectoryList() {\n            vm.changeDirectory(uiOperationFactory.currentDirectory);\n        }\n\n        function filesReadyForDownloadCallback(response) {\n            if (responseIsUnsuccessful(response)) {\n                showResponseError(response, 'file download', $rootScope, $translate);\n                return;\n            }\n\n            var fileKey = response.data.fileKey;\n            $window.location = DOWNLOAD_PATH + '?fileKey=' + fileKey;\n        }\n\n        function fileFetchFailureCallback(response) {\n            showResponseError(response, 'file download', $rootScope, $translate);\n            $rootScope.$broadcast('modal-prompt:clear-busy');\n        }\n\n        function downloadFileAtPath(path) {\n            connectionFactory.fetchFile(path).then(filesReadyForDownloadCallback, fileFetchFailureCallback);\n        }\n\n        function downloadMultiple() {\n            var selectedItems = selectedItemsFactory.getSelectedItems();\n            var itemNames = [];\n\n            selectedItems.map(function (itemIndex) {\n                itemNames.push($scope.directoryList[itemIndex].name);\n            });\n\n            connectionFactory.downloadMultipleFiles(uiOperationFactory.currentDirectory, itemNames).then(\n                filesReadyForDownloadCallback, fileFetchFailureCallback);\n        }\n\n        function downloadSingle() {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(\n                $scope.directoryList[selectedItemsFactory.getSelectedItems()[0]].name);\n            vm.downloadFileAtPath(fullFilePath);\n        }\n\n        function downloadSelectedFiles() {\n            var selectedItems = selectedItemsFactory.getSelectedItems();\n            if (selectedItems.length > 1 || $scope.directoryList[selectedItems[0]].isDirectory) {\n                vm.downloadMultiple();\n            } else {\n                vm.downloadSingle();\n            }\n        }\n\n        function getSelectedPaths() {\n            var selectedPathCopy = selectedItemsFactory.getSelectedItems().slice();\n            selectedPathCopy.sort(function (a, b) {\n                return a - b;\n            });\n            return selectedPathCopy.map(function (pathIndex) {\n                return uiOperationFactory.joinNameToCurrentDirectory($scope.directoryList[pathIndex].name);\n            });\n        }\n\n        function initiateCopyOfPaths(paths) {\n            if (paths.length == 0)\n                return;\n\n            uiOperationFactory.setCopySource(paths);\n        }\n\n        function initiateCutOfPaths(paths) {\n            if (paths.length == 0)\n                return;\n\n            uiOperationFactory.setCutSource(paths);\n        }\n\n        function initiateCutOfSelectedPaths() {\n            vm.initiateCutOfPaths(vm.getSelectedPaths());\n        }\n\n        function initiateCopyOfSelectedPaths() {\n            vm.initiateCopyOfPaths(vm.getSelectedPaths());\n        }\n\n        function performPaste() {\n            if (uiOperationFactory.cutSource == null && uiOperationFactory.copySource == null)\n                return;\n\n            var sourcePaths, operation;\n\n            if (uiOperationFactory.cutSource != null) {\n                sourcePaths = uiOperationFactory.cutSource;\n                operation = 'rename';\n            } else {\n                sourcePaths = uiOperationFactory.copySource;\n                operation = 'copy';\n            }\n\n            for (var pathIndex = 0; pathIndex < sourcePaths.length; ++pathIndex) {\n                var sourcePath = sourcePaths[pathIndex];\n                var splitSourceFileName = sourcePath.split('/');\n                var sourceFileName = splitSourceFileName[splitSourceFileName.length - 1];\n                var destinationPath = uiOperationFactory.joinNameToCurrentDirectory(sourceFileName);\n                connectionFactory[operation](sourcePath, destinationPath).then(function () {\n                    uiOperationFactory.pasteComplete();\n                    vm.changeDirectory(uiOperationFactory.currentDirectory);\n                    if (operation == 'rename')\n                        $rootScope.$broadcast('items-moved', [[sourcePath, destinationPath]]);\n                }, function (response) {\n                    showResponseError(response, 'file paste', $rootScope, $translate);\n                });\n            }\n        }\n\n        function deleteComplete() {\n            var allItems = [].concat($scope.directoriesToDelete || [], $scope.filesToDelete || []);\n\n            $rootScope.$broadcast(\"items-deleted\", allItems);\n\n            $scope.directoriesToDelete = null;\n            $scope.filesToDelete = null;\n            vm.changeDirectory(uiOperationFactory.currentDirectory);\n        }\n\n        function confirmDelete() {\n            var itemsToDelete = [];\n\n            if ($scope.filesToDelete != null) {\n                $scope.filesToDelete.map(function (path) {\n                    if (uiOperationFactory.isCutOrCopySource(path))\n                        uiOperationFactory.clearCutAndCopySource();\n\n                    itemsToDelete.push([path, false]);\n                });\n            }\n\n            if ($scope.directoriesToDelete != null) {\n                $scope.directoriesToDelete.map(function (path) {\n                    if (uiOperationFactory.isCutOrCopySource(path))\n                        uiOperationFactory.clearCutAndCopySource();\n\n                    itemsToDelete.push([path, true]);\n                });\n            }\n            connectionFactory.deleteMultiple(itemsToDelete).then(function () {\n                vm.deleteComplete();\n            }, function (response) {\n                showResponseError(response, 'item deletion', $rootScope, $translate);\n                vm.deleteComplete();\n            });\n\n            /*\n             the inner function is needed for testing instead of calling connectionFactory.deleteFile directly in the map\n             because the function is actually called with 3 args (item, index, arr) and the real function discards the\n             second 2. the spy object doesn't know this so thinks its being called wrong\n             */\n        }\n\n        function cancelDelete() {\n            $scope.filesToDelete = null;\n            $scope.directoriesToDelete = null;\n        }\n\n        function showTranslatedDeleteConfirm(translatedMessage) {\n            $rootScope.$broadcast('modal-confirm:show', translatedMessage, vm.confirmDelete, vm.cancelDelete);\n        }\n\n        function showDeleteConfirm(fileNames) {\n            $translate('DELETE_CONFIRM_MESSAGE', {\n                item_count: fileNames.length\n            }).then(function (translatedMessage) {\n                showTranslatedDeleteConfirm(translatedMessage);\n            }, function (message) {\n                showTranslatedDeleteConfirm(message);\n            });\n        }\n\n        function initiateDeleteOfSelectedPaths() {\n            var selectedItems = selectedItemsFactory.getSelectedItems();\n            if (selectedItems.length == 0)\n                return;\n\n            var fileNames = [];\n\n            $scope.directoriesToDelete = [];\n            $scope.filesToDelete = [];\n\n            for (var i = 0; i < selectedItems.length; ++i) {\n                var itemIndex = selectedItems[i];\n                var item = $scope.directoryList[itemIndex];\n\n                fileNames.push(item.name);\n\n                var fullPath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n\n                if (item.isDirectory)\n                    $scope.directoriesToDelete.push(fullPath);\n                else\n                    $scope.filesToDelete.push(fullPath);\n            }\n\n            vm.showDeleteConfirm(fileNames);\n        }\n\n        function clearNewItemTempVars() {\n            vm.newItemPath = null;\n            $scope.makeItemType = null;\n        }\n\n        function makeItemSuccessCallback() {\n            $rootScope.$broadcast('modal-prompt:hide');\n            vm.refreshDirectoryList();\n\n            if ($scope.makeItemType == 'folder') {\n                clearNewItemTempVars();\n                return;\n            }\n\n            localConfigurationFactory.getApplicationSettings().then(function () {\n                var shouldEditItem = localConfigurationFactory.getConfigurationItem('editNewFilesImmediately');\n                if (shouldEditItem && vm.itemIsEditable(false, vm.newItemPath)) {\n                    var splitPath = vm.newItemPath.split('/');\n                    $rootScope.$broadcast('file-editor:edit', splitPath[splitPath.length - 1], vm.newItemPath);\n                }\n                clearNewItemTempVars();\n            }, function (response) {\n                clearNewItemTempVars();\n                showResponseError(response, 'rename', $rootScope, $translate);\n            });\n        }\n\n        function makeItemFailureCallback(errorMessage, context) {\n            $rootScope.$broadcast('modal-prompt:clear-busy');\n            $translate(['NEW_ITEM_FAILURE_PRECEDING_MESSAGE', errorMessage], context).then(function (translations) {\n                displayPromptError(translations['NEW_ITEM_FAILURE_PRECEDING_MESSAGE'] + ' ' +\n                    translations[errorMessage])\n            });\n        }\n\n        function getFileNameError(fileName) {\n            if (!validateFileNameNonEmpty(fileName))\n                return 'FILE_NAME_EMPTY_MESSAGE';\n\n            if (!validateFileNameContainsNoSlash(fileName))\n                return 'FILE_NAME_CONTAINS_SLASH_MESSAGE';\n\n            return null;\n        }\n\n        function translateAndDisplayPromptError(promptErrorID, context) {\n            $translate(promptErrorID, context).then(displayPromptError, displayPromptError);\n\n        }\n\n        function makeItemOKCallback(itemName) {\n            $rootScope.$broadcast('modal-prompt:clear-error');\n\n            var itemNameError = getFileNameError(itemName);\n\n            if (itemNameError != null) {\n                translateAndDisplayPromptError(itemNameError, {item_type: $scope.makeItemType});\n                return;\n            }\n\n            vm.newItemPath = uiOperationFactory.joinNameToCurrentDirectory(itemName);\n\n            $rootScope.$broadcast('modal-prompt:set-busy', 'CREATING_ACTIVITY_STATUS');\n\n            var promise;\n            if ($scope.makeItemType == 'folder')\n                promise = connectionFactory.makeDirectory(vm.newItemPath);\n            else if ($scope.makeItemType == 'file')\n                promise = connectionFactory.putFileContents(vm.newItemPath, '');\n\n            promise.then(function () {\n                vm.makeItemSuccessCallback();\n            }, function (response) {\n                var action = $scope.makeItemType + ' make';\n                vm.makeItemFailureCallback(parseErrorResponse(response, action), {\n                    item_type: $scope.makeItemType,\n                    action: action\n                });\n            });\n        }\n\n        function initiateMakeItem(itemType) {\n            $scope.makeItemType = itemType;\n            var ucItemType = $scope.makeItemType.capitalizeFirstLetter();\n\n            $translate(['NEW_ITEM_PROMPT_TITLE', 'NEW_ITEM_NAME_PLACEHOLDER'], {item_type: ucItemType}).then(\n                function (translations) {\n                    $rootScope.$broadcast('modal-prompt:show', translations.NEW_ITEM_PROMPT_TITLE, '',\n                        translations.NEW_ITEM_NAME_PLACEHOLDER, vm.makeItemOKCallback);\n                });\n        }\n\n        function initiateChmodOfSelectedItems() {\n            if ($scope.selectedItems.length == 0)\n                return;\n\n            var itemPaths = [], numericPerms = -1;\n\n            $scope.selectedItems.map(function (itemIndex) {\n                var item = $scope.directoryList[itemIndex];\n                itemPaths.push(uiOperationFactory.joinNameToCurrentDirectory(item.name));\n                if (numericPerms == -1)\n                    numericPerms = item.numericPermissions;\n                else if (item.numericPermissions != numericPerms)\n                    numericPerms = 0;\n            });\n\n            $rootScope.$broadcast('modal-permissions:show', itemPaths, numericPerms);\n        }\n\n        function displayPromptError(error) {\n            $rootScope.$broadcast('modal-prompt:set-error', error);\n        }\n\n        function fileRenameCallback(finalValue, initialValue) {\n            $rootScope.$broadcast('modal-prompt:clear-error');\n\n            if (initialValue == finalValue)\n                return;\n\n            var itemNameError = getFileNameError(finalValue);\n\n            if (itemNameError != null) {\n                translateAndDisplayPromptError(itemNameError, {item_type: 'item'});\n                return;\n            }\n\n            $rootScope.$broadcast('modal-prompt:set-busy', 'RENAMING_ACTIVITY_STATUS');\n\n            var sourcePath = uiOperationFactory.joinNameToCurrentDirectory(initialValue);\n            var destinationPath = uiOperationFactory.joinNameToCurrentDirectory(finalValue);\n            connectionFactory.rename(sourcePath, destinationPath).then(\n                function (response) {\n                    $rootScope.$broadcast('modal-prompt:clear-busy');\n                    if (responseIsUnsuccessful(response)) {\n                        showResponseError(response, 'rename', $rootScope, $translate);\n                        return;\n                    }\n                    vm.refreshDirectoryList();\n                    $rootScope.$broadcast('items-moved', [[sourcePath, destinationPath]]);\n                    $rootScope.$broadcast('modal-prompt:hide');\n                },\n                function (response) {\n                    $rootScope.$broadcast('modal-prompt:clear-busy');\n                    showResponseError(response, 'rename', $rootScope, $translate);\n                }\n            );\n            vm.renameSource = null;\n        }\n\n        function showRenamePrompt(translations) {\n            $rootScope.$broadcast('modal-prompt:show', translations.RENAME_FILE_PROMPT_TITLE, vm.renameSource,\n                translations.RENAME_FILE_NAME_PLACEHOLDER, vm.fileRenameCallback);\n        }\n\n        function initiateRename() {\n            $translate(['RENAME_FILE_PROMPT_TITLE', 'RENAME_FILE_NAME_PLACEHOLDER']).then(showRenamePrompt,\n                showRenamePrompt);\n        }\n\n        function handleChangeDirectory(path, allowTimeout) {\n            if (path == uiOperationFactory.currentDirectory)\n                return;\n            if (typeof path == 'undefined' || path == null)\n                path = uiOperationFactory.currentDirectory;\n            vm.changeDirectory(path, false, allowTimeout);\n        }\n\n        function didLogout() {\n            uiOperationFactory.currentDirectory = null;\n            authenticationFactory.initialDirectory = null;\n            $scope.directoryList = [];\n            historyFactory.clearHistory();\n        }\n\n        function systemVarLoadSuccess(vars) {\n            systemVars = vars;\n            vm.setEditableExtensions(configurationFactory.getApplicationSetting('editableFileExtensions'));\n            postLogin();\n        }\n\n        function systemVarLoadFailure(response) {\n            showResponseError(response, \"system var load\", $rootScope, $translate);\n        }\n\n        function setEditableExtensions(editableExtensionStr) {\n            var splitExtensions = editableExtensionStr.split(\",\");\n            editableExtensions = [];\n            for (var i = 0; i < splitExtensions.length; ++i) {\n                var trimmedExtension = splitExtensions[i].trim().toLowerCase();\n\n                if (trimmedExtension != '')\n                    editableExtensions.push(trimmedExtension);\n            }\n        }\n\n        function itemIsEditable(isDirectory, itemPath) {\n            if (isDirectory)\n                return false;\n\n            var splitPath = itemPath.split('/');\n            var itemName = splitPath[splitPath.length - 1];\n            var extension = extractFileExtension(itemName);\n\n            if (extension == '')\n                return true;\n\n            return editableExtensions.indexOf(extension) != -1;\n        }\n\n        function navigateUpOneLevel() {\n            vm.changeDirectory(parentPath(uiOperationFactory.currentDirectory), false);\n        }\n\n        function showProperties(item) {\n            $rootScope.$broadcast('modal-properties:show', item);\n        }\n\n        function handleBodyClick($event) {\n            if ($event.which == 3 && $event.target.id == \"files\") {// right click\n                $scope.hasPasteSource = uiOperationFactory.cutSource != null || uiOperationFactory.copySource != null;\n\n                if (currentContextMenu)\n                    currentContextMenu.dropdown('toggle');\n\n                var $extraDropdownButton = jQuery('#extras-dropdown-button');\n\n                $extraDropdownButton.dropdown('toggle');\n                var $dropdownMenu = jQuery('#extras-dropdown');\n                $dropdownMenu.css(contextMenuStyleForEvent($event));\n\n                fixContextMenuOffScreen($event, $dropdownMenu);\n\n                return false;\n            }\n        }\n\n        function rowMouseDown($event) {\n            rowMouseTrackerFactory.mouseDown($event);\n        }\n\n        function rowMouseMove($event, $index) {\n            rowMouseTrackerFactory.mouseMove($event, $index);\n        }\n\n        function rowMouseUp($index) {\n            rowMouseTrackerFactory.mouseUp($index, preventRowDeselect);\n            preventRowDeselect = false;\n        }\n\n        function rowMouseLeave($event) {\n            rowMouseTrackerFactory.mouseLeave($event);\n        }\n    }\n}());","(function(){\n    angular.module('MonstaFTP').factory('rowMouseTrackerFactory', rowMouseTrackerFactory);\n\n    rowMouseTrackerFactory.$inject = ['selectedItemsFactory'];\n\n    function rowMouseTrackerFactory(selectedItemsFactory) {\n        var factory = {}, mouseIsDown = false, mouseMovedWhileDown = false, mouseDownEvent,\n            rowClickTargetElementNames = ['DIV', 'TR', 'TD'], rowDragStartIndex = null, isMetaDrag = false;\n\n        factory.mouseDown = mouseDown;\n        factory.mouseUp = mouseUp;\n        factory.mouseMove = mouseMove;\n        factory.mouseLeave = mouseLeave;\n\n        factory.mouseClick = mouseClick;\n        factory.mouseDrag = mouseDrag;\n        factory.startDrag = startDrag;\n\n        function mouseDown($event) {\n            mouseIsDown = true;\n            mouseDownEvent = $event;\n            mouseMovedWhileDown = false;\n        }\n\n        function mouseUp(rowIndex, preventRowDeselect) {\n            if (mouseIsDown && !mouseMovedWhileDown && !preventRowDeselect) {\n                factory.mouseClick(mouseDownEvent, rowIndex);\n            }\n            mouseIsDown = false;\n            rowDragStartIndex = null;\n        }\n\n        function mouseMove($event, rowIndex) {\n            if(mouseIsDown) {\n                mouseMovedWhileDown = true;\n                if(rowDragStartIndex == rowIndex)\n                    return;\n\n                if (rowDragStartIndex == null)\n                    factory.startDrag($event, rowIndex);\n                else\n                    factory.mouseDrag(rowIndex);\n\n                rowDragStartIndex = rowIndex;\n            }\n        }\n\n        function mouseLeave($event) {\n            if (rowClickTargetElementNames.indexOf($event.target.tagName) != -1)\n                return true;\n\n            rowDragStartIndex = null;\n        }\n\n        function mouseDrag(rowIndex) {\n            if (isMetaDrag)\n                selectedItemsFactory.metaDraggedToIndex(rowIndex);\n            else\n                selectedItemsFactory.draggedToIndex(rowIndex);\n        }\n\n        function mouseClick($event, itemIndex) {\n            if (rowClickTargetElementNames.indexOf($event.target.tagName) == -1)\n                return true;\n            $event.preventDefault();\n            if ($event.ctrlKey || $event.metaKey)\n                selectedItemsFactory.metaClickAtIndex(itemIndex);\n            else if ($event.shiftKey)\n                selectedItemsFactory.shiftClickAtIndex(itemIndex);\n            else\n                selectedItemsFactory.standardClickAtIndex(itemIndex);\n        }\n\n        function startDrag($event, rowIndex) {\n            if ($event.metaKey || $event.ctrlKey) {\n                isMetaDrag = true;\n                selectedItemsFactory.startMetaDraggingAtIndex(rowIndex);\n            } else {\n                isMetaDrag = false;\n                selectedItemsFactory.startDraggingAtIndex(rowIndex);\n            }\n        }\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('selectedItemsFactory', selectedItemsFactory);\n\n    selectedItemsFactory.$inject = ['$rootScope'];\n\n    function selectedItemsFactory($rootScope) {\n        var selectedItems = [];\n        var initialSelectedIndex = 0;\n        var dragStartIndex = 0;\n        var metaDragStartIndex = 0;\n        var metaSelectedItems;\n\n        var factory = {\n            getSelectedItems: getSelectedItems,\n            standardClickAtIndex: standardClickAtIndex,\n            shiftClickAtIndex: shiftClickAtIndex,\n            metaClickAtIndex: metaClickAtIndex,\n            clearSelection: clearSelection,\n            startDraggingAtIndex: startDraggingAtIndex,\n            draggedToIndex: draggedToIndex,\n            startMetaDraggingAtIndex: startMetaDraggingAtIndex,\n            metaDraggedToIndex: metaDraggedToIndex,\n            selectItem: selectItem\n        };\n\n        function generateRange(start, stop) {\n            if (start == stop)\n                return [start];\n\n            var delta = 1;\n\n            if (start > stop)\n                delta = -1;\n\n            var range = [start];\n\n            do {\n                start += delta;\n                range.push(start);\n            } while(start != stop);\n\n            return range;\n        }\n\n        function getSelectedItems() {\n            return selectedItems;\n        }\n\n        function standardClickAtIndex(index) {\n            if(selectedItems.length == 1 && selectedItems[0] == index) {\n                selectedItems = [];\n                broadcastSelectionChange();\n                return;\n            }\n\n            if(selectedItems.indexOf(index) == -1 || selectedItems.length > 1) {\n                // this is just for speed, we could do the below all the time but will be a little fast to skip it\n                // unless it's actually necessary\n                selectedItems = [index];\n                initialSelectedIndex = index;\n                broadcastSelectionChange();\n            }\n        }\n\n        function shiftClickAtIndex(index) {\n            if(selectedItems.length != 1 || selectedItems.indexOf(index) == -1) {\n                selectedItems = generateRange(initialSelectedIndex, index);\n                broadcastSelectionChange();\n            }\n        }\n\n        function metaClickAtIndex(index) {\n            var indexOfIndex = selectedItems.indexOf(index);\n\n            if(indexOfIndex == -1)\n                selectedItems.push(index);\n            else\n                selectedItems.splice(indexOfIndex, 1);\n            broadcastSelectionChange();\n        }\n\n        function clearSelection() {\n            selectedItems = [];\n            broadcastSelectionChange();\n        }\n\n        function startDraggingAtIndex(index) {\n            clearSelection();\n            dragStartIndex = index;\n            selectedItems = [index];\n            broadcastSelectionChange();\n        }\n\n        function draggedToIndex(index) {\n            selectedItems = generateRange(dragStartIndex, index);\n            broadcastSelectionChange();\n        }\n\n        function startMetaDraggingAtIndex(index){\n            metaDragStartIndex = index;\n            metaSelectedItems = angular.copy(selectedItems);\n        }\n\n        function metaDraggedToIndex(index) {\n            var newSelectedItems = angular.copy(metaSelectedItems),\n                lowerBound = Math.min(index, metaDragStartIndex),\n                upperBound = Math.max(index, metaDragStartIndex);\n\n            for(; lowerBound <= upperBound; ++lowerBound){\n                var indexOfIndex = metaSelectedItems.indexOf(lowerBound);\n\n                if(indexOfIndex == -1)\n                    newSelectedItems.push(lowerBound);\n                else\n                    newSelectedItems.splice(newSelectedItems.indexOf(lowerBound), 1);\n            }\n\n            selectedItems = newSelectedItems;\n            broadcastSelectionChange();\n        }\n\n        function selectItem(index) {\n            selectedItems = [index];\n            broadcastSelectionChange();\n        }\n\n        function broadcastSelectionChange() {\n            $rootScope.$broadcast('selected-items-changed');\n        }\n\n        return factory;\n    }\n}());\n\n\n","(function () {\n    angular.module('MonstaFTP').controller('FileEditorController', FileEditorController);\n\n    FileEditorController.$inject = ['$scope', '$rootScope', 'connectionFactory', 'jQuery', 'licenseFactory',\n        'codeMirrorFactory', '$translate', 'uiOperationFactory', 'configurationFactory'];\n\n    function FileEditorController($scope, $rootScope, connectionFactory, jQuery, licenseFactory, codeMirrorFactory,\n                                  $translate, uiOperationFactory, configurationFactory) {\n        'use strict';\n        $scope.editorFiles = [];\n        $scope.activeFile = null;\n        $scope.pathOfTabToRemove = null;\n        $scope.licenseFactory = licenseFactory;\n        $scope.settings = {autoSave: false};\n\n        var modalFileEditorId = '#modal-editor', vm = this, autoSaveTimeout = null, $filePickerMenu = null;\n\n        vm.savedDirectories = [];\n        vm.hideProUpgradeMessages = false;\n\n        vm.show = show;\n        vm.hide = hide;\n        vm.setupAdvancedEditor = setupAdvancedEditor;\n        vm.startEditingFile = startEditingFile;\n        vm.ensureFileInScope = ensureFileInScope;\n        vm.getFileIndexByPath = getFileIndexByPath;\n        vm.filePathIsInScope = filePathIsInScope;\n        vm.getEditorFileByPath = getEditorFileByPath;\n        vm.updateFileContents = updateFileContents;\n        vm.loadFileContents = loadFileContents;\n        vm.removeFile = removeFile;\n        vm.initiateConfirmTabClose = initiateConfirmTabClose;\n        vm.confirmTabClose = confirmTabClose;\n        vm.cancelTabClose = cancelTabClose;\n        vm.contentPutFinish = contentPutFinish;\n        vm.beginAutosave = beginAutosave;\n        vm.fileListClick = fileListClick;\n        vm.shouldShowProUpgrade = shouldShowProUpgrade;\n        vm.itemsMoved = itemsMoved;\n\n        $scope.activateTab = function (filePath, $event) {\n            if ($event.target.tagName == 'BUTTON')\n                return;\n\n            $scope.activeFile = vm.getEditorFileByPath(filePath);\n\n            if ($filePickerMenu != null)\n                $filePickerMenu.removeClass('open')\n        };\n\n        $scope.closeTabForFile = function (fileName, filePath) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (!file.dirty) {\n                vm.removeFile(filePath);\n                return false;\n            }\n\n            vm.initiateConfirmTabClose(fileName, filePath);\n            return false;\n        };\n\n        $scope.textChange = function (filePath) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n\n            file.dirty = true;\n\n            vm.beginAutosave.call(vm);\n        };\n\n        $scope.saveActiveFile = function () {\n            if ($scope.activeFile == null)\n                return;\n            $scope.activeFile.saving = true;\n            var path = $scope.activeFile.path, contents = $scope.activeFile.contents;\n            connectionFactory.putFileContents(path, contents).then(function () {\n                vm.contentPutFinish(path, true);\n            }, function (response) {\n                vm.contentPutFinish(path, false);\n                showResponseError(response, 'file save', $rootScope, $translate);\n            });\n        };\n\n        $scope.$on('file-editor:edit', function (ev, fileName, filePath) {\n            vm.startEditingFile(fileName, filePath);\n            vm.show();\n        });\n\n        $scope.$on('file-editor:show', function () {\n            vm.show();\n        });\n\n        $scope.$on('logout', function () {\n            $scope.editorFiles = [];\n            $scope.activeFile = null;\n        });\n\n        $scope.$on('items-deleted', function (ev, deletedItems) {\n            vm.itemsMoved(deletedItems);\n        });\n\n        $scope.$on('items-moved', function (ev, movedItems) {\n            var moveSources = [];\n\n            for(var i = 0; i < movedItems.length; ++i)\n                moveSources.push(movedItems[i][0])\n\n            vm.itemsMoved(moveSources);\n        });\n\n        function show() {\n            vm.hideProUpgradeMessages = configurationFactory.getApplicationSetting('hideProUpgradeMessages');\n            vm.savedDirectories = [];\n            jQuery(modalFileEditorId).modal('show');\n        }\n\n        function hide() {\n            if (vm.savedDirectories.indexOf(uiOperationFactory.currentDirectory) != -1)\n                $rootScope.$broadcast('change-directory'); // refresh directory list if there was a save in current dir\n\n            $rootScope.$broadcast('file-editor:hide', $scope.editorFiles.length);\n            jQuery(modalFileEditorId).modal('hide');\n        }\n\n        function setupAdvancedEditor(fileName, filePath) {\n            var codeMode = codeMirrorFactory.convertFilenameToMode(fileName);\n            window.setTimeout(function () {\n                if (codeMode != null) {\n                    var editorItem = vm.getEditorFileByPath(filePath);\n\n                    if (editorItem.cmSetup == true)\n                        return;\n\n                    var textAreaId = \"editor_ta_\" + filePath;\n                    codeMirrorFactory.initiateCodeMirror(codeMode, document.getElementById(textAreaId), function (cm) {\n                        editorItem.cmSetup = true;\n                        editorItem.cm = cm;\n                        cm.on('change', function (cMirror) {\n                            editorItem.contents = cMirror.getValue();\n                            $scope.textChange(editorItem.path);\n                        });\n                    });\n                }\n            }, 0);\n        }\n\n        function startEditingFile(fileName, filePath) {\n            vm.ensureFileInScope(fileName, filePath, function () {\n                $scope.activeFile = vm.getEditorFileByPath(filePath);\n                if (licenseFactory.isLicensed())\n                    vm.setupAdvancedEditor(fileName, filePath);\n            });\n        }\n\n        function ensureFileInScope(fileName, filePath, contentsLoadedCallback) {\n            if (vm.filePathIsInScope(filePath)) {\n                if (contentsLoadedCallback)\n                    contentsLoadedCallback();\n                return true;\n            }\n\n            var editorFile = {\n                name: fileName,\n                path: filePath,\n                contents: null,\n                dirty: false,\n                saving: false,\n                cmSetup: false,\n                cm: null\n            };\n\n            if (licenseFactory.isLicensed()) {\n                $scope.editorFiles.push(editorFile);\n                $scope.editorFiles.sort(function (a, b) {\n                    return a.path.toLowerCase() < b.path.toLowerCase() ? -1 : 1;\n                });\n            } else\n                $scope.editorFiles = [editorFile];\n\n            vm.loadFileContents(filePath, contentsLoadedCallback);\n            return false;\n        }\n\n        function getFileIndexByPath(filePath) {\n            for (var fileIndex = 0; fileIndex < $scope.editorFiles.length; ++fileIndex)\n                if ($scope.editorFiles[fileIndex].path == filePath)\n                    return fileIndex;\n\n            return null;\n        }\n\n        function filePathIsInScope(filePath) {\n            return vm.getFileIndexByPath(filePath) != null;\n        }\n\n        function getEditorFileByPath(filePath) {\n            var fileIndex = vm.getFileIndexByPath(filePath);\n            return fileIndex == null ? null : $scope.editorFiles[fileIndex];\n        }\n\n        function updateFileContents(filePath, fileContents) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n            file.contents = fileContents;\n        }\n\n        function loadFileContents(filePath, contentsLoadedCallback) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n\n            connectionFactory.getFileContents(filePath).then(\n                function (response) {\n                    vm.updateFileContents(filePath, response.data.data);\n                    if (contentsLoadedCallback)\n                        contentsLoadedCallback();\n                }, function (response) {\n                    showResponseError(response, 'file load', $rootScope, $translate);\n                });\n        }\n\n        function removeFile(filePath) {\n            var fileIndex = vm.getFileIndexByPath(filePath);\n            if (fileIndex == null)\n                return;\n\n            var closingFiles = $scope.editorFiles.splice(fileIndex, 1);\n\n            if (closingFiles.length && closingFiles[0].cm) {\n                closingFiles[0].cm.toTextArea();\n                closingFiles[0].cm = null;\n            }\n\n            if ($scope.editorFiles.length == 0) {\n                $scope.activeFile = null;\n                vm.hide();\n                return;\n            }\n\n            var newFileIndex = Math.min(fileIndex, $scope.editorFiles.length - 1);\n            $scope.activeFile = $scope.editorFiles[newFileIndex];\n        }\n\n\n        function showTabCloseConfirm(confirmMessage) {\n            $rootScope.$broadcast('modal-confirm:show', confirmMessage, vm.confirmTabClose, vm.cancelTabClose);\n        }\n\n        function initiateConfirmTabClose(fileName, filePath) {\n            $scope.pathOfTabToRemove = filePath;\n            $translate('EDITOR_CLOSE_CONFIRM_MESSAGE', {file_name: fileName}).then(showTabCloseConfirm,\n                showTabCloseConfirm);\n        }\n\n        function confirmTabClose() {\n            vm.removeFile($scope.pathOfTabToRemove);\n            $scope.pathOfTabToRemove = null;\n        }\n\n        function cancelTabClose() {\n            $scope.pathOfTabToRemove = null;\n        }\n\n        function contentPutFinish(filePath, success) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n\n            file.saving = false;\n            if (success) {\n                file.dirty = false;\n                var dirName = filePath.replace(/\\\\/g, '/').replace(/\\/[^\\/]*\\/?$/, '');\n                if (dirName == '')\n                    dirName = '/';\n                if (vm.savedDirectories.indexOf(dirName) == -1)\n                    vm.savedDirectories.push(dirName);\n            }\n        }\n\n        function beginAutosave() {\n            if (!$scope.settings.autoSave)\n                return;\n\n            if (autoSaveTimeout)\n                window.clearTimeout(autoSaveTimeout);\n\n            autoSaveTimeout = window.setTimeout(function () {\n                autoSaveTimeout = null;\n                $scope.saveActiveFile();\n            }, AUTOSAVE_DELAY_MS);\n        }\n\n        function fileListClick($event) {\n            if ($filePickerMenu == null) {\n                $filePickerMenu = jQuery($event.target).parent();\n\n                if ($event.target.tagName == \"I\")\n                    $filePickerMenu = $filePickerMenu.parent();\n            }\n\n            $filePickerMenu.toggleClass('open');\n        }\n\n        function shouldShowProUpgrade() {\n            if (vm.hideProUpgradeMessages === true)\n                return false;\n\n            return !licenseFactory.isLicensed();\n        }\n\n        function itemsMoved(deletedItems) {\n            // this really means the item is no longer where we expected it (moved, renamed or deleted)\n            var pathsToRemove = [];\n            for (var deletedPathIndex = 0; deletedPathIndex < deletedItems.length; ++deletedPathIndex) {\n                var deletedPath = deletedItems[deletedPathIndex];\n\n                if (deletedPath.length == 0)\n                    continue;\n\n                var deletedPathAsDirectory = deletedPath.substr(deletedPath.length - 1) == \"/\" ? deletedPath : (deletedPath + \"/\");\n\n                for (var editorFileIndex = 0; editorFileIndex < $scope.editorFiles.length; ++editorFileIndex) {\n                    var editorFile = $scope.editorFiles[editorFileIndex];\n                    if (deletedPath == editorFile.path)\n                        pathsToRemove.push(editorFile.path);\n                    else {\n                        if(editorFile.path.length <= deletedPathAsDirectory.length )\n                            continue;\n\n                        if(editorFile.path.substr(0, deletedPathAsDirectory.length) == deletedPathAsDirectory)\n                            pathsToRemove.push(editorFile.path);\n                    }\n\n                }\n            }\n\n            for(var removeIndex = 0; removeIndex < pathsToRemove.length; ++removeIndex) {\n                vm.removeFile(pathsToRemove[removeIndex], true);\n            }\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('FooterController', FooterController);\n\n    FooterController.$inject = ['$scope', '$rootScope', 'uiOperationFactory', 'connectionFactory',\n        'authenticationFactory', 'uploadUIFactory', '$translate', 'selectedItemsFactory', 'configurationFactory'];\n\n    function FooterController($scope, $rootScope, uiOperationFactory, connectionFactory,\n                              authenticationFactory, uploadUIFactory, $translate, selectedItemsFactory,\n                              configurationFactory) {\n        var vm = this, actionsRequiringSelection = ['chmod', 'cut', 'copy', 'download'];\n\n        vm.isArchiveUpload = false;\n\n        $scope.selectedItemsCount = 0;\n        $scope.hasPasteSource = false;\n        $scope.maxUploadBytes = MAX_UPLOAD_BYTES;\n        $scope.currentUsername = null;\n        $scope.currentHost = null;\n        $scope.currentVersion = 0;\n        $scope.newVersionAvailable = false;\n        $scope.editorActive = false;\n\n        vm.handleUpload = handleUpload;\n        vm.handleUploadFolder = handleUploadFolder;\n        vm.allowAction = allowAction;\n        vm.performRemoteFetch = performRemoteFetch;\n        vm.remoteFetchCallback = remoteFetchCallback;\n        vm.initiateRemoteFetch = initiateRemoteFetch;\n        vm.onEditorHide = onEditorHide;\n        vm.showEditor = showEditor;\n        vm.validateArchiveUpload = validateArchiveUpload;\n\n        $scope.buttonClick = function ($event) {\n            var buttonName = ($event.currentTarget.getAttribute('data-name'));\n            if (buttonName == 'upload-file') {\n                vm.isArchiveUpload = false;\n                vm.handleUpload();\n                return;\n            } else if (buttonName == 'upload-folder') {\n                vm.handleUploadFolder();\n                return;\n            } else if (buttonName == 'upload-archive') {\n                vm.isArchiveUpload = true;\n                vm.handleUpload();\n                return;\n            } else if (buttonName == 'fetch-file') {\n                vm.initiateRemoteFetch();\n                return;\n            } else if (buttonName == 'show-editor') {\n                if (!vm.allowAction(buttonName))\n                    return;\n\n                vm.showEditor();\n                return;\n            }\n\n            if (!vm.allowAction(buttonName))\n                return;\n\n            $rootScope.$broadcast('footer-button-click', buttonName);\n        };\n\n        var uploadSingleInput = document.getElementById('upload-placeholder'),\n            uploadFolderInput = document.getElementById('upload-folder-placeholder');\n\n        if (uploadSingleInput) {\n            uploadSingleInput.addEventListener('change', fileChangeHandler);\n            uploadFolderInput.addEventListener('change', fileChangeHandler);\n        }\n\n        $scope.$on('selected-items-changed', function () {\n            $scope.selectedItemsCount = selectedItemsFactory.getSelectedItems().length;\n        });\n\n        $scope.$on('paste-source:set', function () {\n            $scope.hasPasteSource = true;\n        });\n\n        $scope.$on('paste-source:cleared', function () {\n            $scope.hasPasteSource = false;\n        });\n\n        $scope.$on('login', function () {\n            var currentConfig = authenticationFactory.getActiveConfiguration();\n            $scope.currentUsername = currentConfig.username || null;\n            $scope.currentHost = currentConfig.host || null;\n        });\n\n        $scope.$on('logout', function () {\n            $scope.currentUsername = null;\n            $scope.currentHost = null;\n        });\n\n        $scope.$on('file-editor:hide', function (ev, activeFileCount) {\n            vm.onEditorHide(activeFileCount);\n        });\n\n        configurationFactory.getSystemConfiguration().then(function (config) {\n            MAX_UPLOAD_BYTES = config.maxFileUpload;\n            $scope.maxUploadBytes = MAX_UPLOAD_BYTES;\n            $scope.currentVersion = config.version;\n\n            if ($scope.currentVersion && window.MONSTA_LATEST_VERSION)\n                $scope.newVersionAvailable = versionIsLessThan($scope.currentVersion, window.MONSTA_LATEST_VERSION);\n        }, function (response) {\n\n        });\n\n        function handleUpload() {\n            uploadSingleInput.value = null;\n            uploadSingleInput.click();\n        }\n\n        function fileChangeHandler() {\n            if (!this.files || !this.files.length)\n                return;\n\n            var items = this.items;\n\n            if(vm.isArchiveUpload && !validateArchiveUpload(this.files))\n                return;\n\n            if (items != undefined)\n                uploadUIFactory.handleItemsBasedUpload(items, vm.isArchiveUpload);\n            else\n                uploadUIFactory.handleFilesBasedUpload(this.files, vm.isArchiveUpload);\n        }\n\n        function showModalError(errorMessage) {\n            $rootScope.$broadcast(\"modal-error:show\", errorMessage);\n        }\n\n        function handleUploadFolder() {\n            var userAgent = window.navigator.userAgent;\n\n            if (!/chrome/i.test(userAgent)) {\n                $translate('FOLDER_UPLOAD_CHROME_ONLY_MESSAGE').then(showModalError, showModalError);\n                return;\n            }\n\n            uploadFolderInput.value = null;\n            uploadFolderInput.click();\n        }\n\n        function allowAction(actionName) {\n            if (actionName == 'show-editor')\n                return $scope.editorActive;\n\n            if (actionName == 'paste')\n                return $scope.hasPasteSource;\n\n            if (actionsRequiringSelection.indexOf(actionName) == -1)\n                return true;\n\n            return $scope.selectedItemsCount != 0;\n        }\n\n        function performRemoteFetch(url) {\n            $translate('FETCHING_ACTIVITY_STATUS').then(function (translatedBusyMessage) {\n                $rootScope.$broadcast(\"modal-prompt:set-busy\", translatedBusyMessage);\n            });\n\n            connectionFactory.fetchRemoteFile(url, uiOperationFactory.currentDirectory).then(\n                function (response) {\n                    if (responseIsUnsuccessful(response)) {\n                        showResponseError(response, 'remote file fetch of ' + url, $rootScope, $translate);\n                        return;\n                    }\n                    $rootScope.$broadcast('change-directory');\n                    $rootScope.$broadcast('modal-prompt:hide');\n                }, function (response) {\n                    showResponseError(response, 'remote file fetch of ' + url, $rootScope, $translate);\n                    $rootScope.$broadcast(\"modal-prompt:clear-busy\");\n                }\n            );\n        }\n\n        function setModalPromptError(error) {\n            $rootScope.$broadcast('modal-prompt:set-error', error);\n        }\n\n        function remoteFetchCallback(final) {\n            $rootScope.$broadcast('modal-prompt:clear-error');\n\n            if (!basicURLValidate(final)) {\n                $translate('URL_INVALID_MESSAGE').then(setModalPromptError, setModalPromptError);\n                return;\n            }\n\n            var url = final.replace(/^\\s\\s*/, '');\n\n            vm.performRemoteFetch.call(vm, url);\n        }\n\n        function initiateRemoteFetch() {\n            $translate(['FETCH_FILE_PROMPT_TITLE', 'FETCH_FILE_URL_PLACEHOLDER']).then(function (translations) {\n                $rootScope.$broadcast('modal-prompt:show', translations.FETCH_FILE_PROMPT_TITLE, null,\n                    translations.FETCH_FILE_URL_PLACEHOLDER, vm.remoteFetchCallback);\n            });\n        }\n\n        function onEditorHide(activeFileCount) {\n            $scope.editorActive = activeFileCount != 0;\n        }\n\n        function showEditor() {\n            $rootScope.$broadcast('file-editor:show');\n        }\n\n        function validateArchiveUpload(files) {\n            var errorMessage = null;\n            if(files.length != 1)\n                errorMessage = \"MULTIPLE_FILE_ARCHIVE_ERROR\";\n            else if (extractFileExtension(files[0].name) != 'zip')\n                errorMessage = \"INVALID_TYPE_ARCHIVE_ERROR\";\n\n            if (errorMessage == null)\n                return true;\n\n            $rootScope.$broadcast('modal-error:show', errorMessage);\n            return false;\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('HeaderController', HeaderController);\n\n    HeaderController.$inject = ['$scope', '$rootScope', 'historyFactory'];\n\n        function HeaderController($scope, $rootScope, historyFactory) {\n        $scope.canGoBack = false;\n        $scope.canGoForward = false;\n\n        var updateScopeFromHistoryFactory = function () {\n            $scope.canGoBack = historyFactory.hasPreviousHistoryItem();\n            $scope.canGoForward = historyFactory.hasNextHistoryItem();\n        };\n\n        $scope.$on('history-changed', function () {\n            updateScopeFromHistoryFactory();\n        });\n\n        $scope.$on('directory-changed', function () {\n            updateScopeFromHistoryFactory();\n        });\n\n        $scope.navigateBack = function () {\n            if (!$scope.canGoBack)\n                return;\n\n            var newDir = historyFactory.navigateBack();\n\n            if (newDir)\n                $rootScope.$broadcast('change-directory:on-history', newDir);\n        };\n\n        $scope.navigateForward = function () {\n            if (!$scope.canGoForward)\n                return;\n\n            var newDir = historyFactory.navigateForward();\n\n            if (newDir)\n                $rootScope.$broadcast('change-directory:on-history', newDir);\n        };\n\n        $scope.refresh = function () {\n            $rootScope.$broadcast('change-directory');\n        }\n    }\n}());\n","(function () {\n    angular.module('MonstaFTP').controller('HistoryController', HistoryController);\n\n    HistoryController.$inject = ['$scope', 'historyFactory', '$rootScope', 'uiOperationFactory'];\n\n    function HistoryController($scope, historyFactory, $rootScope, uiOperationFactory) {\n        $scope.history = [];\n\n        var vm = this;\n        vm.recentHistory = [];\n        vm.sortedHistory = [];\n\n        $scope.$on('directory-changed', function () {\n            updateHistory();\n        });\n\n        $scope.$on('history-changed', function () {\n            updateHistory();\n        });\n\n        $scope.historyClick = function (path) {\n            $rootScope.$broadcast('change-directory', path);\n        };\n\n        $scope.$on('items-deleted', function (ev, itemPaths) {\n            itemPaths.map(function (path) {\n                historyFactory.removeEntry(path);\n            });\n        });\n\n        function updateHistory() {\n            var fullHistory = historyFactory.getUniqueHistory(100, uiOperationFactory.currentDirectory);\n            vm.recentHistory = fullHistory.slice(0, HISTORY_RECENT);\n            vm.sortedHistory = fullHistory.sort();\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('historyFactory', historyFactory);\n\n    historyFactory.$inject = ['$rootScope'];\n\n    function historyFactory($rootScope) {\n        var HISTORY_CHANGED_EVENT_NAME = 'history-changed';\n        var ensureTrailingSlash = function (path) {\n            return path + (path.substr(path.length - 1) != '/' ? '/' : '');\n        };\n\n        var factory = {\n            _fullHistory: [],\n            _historyIndex: -1,\n            getFullHistory: function () {\n                return this._fullHistory;\n            },\n            getFullHistoryCount: function () {\n                return this._fullHistory.length;\n            },\n            addEntry: function (path) {\n                path = ensureTrailingSlash(path);\n\n                if (this._historyIndex != this._fullHistory.length - 1)\n                    this._fullHistory.splice(this._historyIndex + 1);\n\n                this._fullHistory.push(path);\n                ++this._historyIndex;\n                $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n            }, removeEntry: function (path) {\n                path = ensureTrailingSlash(path);\n                var changed = false;\n\n                for(var i = this._fullHistory.length - 1; i >= 0; --i) {\n                    var historyItem = this._fullHistory[i];\n                    if (historyItem.length < path.length)\n                        continue;\n\n                    if (historyItem.substr(0, path.length) == path) {// this will take care of sub folders\n                        this._fullHistory.splice(i, 1);\n                        changed = true;\n                    }\n                }\n\n                if(changed)\n                    $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n            },\n            getFullHistoryItem: function (index) {\n                return this._fullHistory[index];\n            },\n            getHistoryIndex: function () {\n                return this._historyIndex;\n            },\n            setHistoryIndex: function (index) {\n                this._historyIndex = index;\n                $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n                return this._fullHistory[index];\n            },\n            hasPreviousHistoryItem: function () {\n                return this._historyIndex > 0;\n            },\n            hasNextHistoryItem: function () {\n                return (this._historyIndex > -1) && this._historyIndex < (this._fullHistory.length - 1);\n            },\n            navigateBack: function () {\n                if (!this.hasPreviousHistoryItem())\n                    return;\n\n                return this.setHistoryIndex(this.getHistoryIndex() - 1);\n            },\n            navigateForward: function () {\n                if (!this.hasNextHistoryItem())\n                    return;\n\n                return this.setHistoryIndex(this.getHistoryIndex() + 1);\n            },\n            getUniqueHistory: function (historySize, currentDirectory) {\n                if (currentDirectory != undefined)\n                    currentDirectory = ensureTrailingSlash(currentDirectory);\n\n                if (this.getFullHistoryCount() == 0)\n                    return [];\n\n                var uniqueHistory = [];\n                for (var fullHistoryIndex = this.getFullHistoryCount() - 1; fullHistoryIndex >= 0; --fullHistoryIndex) {\n                    var historyPath = this.getFullHistoryItem(fullHistoryIndex);\n                    if (historyPath == currentDirectory)\n                        continue;\n\n                    if (uniqueHistory.indexOf(historyPath) == -1)\n                        uniqueHistory.push(historyPath);\n\n                    if (uniqueHistory.length == historySize)\n                        break;\n                }\n\n                return uniqueHistory;\n            },\n            clearHistory: function () {\n                this._fullHistory = [];\n                this._historyIndex = -1;\n                $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n            }\n        };\n\n        return factory;\n    }\n}());","(function(){\n    angular.module('MonstaFTP').factory('jQuery', monstaJQuery);\n\n    monstaJQuery.$inject = ['$window'];\n\n    function monstaJQuery($window) {\n        return $window.jQuery;\n    }\n})();","(function () {\n    angular.module('MonstaFTP').factory('licenseFactory', licenseFactory);\n\n    licenseFactory.$inject = ['connectionFactory', '$rootScope'];\n\n    function licenseFactory(connectionFactory, $rootScope) {\n        return {\n            isNullLicense: true,\n            email: null,\n            version: null,\n            expiryDate: null,\n            purchaseDate: null,\n            getLicense: function () {\n                var _this = this;\n                connectionFactory.getLicense().then(function (response) {\n                    if (responseIsUnsuccessful(response)) {\n                        _this.handleGetFailure.call(_this, response);\n                        return;\n                    }\n\n                    _this.handleGetSuccess.call(_this, response);\n                }, function (response) {\n                    _this.handleGetFailure.call(_this, response);\n                });\n            },\n            handleGetSuccess: function (response) {\n                var licenseData = response.data.data;\n                if (licenseData == null)\n                    this.isNullLicense = true;\n                else {\n                    this.email = licenseData.email;\n                    this.version = licenseData.version;\n                    this.expiryDate = licenseData.expiryDate * 1000;\n                    this.purchaseDate = licenseData.purchaseDate * 1000;\n                    this.isTrial = licenseData.isTrial;\n                    this.isNullLicense = false;\n                }\n                $rootScope.$broadcast('license-loaded');\n            }, handleGetFailure: function (response) {\n                var action = 'license reading';\n                $rootScope.$broadcast('modal-error:show', parseErrorResponse(response, action), null, {action: action});\n            }, isLicensed: function () {\n                if (this.isNullLicense)\n                    return false;\n\n                return !this.isLicenseExpired();\n            }, isLicenseExpired: function () {\n                if (this.isNullLicense)\n                    return false;\n\n                if (this.expiryDate == null)\n                    return false;\n\n                return Date.now() > this.expiryDate;\n            }, isTrialLicense: function () {\n                if (this.isNullLicense)\n                    return false;\n\n                return this.isTrial === true;\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalLoginLinkController', ModalLoginLinkController);\n\n    ModalLoginLinkController.$inject = [\"$rootScope\", \"$scope\", \"jQuery\", \"requestLoginFactory\", \"$element\", \"$window\",\n        \"$translate\"];\n\n    function ModalLoginLinkController($rootScope, $scope, jQuery, requestLoginFactory, $element, $window, $translate) {\n        var vm = this, modalId = '#modal-login-link';\n\n        vm.show = show;\n        vm.hide = hide;\n        vm.copy = copy;\n\n        $scope.$on('modal-login-link:show', function(ev, type, configuration){\n            vm.type = type;\n            vm.configuration = configuration;\n            vm.show();\n        });\n\n        function show() {\n            vm.configURL = requestLoginFactory.getConfigURL(vm.type, vm.configuration);\n            vm.supportsCopy = browserSupportsCopy();\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n            $rootScope.$broadcast('modal-login:show');\n        }\n\n        function alertOnCopyFailure(textArea, message) {\n            alert(message);\n            textArea.select();\n        }\n\n        function copy() {\n            var textArea = $element.find('textarea')[0];\n            textArea.select();\n            var copySuccess = false;\n            try {\n                copySuccess = document.execCommand('copy');\n            } catch (err) {\n                copySuccess = false;\n            }\n\n            if(!copySuccess) {\n                $translate(\"COPY_FAILURE_MESSAGE\").then(function(copyFailureMessage){\n                    alertOnCopyFailure(textArea, copyFailureMessage);\n                }, function () {\n                    alertOnCopyFailure(textArea, \"Unfortunately your browser does not support automatic copying, \" +\n                        \"please copy the address from the text box.\");\n                });\n            }\n        }\n\n        function browserSupportsCopy() {\n            var userAgent = $window.navigator.userAgent;\n            if(/chrome/i.test(userAgent))\n                return true;\n\n            if(/safari/i.test(userAgent))\n                return false;\n\n            if(document.queryCommandEnabled == undefined)\n                return false;\n\n            return document.queryCommandEnabled('copy');\n        }\n\n        jQuery(modalId).on('shown.bs.modal', function(){\n            jQuery(this).find(\"textarea\").select();\n        });\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').controller('LoginPanelController', LoginPanelController);\n\n    LoginPanelController.$inject = ['$scope', 'connectionFactory', 'authenticationFactory', '$rootScope', 'jQuery',\n        'licenseFactory', '$translate', 'configurationFactory', 'requestLoginFactory'];\n\n    function LoginPanelController($scope, connectionFactory, authenticationFactory, $rootScope, jQuery,\n                                  licenseFactory, $translate, configurationFactory, requestLoginFactory) {\n        var modalLoginId = \"#modal-login\", vm = this, readURL = true, modalSetup = false;\n\n        $scope.connectionErrorMessage = null;\n        $scope.storedAuthenticationErrorMessage = null;\n        $scope.defaults = g_ConnectionDefaults;\n        $scope.metaConfiguration = {\n            rememberLogin: false,\n            masterPassword: null,\n            savedProfileIndex: null,\n            enteredProfileName: null\n        };\n\n        $scope.hasServerSavedAuthentication = false;\n        $scope.savedAuthentication = null;\n        $scope.licenseFactory = licenseFactory;\n        $scope.metaConfiguration.saveAuthentication = true; // TODO: this is hardcoded until we have a checkbox for this\n        $scope.systemConfiguration = {};\n        $scope.configuration = {};\n        vm.connectionRestrictions = {};\n        vm.applicationSettings = {};\n        vm.isAuthenticated = false;\n\n        vm.buildDefaultConfiguration = buildDefaultConfiguration;\n        vm.hide = hide;\n        vm.show = show;\n        vm.handleError = handleError;\n        vm.setupInitialDirectory = setupInitialDirectory;\n        vm.writeAuthenticationToServer = writeAuthenticationToServer;\n        vm.saveCurrentAuthentication = saveCurrentAuthentication;\n        vm.removeProfile = removeProfile;\n        vm.initiateAuthenticationSave = initiateAuthenticationSave;\n        vm.handleAuthenticationSuccess = handleAuthenticationSuccess;\n        vm.handleAuthenticationFailure = handleAuthenticationFailure;\n        vm.transferConfigToAuthFactory = transferConfigToAuthFactory;\n        vm.successCallback = successCallback;\n        vm.handleTestConfiguration = handleTestConfiguration;\n        vm.testConfiguration = testConfiguration;\n        vm.transferConfigFromAuthFactory = transferConfigFromAuthFactory;\n        vm.initWithStoredAuth = initWithStoredAuth;\n        vm.updateHasServerSavedAuth = updateHasServerSavedAuth;\n        vm.addDefaultsToConfig = addDefaultsToConfig;\n        vm.initWithDefaultAuth = initWithDefaultAuth;\n        vm.init = init;\n        vm.handleCreateAuthSuccess = handleCreateAuthSuccess;\n        vm.handleLoadSavedAuthSuccess = handleLoadSavedAuthSuccess;\n        vm.handleAuthFileFailure = handleAuthFileFailure;\n        vm.performCreateAuthFile = performCreateAuthFile;\n        vm.initiateLoadOfAuthFile = initiateLoadOfAuthFile;\n        vm.loadProfileAtIndex = loadProfileAtIndex;\n        vm.loadNewProfile = loadNewProfile;\n        vm.configurationSettable = configurationSettable;\n        vm.applyRestrictionsToConfiguration = applyRestrictionsToConfiguration;\n        vm.shouldShowProUpgrade = shouldShowProUpgrade;\n        vm.shouldShowProfiles = shouldShowProfiles;\n        vm.showLoginLink = showLoginLink;\n        vm.initWithURLConfig = initWithURLConfig;\n        vm.profileIsSelected = profileIsSelected;\n        vm.getProfileName = getProfileName;\n        vm.getDefaultProfileName = getDefaultProfileName;\n\n        jQuery(document).on('shown.bs.tab', '#login-tab-links a', function (e) {\n            $scope.connectionType = $(e.target).attr('data-type');\n            $scope.$apply(function () {\n                $scope.handleProfileChange();\n            });\n\n        });\n\n        $scope.connect = function () {\n            if ($scope.connectionType == 'sftp' && $scope.systemConfiguration.sftpAvailable === false)\n                return;\n\n            vm.testConfiguration(\"form\");\n        };\n\n        $scope.handleLoginKeyPress = function ($event) {\n            if ($event.which == 13)\n                $scope.connect();\n        };\n\n        $scope.$on('logout', function () {\n            readURL = false;\n            vm.init();\n        });\n\n        $scope.$on('modal-login:show', function () {\n            vm.show();\n        });\n\n        function setStoredAuthenticationErrorMessage(errorMessage) {\n            $scope.storedAuthenticationErrorMessage = errorMessage;\n        }\n\n        $scope.handleAuthGo = function () {\n            if (isEmpty($scope.metaConfiguration.masterPassword)) {\n                $translate('PROFILE_SET_PASSWORD_ERROR').then(setStoredAuthenticationErrorMessage,\n                    setStoredAuthenticationErrorMessage);\n                return;\n            }\n\n            $scope.storedAuthenticationErrorMessage = '';\n\n            if ($scope.hasServerSavedAuthentication)\n                vm.initiateLoadOfAuthFile();\n            else\n                vm.performCreateAuthFile();\n        };\n\n        $scope.masterPasswordKeypress = function ($event) {\n            if ($event.which == 13)\n                $scope.handleAuthGo();\n        };\n\n        $scope.handleProfileChange = function () {\n            var selectValue = $scope.metaConfiguration.savedProfileIndex;\n            if (selectValue == 'new') {\n                vm.loadNewProfile();\n                return;\n            }\n\n            var profileIndex = parseInt(selectValue);\n            if (!isNaN(profileIndex))\n                vm.loadProfileAtIndex(profileIndex);\n        };\n\n        function showRemoveProfileConfirm(message) {\n            $rootScope.$broadcast('modal-confirm:show', message, vm.removeProfile);\n        }\n\n        $scope.initiateProfileDelete = function () {\n            $translate('PROFILE_DELETE_CONFIRM_MESSAGE').then(showRemoveProfileConfirm, showRemoveProfileConfirm)\n        };\n\n        $scope.shouldHideDeleteButton = function () {\n            if (!shouldShowProfiles())\n                return true;\n\n            return isNaN(parseInt($scope.metaConfiguration.savedProfileIndex));\n        };\n\n        $scope.$on('license-loaded', function () {\n            vm.init();\n        });\n\n        configurationFactory.getSystemConfiguration().then(function (systemConfiguration) {\n            $scope.systemConfiguration = systemConfiguration;\n            vm.applicationSettings = systemConfiguration.applicationSettings;\n            vm.connectionRestrictions = systemConfiguration.applicationSettings.connectionRestrictions;\n            licenseFactory.getLicense();\n        }, function (response) {\n            licenseFactory.getLicense();\n        });\n\n        function buildDefaultConfiguration() {\n            var availableConnectionTypes = [\n                ['ftp', 'FTP'],\n                ['sftp', 'SFTP/SCP']\n            ];\n\n            if (DEBUG)\n                availableConnectionTypes.push(['mock', 'Mock']);\n\n            $scope.connectionTypes = [];\n\n            for (var ctIndex = 0; ctIndex < availableConnectionTypes.length; ++ctIndex) {\n                if (connectionTypeAllowed(availableConnectionTypes[ctIndex][0]))\n                    $scope.connectionTypes.push(availableConnectionTypes[ctIndex]);\n            }\n\n            $scope.configuration = {};\n            if ($scope.connectionTypes.length)\n                $scope.connectionType = $scope.connectionTypes[0][0];\n\n            for (ctIndex = 0; ctIndex < $scope.connectionTypes.length; ++ctIndex)\n                $scope.configuration[$scope.connectionTypes[ctIndex][0]] = {};\n        }\n\n        function hide() {\n            jQuery(modalLoginId).modal('hide');\n        }\n\n        function show() {\n            var modalConfig = {};\n            vm.isAuthenticated = authenticationFactory.isAuthenticated;\n\n            if (!authenticationFactory.isAuthenticated) {\n                modalConfig.backdrop = 'static';\n                modalConfig.keyboard = false;\n            } else {\n                modalConfig.backdrop = true;\n                modalConfig.keyboard = true;\n            }\n\n            vm.updateHasServerSavedAuth();\n\n            var $modal = jQuery(modalLoginId);\n\n            if (!modalSetup) {\n                $modal.modal(modalConfig);\n                modalSetup = true;\n            } else {\n                $modal.data('bs.modal').options.backdrop = modalConfig.backdrop;\n                $modal.data('bs.modal').options.keyboard = modalConfig.keyboard;\n            }\n\n            $modal.modal('show');\n        }\n\n        function displayTranslatedError(errorMessage, mode) {\n            if (mode == 'connection-display')\n                $scope.connectionErrorMessage = errorMessage;\n            else if (mode == 'saved-profile-display')\n                $scope.storedAuthenticationErrorMessage = errorMessage;\n            else\n                $rootScope.$broadcast('modal-error:show', errorMessage);\n        }\n\n        function handleError(response, action, mode) {\n            var errorMessage = parseErrorResponse(response, action);\n\n            $translate(errorMessage, {action: action}).then(function (translatedMessage) {\n                displayTranslatedError(translatedMessage, mode);\n            }, function () {\n                displayTranslatedError(errorMessage, mode);\n            });\n        }\n\n        function setupInitialDirectory(resumeType) {\n            var configuration = $scope.configuration, connType = $scope.connectionType; // for shorter refs :)\n            if (resumeType == \"resume\") {\n                var authInitDir = authenticationFactory.initialDirectory;\n                if (isEmpty(authInitDir))\n                    authInitDir = \"/\";\n                configuration[connType].initialDirectory = authInitDir;\n            } else {\n                if (isEmpty(configuration[connType].initialDirectory))\n                    configuration[connType].initialDirectory = \"/\";\n\n                authenticationFactory.initialDirectory = configuration[connType].initialDirectory;\n            }\n        }\n\n        function writeAuthenticationToServer() {\n            connectionFactory.writeSavedAuth($scope.metaConfiguration.masterPassword, $scope.savedAuthentication)\n                .then(function (response) {\n                    if (responseIsUnsuccessful(response))\n                        vm.handleError(response, 'saving profile');\n                }, function (response) {\n                    vm.handleError(response, 'saving profile');\n                });\n        }\n\n        function saveCurrentAuthentication() {\n            if ($scope.savedAuthentication == null || typeof $scope.savedAuthentication != 'object')\n                $scope.savedAuthentication = {};\n\n            if ($scope.savedAuthentication[$scope.connectionType] == undefined)\n                $scope.savedAuthentication[$scope.connectionType] = [];\n\n            var profileToSave = angular.copy($scope.configuration[$scope.connectionType]);\n\n            profileToSave.name = $scope.metaConfiguration.enteredProfileName;\n\n            var profileArray = $scope.savedAuthentication[$scope.connectionType];\n\n            if ($scope.metaConfiguration.savedProfileIndex == 'new')\n                profileArray.push(profileToSave);\n            else\n                profileArray[$scope.metaConfiguration.savedProfileIndex] = profileToSave;\n\n            vm.writeAuthenticationToServer();\n        }\n\n        function removeProfile() {\n            $scope.savedAuthentication[$scope.connectionType].splice($scope.metaConfiguration.savedProfileIndex, 1);\n\n            $scope.metaConfiguration.savedProfileIndex = Math.min($scope.metaConfiguration.savedProfileIndex,\n                $scope.savedAuthentication[$scope.connectionType].length - 1);\n\n            vm.writeAuthenticationToServer();\n        }\n\n        function initiateAuthenticationSave() {\n            if (isEmpty($scope.metaConfiguration.masterPassword) || !$scope.metaConfiguration.saveAuthentication\n                || !$scope.hasServerSavedAuthentication)\n                return;\n\n            vm.saveCurrentAuthentication();\n        }\n\n        function handleAuthenticationSuccess() {\n            authenticationFactory.postLogin();\n            vm.initiateAuthenticationSave();\n            vm.hide();\n            $rootScope.$broadcast('login');\n        }\n\n        function handleAuthenticationFailure(resumeType, response) {\n            if (resumeType == \"resume\" || resumeType == \"url\") {\n                if (resumeType == \"url\") {\n                    $scope.configuration[$scope.connectionType].password = null;\n                    authenticationFactory.configuration[$scope.connectionType].password = null;\n                }\n                vm.show();\n            } else\n                vm.handleError(response, 'authentication', 'connection-display');\n        }\n\n        function transferConfigToAuthFactory() {\n            var config = angular.copy($scope.configuration);\n            vm.applyRestrictionsToConfiguration(config);\n            authenticationFactory.configuration = config;\n            authenticationFactory.connectionType = $scope.connectionType;\n            authenticationFactory.rememberLogin = $scope.metaConfiguration.rememberLogin;\n            authenticationFactory.hasServerSavedAuthentication = $scope.hasServerSavedAuthentication;\n        }\n\n        function successCallback(resumeType, response) {\n            if (responseIsUnsuccessful(response))\n                vm.handleAuthenticationFailure(resumeType, response);\n            else\n                vm.handleAuthenticationSuccess();\n        }\n\n        function handleTestConfiguration(resumeType) {\n            connectionFactory.testConnectAndAuthenticate().then(function (response) {\n                vm.successCallback(resumeType, response);\n            }, function (response) {\n                vm.handleAuthenticationFailure(resumeType, response);\n            });\n        }\n\n        function testConfiguration(resumeType) {\n            vm.setupInitialDirectory(resumeType);\n            vm.transferConfigToAuthFactory();\n            vm.handleTestConfiguration(resumeType);\n        }\n\n        function transferConfigFromAuthFactory() {\n            $scope.connectionType = authenticationFactory.connectionType || $scope.connectionTypes[0][0];\n\n            if (!connectionTypeAllowed($scope.connectionType))\n                $scope.connectionType = $scope.connectionTypes[0][0];\n\n            $scope.metaConfiguration.rememberLogin = authenticationFactory.rememberLogin;\n            $scope.hasServerSavedAuthentication = authenticationFactory.hasServerSavedAuthentication;\n        }\n\n        function initWithStoredAuth() {\n            $scope.configuration = angular.copy(authenticationFactory.configuration);\n\n            vm.applyRestrictionsToConfiguration($scope.configuration);\n\n            if (authenticationFactory.isAuthenticated)\n                vm.testConfiguration(\"resume\");\n            else\n                vm.show();\n        }\n\n        function initWithURLConfig(urlConfig) {\n            var configuration = {};\n\n            configuration[urlConfig.type] = urlConfig.configuration;\n\n            authenticationFactory.configuration = angular.copy(configuration);\n\n            $scope.configuration = angular.copy(configuration);\n            $scope.connectionType = urlConfig.type;\n            vm.testConfiguration(\"url\");\n        }\n\n        function updateHasServerSavedAuth() {\n            connectionFactory.checkSavedAuthExists().then(function (response) {\n                $scope.hasServerSavedAuthentication = (response.data.data === true);\n            }, function () {\n                $scope.hasServerSavedAuthentication = false;\n            });\n        }\n\n        function addDefaultsToConfig() {\n            if ($scope.configuration.ftp) // will not exist if in sftp only mode\n                $scope.configuration.ftp.passive = true;\n        }\n\n        function initWithDefaultAuth() {\n            vm.addDefaultsToConfig();\n            vm.show();\n        }\n\n        function init() {\n            vm.buildDefaultConfiguration();\n            authenticationFactory.loadSettings();\n            vm.transferConfigFromAuthFactory();\n\n            var configFromURL = null;\n\n            if (readURL && licenseFactory.isLicensed())\n                configFromURL = requestLoginFactory.getConfigFromCurrentURL();\n\n            if (configFromURL != null)\n                vm.initWithURLConfig(configFromURL);\n            else if (authenticationFactory.hasStoredAuthenticationDetails())\n                vm.initWithStoredAuth();\n            else\n                vm.initWithDefaultAuth();\n        }\n\n        function handleCreateAuthSuccess() {\n            $scope.masterPasswordValid = true;\n            $scope.hasServerSavedAuthentication = true;\n        }\n\n        function handleLoadSavedAuthSuccess(response) {\n            $scope.savedAuthentication = response.data.data;\n            $scope.masterPasswordValid = true;\n        }\n\n        function handleAuthFileFailure(response) {\n            $scope.masterPasswordValid = false;\n            vm.handleError(response, 'reading/writing the settings file', 'saved-profile-display');\n        }\n\n        function performCreateAuthFile() {\n            var defaultAuth = {};\n\n            for (var tIndex = 0; tIndex < $scope.connectionTypes.length; ++tIndex) {\n                defaultAuth[$scope.connectionTypes[tIndex][0]] = [];\n            }\n\n            connectionFactory.writeSavedAuth($scope.metaConfiguration.masterPassword, defaultAuth).then(\n                function (response) {\n                    if (responseIsUnsuccessful(response))\n                        vm.handleAuthFileFailure(response);\n                    else\n                        vm.handleCreateAuthSuccess(response);\n                }, function (response) {\n                    vm.handleAuthFileFailure(response);\n                });\n        }\n\n        function initiateLoadOfAuthFile() {\n            connectionFactory.readSavedAuth($scope.metaConfiguration.masterPassword).then(function (response) {\n                if (responseIsUnsuccessful(response))\n                    vm.handleAuthFileFailure(response);\n                else\n                    vm.handleLoadSavedAuthSuccess(response);\n            }, function (response) {\n                vm.handleAuthFileFailure(response);\n            });\n        }\n\n        function loadProfileAtIndex(profileIndex) {\n            $scope.configuration[$scope.connectionType] = angular.copy(\n                $scope.savedAuthentication[$scope.connectionType][profileIndex]);\n\n            $scope.metaConfiguration.enteredProfileName = $scope.configuration[$scope.connectionType].name;\n        }\n\n        function loadNewProfile() {\n            $scope.configuration[$scope.connectionType] = {};\n            $scope.metaConfiguration.enteredProfileName = null;\n            vm.addDefaultsToConfig();\n        }\n\n        function configurationSettable(connectionType, configurationKey) {\n            if (vm.connectionRestrictions == null || typeof (vm.connectionRestrictions) != \"object\")\n                return true;\n\n            if (!vm.connectionRestrictions.hasOwnProperty(connectionType))\n                return true;\n\n            return !vm.connectionRestrictions[connectionType].hasOwnProperty(configurationKey);\n        }\n\n        function applyRestrictionsToConfiguration(configuration) {\n            if (vm.connectionRestrictions == null || typeof (vm.connectionRestrictions) != \"object\")\n                return;\n\n            for (var connectionType in vm.connectionRestrictions) {\n                if (!vm.connectionRestrictions.hasOwnProperty(connectionType))\n                    continue;\n\n                if (!configuration.hasOwnProperty(connectionType))\n                    continue;\n\n                var typeConnectionSettings = vm.connectionRestrictions[connectionType];\n                if (typeConnectionSettings == null || typeof (vm.connectionRestrictions) != \"object\")\n                    continue;\n\n                for (var settingName in typeConnectionSettings) {\n                    if (!typeConnectionSettings.hasOwnProperty(settingName))\n                        continue;\n\n                    if (typeConnectionSettings[settingName] === true || typeConnectionSettings[settingName] === 1)\n                        configuration[connectionType][settingName] = null;\n                    else\n                        configuration[connectionType][settingName] = typeConnectionSettings[settingName];\n                }\n            }\n        }\n\n        function connectionTypeAllowed(connectionType) {\n            // this function is designed to be very forgiving\n            if (vm.connectionRestrictions == null || typeof (vm.connectionRestrictions) != \"object\")\n                return true;\n\n            if (Object.prototype.toString.call(vm.connectionRestrictions.types) != '[object Array]')\n                return true;\n\n            if (vm.connectionRestrictions.types.length == 0)\n                return true;\n\n            return vm.connectionRestrictions.types.indexOf(connectionType) != -1;\n        }\n\n        function shouldShowProUpgrade() {\n            if (vm.applicationSettings.hideProUpgradeMessages === true)\n                return false;\n\n            return !licenseFactory.isLicensed();\n        }\n\n        function shouldShowProfiles() {\n            if (vm.applicationSettings.disableMasterLogin === true)\n                return false;\n\n            return licenseFactory.isLicensed();\n        }\n\n        function showLoginLink() {\n            $rootScope.$broadcast(\"modal-login-link:show\", $scope.connectionType,\n                $scope.configuration[$scope.connectionType]);\n            vm.hide();\n        }\n\n        function profileIsSelected() {\n            return $scope.metaConfiguration.savedProfileIndex !== ''\n                && $scope.metaConfiguration.savedProfileIndex !== null;\n        }\n\n        function getProfileName(profile, useDefault) {\n            if (!useDefault && profile.name)\n                return profile.name;\n\n            if (profile.host == null || (profile.username == null && profile.remoteUsername == null))\n                return '';\n\n            return (profile.host || 'host') + \" / \" + (profile.username || profile.remoteUsername || 'username');\n        }\n\n        function getDefaultProfileName() {\n            if ($scope == null || $scope.configuration == null || $scope.connectionType == null)\n                return '';\n\n            return getProfileName($scope.configuration[$scope.connectionType], true);\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalAddonsController', ModalAddonsController);\n\n    ModalAddonsController.$inject = ['jQuery', 'licenseFactory', '$scope', '$filter', 'connectionFactory',\n        '$translate'];\n\n    function ModalAddonsController(jQuery, licenseFactory, $scope, $filter, connectionFactory, $translate) {\n        var modalId = '#modal-addons', vm = this;\n\n        vm.show = show;\n        vm.updateLicense = updateLicense;\n\n        vm.models = {license: ''};\n        vm.licenseUpdateError = null;\n\n        $scope.$on('modal-addons:show', function () {\n            vm.show();\n        });\n\n        $scope.$on('license-loaded', function () {\n           refreshLicenseData();\n        });\n\n        function updateLicense() {\n            vm.licenseUpdateError = null;\n            connectionFactory.updateLicense(vm.models.license).then(function () {\n                licenseFactory.getLicense();\n                jQuery('#addon-tab-links a:first').tab('show');\n                vm.models.license = '';\n            }, function (response) {\n                var localizedError = response.data.localizedErrors[0];\n\n                $translate(localizedError.errorName, localizedError.context).then(function (translatedMessage) {\n                    vm.licenseUpdateError = translatedMessage;\n                }, function () {\n                    vm.licenseUpdateError = errorMessage;\n                });\n            });\n        }\n\n        function refreshLicenseData() {\n            vm.formattedExpiryDate = $filter('date')(licenseFactory.expiryDate, \"d MMMM, yyyy\");\n            vm.licenseExpired = licenseFactory.isLicenseExpired();\n            vm.isLicensed = licenseFactory.isLicensed();\n            vm.isTrialLicense = licenseFactory.isTrialLicense();\n        }\n\n        function show() {\n            refreshLicenseData();\n            jQuery(modalId).modal('show');\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalChoiceController', ModalChoiceController);\n\n    ModalChoiceController.$inject = [\"$scope\", \"jQuery\", '$timeout'];\n\n    function ModalChoiceController($scope, jQuery, $timeout) {\n        var vm = this, modalId = \"#modal-choice\";\n        vm.callbacks = [];\n        vm.title = null;\n        vm.message = null;\n        vm.show = show;\n        vm.handleCallback = handleCallback;\n\n        $scope.$on('modal-choice:show', function (ev, title, message, callbacks) {\n            vm.title = title;\n            vm.message = message;\n            vm.callbacks = callbacks;\n\n            $timeout(function () {\n                $scope.$apply(function () {\n                    vm.show();\n                });\n            });\n        });\n\n        function show() {\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n        }\n\n        function handleCallback(callbackIndex) {\n            vm.callbacks[callbackIndex][1]();\n            hide();\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalConfirmController', ['$scope', 'jQuery', ModalConfirmController]);\n\n    function ModalConfirmController($scope, jQuery) {\n        var modalConfirmId = '#modal-confirm', vm = this;\n\n        vm.message = '';\n        vm.okCallback = null;\n        vm.cancelCallback = null;\n\n        vm.show = show;\n        vm.ok = okHandler;\n        vm.cancel = cancelHandler;\n\n        $scope.$on('modal-confirm:show', function (ev, message, okCallback, cancelCallback) {\n            vm.message = message;\n            vm.okCallback = (typeof okCallback == 'undefined') ? null : okCallback;\n            vm.cancelCallback = (typeof cancelCallback == 'undefined') ? null : cancelCallback;\n            vm.show();\n        });\n\n        function okHandler() {\n            jQuery(modalConfirmId).modal('hide');\n            if (vm.okCallback != null) {\n                vm.okCallback();\n                vm.okCallback = null;\n            }\n        }\n\n        function cancelHandler() {\n            jQuery(modalConfirmId).modal('hide');\n            if (vm.cancelCallback != null) {\n                vm.cancelCallback();\n                vm.cancelCallback = null;\n            }\n        }\n\n        function show() {\n            jQuery(modalConfirmId).modal('show');\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalErrorController', ModalErrorController);\n\n    ModalErrorController.$inject = ['$scope', 'jQuery', '$translate'];\n\n    function ModalErrorController($scope, jQuery, $translate) {\n        var vm = this, modalErrorId = '#modal-error';\n        vm.message = '';\n        vm.show = show;\n        vm.hide = hide;\n        vm.dismissCallback = dismissCallback;\n\n        $scope.$on('modal-error:show', function (ev, message, dismissCallback, context) {\n            $translate(message, context).then(function(translatedMessage){\n                vm.message = translatedMessage;\n            }, function () {\n                vm.message = message;\n            });\n\n            vm.dismissCallback = dismissCallback;\n            jQuery(modalErrorId).modal('show');\n        });\n\n        jQuery(modalErrorId).on('shown.bs.modal', function () {\n            $scope.$apply();\n        });\n\n        function show() {\n            jQuery(modalErrorId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalErrorId).modal('hide');\n            if (vm.dismissCallback)\n                vm.dismissCallback();\n        }\n\n        function dismissCallback() {\n            // empty\n        }\n    }\n\n}());\n","(function () {\n    angular.module('MonstaFTP').controller('ModalPermissionsController', ModalPermissionsController);\n\n    ModalPermissionsController.$inject = ['$scope', '$rootScope', 'connectionFactory', 'jQuery','permissionsFactory',\n        '$translate'];\n\n    function ModalPermissionsController($scope, $rootScope, connectionFactory, jQuery, permissionsFactory, $translate) {\n        var modalPermissionsEditorId = '#modal-chmod', vm = this;\n        $scope.filePaths = null;\n        $scope.permissions = null;\n        $scope.formattedPermissions = null;\n        $scope.invalidRange = false;\n        $scope.saving = false;\n\n        vm.show = show;\n        vm.hide = hide;\n        vm.validateFormattedPermission = validateFormattedPermission;\n        vm.formattedPermissionsChange = formattedPermissionsChange;\n        vm.setPermissions = setPermissions;\n        vm.zeroPadLeft = zeroPadLeft;\n        vm.setFormattedPermissions = setFormattedPermissions;\n        vm.permissionsChange = permissionsChange;\n        vm.permissionSaveError = permissionSaveError;\n        vm.permissionSaveSuccess = permissionSaveSuccess;\n        vm.initiatePermissionsSave = initiatePermissionsSave;\n\n        $scope.$on('modal-permissions:show', function (ev, filePaths, numericPermissions) {\n            $scope.filePaths = filePaths;\n            vm.setPermissions(numericPermissions);\n            vm.show();\n        });\n\n        $scope.$watch('permissions', vm.permissionsChange, true);\n\n        $scope.$watch('formattedPermissions', vm.formattedPermissionsChange);\n\n        $scope.manualFocus = function () {\n            $scope.invalidRange = false;\n        };\n\n        $scope.okClick = function () {\n            if ($scope.invalidRange)\n                return;\n\n            vm.initiatePermissionsSave();\n        };\n\n        $scope.cancelClick = function () {\n            vm.hide();\n        };\n\n        function show() {\n            jQuery(modalPermissionsEditorId).modal('show');\n            $scope.invalidRange = false;\n        }\n\n        function hide() {\n            $scope.filePaths = null;\n            $scope.invalidRange = false;\n            jQuery(modalPermissionsEditorId).modal('hide');\n        }\n\n        function setPermissions(numericPermissions) {\n            $scope.permissions = permissionsFactory.numericToObject(numericPermissions);\n        }\n\n        function zeroPadLeft(input) {\n            while (input.length < 3)\n                input = '0' + input;\n\n            return input;\n        }\n\n        function setFormattedPermissions(numericPermissions) {\n            $scope.formattedPermissions = vm.zeroPadLeft(numericPermissions.toString(8));\n        }\n\n        function permissionsChange() {\n            if ($scope.permissions != null)\n                vm.setFormattedPermissions(permissionsFactory.objectToNumeric($scope.permissions));\n        }\n\n        function validateFormattedPermission(formattedPermission) {\n            var numericPermissions = parseInt(formattedPermission, 8);\n            if (isNaN(numericPermissions) || numericPermissions < 0 || numericPermissions > 511) {\n                numericPermissions = 0;\n                $scope.invalidRange = true;\n            }\n            return numericPermissions;\n        }\n\n        function formattedPermissionsChange() {\n            vm.setPermissions(vm.validateFormattedPermission($scope.formattedPermissions));\n        }\n\n        function permissionSaveError(error, context) {\n            $scope.saving = false;\n            $translate(['PERMISSIONS_FAILURE_PRECEDING_MESSAGE', error], context).then(function (translations) {\n                $rootScope.$broadcast('modal-error:show',\n                    translations['PERMISSIONS_FAILURE_PRECEDING_MESSAGE'] + ' ' + translations[error]);\n            });\n        }\n\n        function permissionSaveSuccess() {\n            $scope.saving = false;\n            $rootScope.$broadcast('change-directory');\n            vm.hide();\n        }\n\n        function initiatePermissionsSave() {\n            var filesSaved = 0, mode = permissionsFactory.objectToNumeric($scope.permissions);\n\n            var checkCompleted = function () {\n                ++filesSaved;\n\n                if (filesSaved == $scope.filePaths.length)\n                    vm.permissionSaveSuccess();\n            };\n\n            $scope.saving = true;\n\n            $scope.filePaths.map(function (path) {\n                connectionFactory.changePermissions(path, mode).then(function () {\n                    checkCompleted();\n                }, function (response) {\n                    var action = \"permission save\";\n                    vm.permissionSaveError(parseErrorResponse(response, action), {action: action});\n                });\n            });\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalPromptController', ModalPromptController);\n\n    ModalPromptController.$inject = ['$scope', 'jQuery', '$translate'];\n\n    function ModalPromptController($scope, jQuery, $translate) {\n        var modalPromptId = '#modal-prompt', vm = this;\n\n        this.setVars = function (title, initial, placeHolder) {\n            $translate(title).then(function (translatedTitle) {\n                $scope.title = translatedTitle;\n            }, function () {\n                $scope.title = title;\n            });\n\n            $translate(placeHolder).then(function (translatedPlaceholder) {\n                $scope.placeHolder = translatedPlaceholder;\n            }, function () {\n                $scope.placeHolder = placeHolder;\n            });\n\n            $scope.initial = initial;\n            $scope.final = initial;\n            $scope.errorSet = false;\n            $scope.errorMessage = '';\n            $scope.isBusy = false;\n            $scope.busyMessage = null;\n            this.updateDismissMessage();\n        };\n\n        this.updateDismissMessage = function () {\n            $translate($scope.busyMessage || 'DISMISS_OK_ACTION').then(function (translatedDismissMessage) {\n                $scope.dismissMessage = translatedDismissMessage;\n            }, function (dismissMessage) {\n                $scope.dismissMessage = dismissMessage;\n            });\n        };\n\n        jQuery(modalPromptId).on('shown.bs.modal', function () {\n            jQuery(this).find('input[type=text]').focus();\n        });\n\n        this.setVars('', '', '');\n\n        this.successCallback = function () {\n            // empty\n        };\n\n        $scope.successClose = function () {\n            vm.successCallback($scope.final, $scope.initial);\n        };\n\n        $scope.handlePromptKeypress = function ($event) {\n            if ($event.which == 13)\n                $scope.successClose();\n        };\n\n        this.show = function () {\n            jQuery(modalPromptId).modal('show');\n            vm.clearError();\n            vm.clearBusy();\n        };\n\n        this.hide = function () {\n            jQuery(modalPromptId).modal('hide');\n        };\n\n        this.clearError = function () {\n            $scope.errorSet = false;\n            $scope.errorMessage = '';\n        };\n\n        this.setBusy = function (busyMessage) {\n            $scope.isBusy = true;\n            $scope.busyMessage = busyMessage;\n            this.updateDismissMessage();\n        };\n\n        this.clearBusy = function () {\n            $scope.isBusy = false;\n            $scope.busyMessage = null;\n            this.updateDismissMessage();\n        };\n\n        $scope.$on('modal-prompt:show', function (ev, title, initial, placeHolder, successCallback) {\n            vm.setVars(title, initial, placeHolder);\n            vm.successCallback = successCallback;\n            vm.show();\n        });\n\n        $scope.$on('modal-prompt:set-error', function (ev, errorMessage) {\n            $scope.errorSet = true;\n\n            $translate(errorMessage).then(function (translatedErrorMessage) {\n                $scope.errorMessage = translatedErrorMessage;\n            }, function () {\n                $scope.errorMessage = errorMessage;\n            });\n        });\n\n        $scope.$on('modal-prompt:clear-error', function () {\n            vm.clearError();\n        });\n\n        $scope.$on('modal-prompt:hide', function () {\n            vm.hide();\n        });\n\n        $scope.$on('modal-prompt:set-busy', function (ev, busyMessage) {\n            vm.setBusy(busyMessage);\n        });\n\n        $scope.$on('modal-prompt:clear-busy', function () {\n            vm.clearBusy();\n        });\n    }\n}());","(function(){\n    angular.module('MonstaFTP').controller('ModalPropertiesController', ModalPropertiesController);\n\n    ModalPropertiesController.$inject = ['jQuery', '$scope'];\n\n    function ModalPropertiesController(jQuery, $scope) {\n        var vm = this, modalPropertiesId = \"#modal-properties\";\n        vm.item = null;\n\n        vm.hide = hide;\n        vm.show = show;\n\n        $scope.$on('modal-properties:show', function (ev, item) {\n           vm.show(item);\n        });\n\n        function hide() {\n            jQuery(modalPropertiesId).modal('hide');\n        }\n\n        function show(item){\n            vm.item = item;\n            jQuery(modalPropertiesId).modal('show');\n        }\n    }\n}());","(function(){\n    angular.module('MonstaFTP').controller('ModalSettingsController', ModalSettingsController);\n\n    ModalSettingsController.$inject = ['jQuery', '$scope', 'configurationFactory', '$rootScope', '$translate',\n        'localConfigurationFactory'];\n\n    function ModalSettingsController(jQuery, $scope, configurationFactory, $rootScope, $translate,\n                                     localConfigurationFactory) {\n        var modalId = '#modal-settings', vm = this, applicationSettingsKeys = [], previousShowDotFiles;\n        vm.applicationSettings = {};\n        vm.show = show;\n        vm.saveSettings = saveSettings;\n        vm.debug = DEBUG;\n        vm.systemShowDotFiles = false;\n\n        configurationFactory.getSystemConfiguration().then(systemVarLoadSuccess, systemVarLoadFailure);\n\n        $scope.$on('modal-settings:show', function () {\n            localConfigurationFactory.getApplicationSettings().then(function(){\n                for (var i = 0; i < applicationSettingsKeys.length; ++i) {\n                    var key = applicationSettingsKeys[i];\n                    vm.applicationSettings[key] = localConfigurationFactory.getConfigurationItem(key);\n                }\n                vm.show();\n            }, systemVarLoadFailure);\n        });\n\n        function show() {\n            previousShowDotFiles = vm.applicationSettings.showDotFiles;\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n        }\n\n        function systemVarLoadSuccess(vars) {\n            vm.systemShowDotFiles = vars.applicationSettings.showDotFiles;\n            applicationSettingsKeys = Object.keys(vars.applicationSettings);\n        }\n\n        function systemVarLoadFailure(response) {\n            showResponseError(response, \"system var load\", $rootScope, $translate);\n        }\n        \n        function saveSettings() {\n            for(var key in vm.applicationSettings){\n                if (vm.applicationSettings.hasOwnProperty(key))\n                    localConfigurationFactory.setConfigurationItem(key, vm.applicationSettings[key]);\n            }\n\n            if (vm.applicationSettings.showDotFiles != previousShowDotFiles)\n                $rootScope.$broadcast('change-directory');\n\n            hide();\n        }\n\n        $rootScope.$on('configuration:key-changed', function (ev, key, value) {\n            if(key == 'language') {\n                $translate.use(value);\n            }\n        });\n    }\n}());","(function () {\n    var TRANSFER_UI_UPDATE_DELAY = 200;  // only update the UI after this many MS\n\n    angular.module('MonstaFTP').controller('ModalTransferController', ModalTransferController);\n\n    ModalTransferController.$inject = ['uploadFactory', '$rootScope', '$scope', 'jQuery', '$timeout',\n        '$filter'];\n\n    function ModalTransferController(uploadFactory, $rootScope, $scope, jQuery, $timeout, $filter) {\n        var modalId = '#modal-transfers', vm = this, updateApplyTimeout = null;\n\n        vm.updateUploads = updateUploads;\n        vm.uploadFinished = uploadFinished;\n        vm.show = show;\n        vm.hide = hide;\n        vm.abortItem = abortItem;\n        vm.abortAll = abortAll;\n        vm.fsFilter = $filter('file_size');\n\n        vm.uploads = [];\n        vm.itemToAbort = null;\n\n        uploadFactory.updateCallback = vm.updateUploads;\n\n        $scope.$on('upload:load', this.uploadFinished);\n        $scope.$on('upload:add', this.show);\n\n        function updateUploads(instantUpdate) {\n            var uploads = uploadFactory.getUploads();\n            if (uploads.length == 0) {\n                updateApplyTimeout = null;\n                vm.uploads = uploads;\n                vm.hide();\n            } else {\n                var timeout = instantUpdate ? 0 : TRANSFER_UI_UPDATE_DELAY;\n\n                if(instantUpdate && updateApplyTimeout != null) {\n                    clearTimeout(updateApplyTimeout);\n                    updateApplyTimeout = null;\n                }\n\n                if(updateApplyTimeout == null) {\n                    vm.uploads = uploads;\n                    updateApplyTimeout = $timeout(function () {\n                        $scope.$apply();\n                        updateApplyTimeout = null;\n                    }, timeout);\n                }\n            }\n        }\n\n        function uploadFinished() {\n            vm.updateUploads();\n            if(vm.uploads.length == 0)\n                $rootScope.$broadcast('change-directory'); // refresh directory\n            else\n                $rootScope.$broadcast('change-directory:on-upload'); // refresh directory which is allowed to fail\n        }\n\n        function show() {\n            vm.updateUploads();\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n        }\n\n        function abortItem(item) {\n            uploadFactory.abortItem(item);\n            vm.updateUploads();\n        }\n\n        function abortAll() {\n            uploadFactory.abortAll();\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').directive('uploadProgressBar', uploadProgressBar);\n\n    uploadProgressBar.$inject = ['transfer_percentFilter'];\n\n    function uploadProgressBar(transfer_percentFilter) {\n        function getProgressBarHtml(upload) {\n            var indeterminateClasses = '';\n\n            if (upload.stats.completedBytes == upload.stats.totalBytes)\n                indeterminateClasses = ' progress-bar-striped active';\n\n            var transferPercent = transfer_percentFilter(upload);\n\n            return '<div class=\"progress-bar progress-bar-success' + indeterminateClasses + '\" ' +\n                'role=\"progressbar\" aria-valuenow=\"' + transferPercent + '\" ' +\n                'aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: ' + transferPercent + '%;\"></div>';\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                upload: '='\n            },\n            template: '<div></div>',\n            link: function ($scope, element, attrs) {\n                var updatePBarHtml = function () {\n                    element.html(getProgressBarHtml($scope.upload));\n                };\n\n                updatePBarHtml();\n\n                $scope.$watch('upload.stats', function () {\n                    updatePBarHtml();\n                }, true);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('permissionsFactory', permissionsFactory);\n\n    function permissionsFactory() {\n        return {\n            objectToNumeric: function (permissions) {\n                return (permissions.ownerRead ? 0x100 : 0) + (permissions.ownerWrite ? 0x80 : 0) +\n                    (permissions.ownerExecute ? 0x40 : 0) + (permissions.groupRead ? 0x20 : 0) +\n                    (permissions.groupWrite ? 0x10 : 0) + (permissions.groupExecute ? 0x8 : 0) +\n                    (permissions.otherRead ? 0x4 : 0) + (permissions.otherWrite ? 0x2 : 0) +\n                    (permissions.otherExecute ? 0x1 : 0);\n            },\n            numericToObject: function (numericPermission) {\n                return {\n                    ownerRead: (numericPermission & 0x100) != 0,\n                    ownerWrite: (numericPermission & 0x80) != 0,\n                    ownerExecute: (numericPermission & 0x40) != 0,\n                    groupRead: (numericPermission & 0x20) != 0,\n                    groupWrite: (numericPermission & 0x10) != 0,\n                    groupExecute: (numericPermission & 0x8) != 0,\n                    otherRead: (numericPermission & 0x4) != 0,\n                    otherWrite: (numericPermission & 0x2) != 0,\n                    otherExecute: (numericPermission & 0x1) != 0\n                };\n            }\n        }\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').controller('SlidebarController', SlidebarController);\n\n    SlidebarController.$inject = ['authenticationFactory', '$rootScope', 'jQuery', '$translate'];\n\n    function SlidebarController(authenticationFactory, $rootScope, jQuery, $translate) {\n        var vm = this;\n\n        jQuery('#slidebar').ready(function () {\n            jQuery.slidebars();\n        });\n\n        vm.confirmLogout = confirmLogout;\n\n        function confirmLogout() {\n            jQuery.slidebars.close('#slidebar');\n            authenticationFactory.logout();\n            $rootScope.$broadcast('logout');\n        }\n\n        vm.initiateLogout = initiateLogout;\n        vm.showAddonsModal = showAddonsModal;\n        vm.showSettingsModal = showSettingsModal;\n        vm.showLoginPanel = showLoginPanel;\n\n        function showModalConfirm(translatedMessage) {\n            $rootScope.$broadcast('modal-confirm:show', translatedMessage, vm.confirmLogout);\n        }\n\n        function initiateLogout() {\n            $translate('LOGOUT_CONFIRM_MESSAGE').then(showModalConfirm, showModalConfirm);\n        }\n\n        function showAddonsModal() {\n            $rootScope.$broadcast('modal-addons:show');\n        }\n\n        function showSettingsModal() {\n            $rootScope.$broadcast('modal-settings:show');\n        }\n\n        function showLoginPanel() {\n            $rootScope.$broadcast('modal-login:show');\n            jQuery.slidebars.close('#slidebar');\n        }\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').controller('SpinnerController', SpinnerController);\n\n    SpinnerController.$inject = ['$scope'];\n\n    function SpinnerController($scope) {\n        $scope.spinnerVisible = false;\n\n        $scope.$on('request-count-change', function (ev, reqCount) {\n            $scope.spinnerVisible = reqCount != 0;\n        });\n    }\n}());\n","(function () {\n    angular.module('MonstaFTP').factory('uiOperationFactory', uiOperationFactory);\n\n    uiOperationFactory.$inject = ['$rootScope'];\n\n    function uiOperationFactory($rootScope) {\n        return {\n            cutSource: null,\n            copySource: null,\n            currentDirectory: \"\",\n            setCutSource: function (newCutSource) {\n                this.cutSource = newCutSource;\n                this.copySource = null;\n\n                if (newCutSource != null)\n                    $rootScope.$broadcast('paste-source:set');\n            },\n            setCopySource: function (newCopySource) {\n                this.copySource = newCopySource;\n                this.cutSource = null;\n\n                if (newCopySource != null)\n                    $rootScope.$broadcast('paste-source:set');\n            },\n            pasteComplete: function () {\n                if (this.cutSource != null)\n                    $rootScope.$broadcast('paste-source:cleared');\n                this.cutSource = null;\n            },\n            clearCutAndCopySource: function () {\n                this.copySource = null;\n                this.cutSource = null;\n                $rootScope.$broadcast('paste-source:cleared');\n            },\n            isCutOrCopySource: function (path) {\n                return path == this.copySource || path == this.cutSource;\n            },\n            joinNameToCurrentDirectory: function (name) {\n                return pathJoin(this.currentDirectory, name);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('requestLoginFactory', requestLoginFactory);\n\n    requestLoginFactory.$inject = [\"$location\"];\n\n    function requestLoginFactory($location) {\n        var factory = {};\n\n        factory.encodeConfiguration = encodeConfiguration;\n        factory.decodeConfiguration = decodeConfiguration;\n        factory.getPreHashURL = getPreHashURL;\n        factory.getConfigURL = getConfigURL;\n        factory.compactConfigKeys = compactConfigKeys;\n        factory.uncompactConfigKeys = uncompactConfigKeys;\n        factory.decodePostHash = decodePostHash;\n        factory.getConfigFromCurrentURL = getConfigFromCurrentURL;\n        factory.getFormFieldHTML = getFormFieldHTML;\n\n        function encodeConfiguration(type, configuration) {\n            var configDict = {\n                t: type,\n                c: factory.compactConfigKeys(configuration)\n            };\n            return encodeURIComponent(b64EncodeUnicode(JSON.stringify(configDict)));\n        }\n\n        function decodeConfiguration(encodedConfiguration) {\n            var configDict = JSON.parse(b64DecodeUnicode(decodeURIComponent(encodedConfiguration)));\n\n            return {\n                type: configDict.t,\n                configuration: factory.uncompactConfigKeys(configDict.c)\n            };\n        }\n\n        function decodePostHash(postHash) {\n            if (isEmpty(postHash))\n                return null;\n\n            if (postHash.substr(0, 1) == \"/\")\n                postHash = postHash.substr(1);\n\n            var splitURL = postHash.split(\"/\");\n\n            if (splitURL.length < 4 || splitURL[0] != 'c')\n                return null;\n\n            var host = splitURL[1], username = splitURL[2], config = splitURL[3], decodedConfiguration = null;\n\n            try {\n                decodedConfiguration = factory.decodeConfiguration(config);\n            } catch (e) {\n                return null;\n            }\n\n            if (host != \"_\")\n                decodedConfiguration.configuration.host = host;\n\n            if (username != \"_\") {\n                var usernameKey = decodedConfiguration.type == 'sftp' ? 'remoteUsername' : 'username';\n\n                decodedConfiguration.configuration[usernameKey] = username;\n            }\n\n            return decodedConfiguration;\n        }\n\n        function getPreHashURL() {\n            var absURL = $location.absUrl();\n            var splitURL = absURL.split('#');\n            return splitURL[0];\n        }\n\n        function getConfigURL(type, configuration) {\n            if(configuration == null)\n                return null;\n\n            configuration = angular.copy(configuration);\n            var host = null, username = null;\n\n            if (configuration.hasOwnProperty('host')) {\n                host = configuration.host;\n                delete configuration.host;\n            }\n\n            var usernameKey = type == 'sftp' ? 'remoteUsername' : 'username';\n\n            if (configuration.hasOwnProperty(usernameKey)) {\n                username = configuration[usernameKey];\n                delete configuration[usernameKey];\n            }\n\n            if (isEmpty(host))\n                host = '_';\n            else\n                host = encodeURIComponent(host);\n\n            if (isEmpty(username))\n                username = '_';\n            else\n                username = encodeURIComponent(username);\n\n            var postHash = '/c/' + host + '/' + username + '/' + factory.encodeConfiguration(type, configuration);\n\n            return factory.getPreHashURL() + \"#\" + postHash;\n        }\n\n        function getConfigFromCurrentURL() {\n            var absURL = $location.absUrl();\n            var splitURL = absURL.split('#');\n            if(splitURL.length == 1)\n                return null;\n\n            return decodePostHash(splitURL[1]);\n        }\n\n        function getTransformLookup(isCompact) {\n            var compactLookup = [\n                [\"passive\", \"v\"],\n                [\"ssl\", \"s\"],\n                [\"password\", \"p\"],\n                [\"initialDirectory\", \"i\"],\n                [\"port\", \"o\"],\n                [\"authenticationModeName\", \"m\"],\n                [\"privateKeyFilePath\", \"r\"],\n                [\"publicKeyFilePath\", \"q\"]\n            ];\n\n            var to = isCompact ? 1 : 0;\n            var from = isCompact ? 0 : 1;\n\n            var transformLookup = {};\n\n            for (var i = 0; i < compactLookup.length; ++i) {\n                transformLookup[compactLookup[i][from]] = compactLookup[i][to];\n            }\n\n            return transformLookup;\n        }\n\n        function compactAndUncompact(isCompact, toTransform) {\n            var transformResult = {};\n\n            var transformLookup = getTransformLookup(isCompact);\n\n            for (var key in toTransform) {\n                if (!toTransform.hasOwnProperty(key))\n                    continue;\n\n                var value = toTransform[key];\n\n                if (transformLookup.hasOwnProperty(key))\n                    key = transformLookup[key];\n\n                if (isCompact) {\n                    if (value === true)\n                        value = 1;\n                    else if (value === false)\n                        value = 0;\n                } else {\n                    if (value === 1)\n                        value = true;\n                    if (value === 0)\n                        value = false;\n                }\n\n                transformResult[key] = value;\n            }\n\n            return transformResult;\n        }\n\n        function compactConfigKeys(config) {\n            return compactAndUncompact(true, config);\n        }\n\n        function uncompactConfigKeys(config) {\n            return compactAndUncompact(false, config);\n        }\n\n        function getFormFieldHTML(name, value) {\n            var entityMap = {\n                \"&\": \"&amp;\",\n                \"<\": \"&lt;\",\n                \">\": \"&gt;\",\n                '\"': '&quot;'\n            };\n\n            value = String(value).replace(/[&<>\"]/g, function (s) {\n                return entityMap[s];\n            });\n\n            return '<input type=\"hidden\" name=\"'+ name +'\" value=\"' + value + '\">'\n        }\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('uploadFactory', uploadFactory);\n\n    uploadFactory.$inject = ['connectionFactory', '$rootScope', '$translate'];\n\n    function uploadFactory(connectionFactory, $rootScope, $translate) {\n        var EXTRACT_PROGRESS_STEPS = 8;\n\n        return {\n            updateCallback: null,\n            _uploads: [],\n            _activeUploadCount: 0,\n            addUpload: function (name, remotePath, fileObject, size, isArchive) {\n                if(!EXTRACT_UPLOAD)\n                    isArchive = false;\n\n                if (size > MAX_UPLOAD_BYTES)\n                    return false;\n\n                this._uploads.push({\n                    name: name,\n                    remotePath: remotePath,\n                    file: fileObject,\n                    request: null,\n                    stats: new FileTransferStats(size),\n                    hasError: false,\n                    isArchive: isArchive,\n                    archiveExtractMax: 0,\n                    archiveExtractCurrent: -1\n                });\n                $rootScope.$broadcast('upload:add');\n                if (this._activeUploadCount < MAX_CONCURRENT_UPLOADS)\n                    this.startUploadOfItemAtIndex(this._uploads.length - 1);\n\n                return true;\n            },\n            startNextItem: function () {\n                if (this._activeUploadCount >= MAX_CONCURRENT_UPLOADS)\n                    return;\n\n                for (var itemIndex = 0; itemIndex < this._uploads.length; ++itemIndex) {\n                    if (this._uploads[itemIndex].stats.hasBeenStarted())\n                        continue;\n\n                    this.startUploadOfItemAtIndex(itemIndex);\n                    break;\n                }\n            },\n            getUploads: function () {\n                return this._uploads;\n            },\n            getUploadItem: function (itemIndex) {\n                return this._uploads[itemIndex];\n            },\n            progressItem: function (uploadItem, transferredBytes) {\n                if(uploadItem.stats.updateTransferAmount(transferredBytes) && this.updateCallback != null)\n                    this.updateCallback();\n            },\n            getUploadRequestBody: function (remotePath, isArchive) {\n                var requestBody = connectionFactory.getRequestBody();\n                requestBody.actionName = isArchive ? UPLOAD_ARCHIVE_ACTION : UPLOAD_ACTION;\n\n                requestBody.context = {\n                    remotePath: remotePath\n                };\n\n                return requestBody;\n            },\n            encodeRequestBody: function (requestBody) {\n                var jsonRequestBody = JSON.stringify(requestBody);\n\n                return b64EncodeUnicode(jsonRequestBody);\n            },\n            getXHR: function () {\n                return new XMLHttpRequest();\n            },\n            startXHR: function (request, requestBody, file) {\n                ++this._activeUploadCount;\n                request.open('POST', UPLOAD_PATH);\n                request.setRequestHeader(\"X-Monsta\", this.encodeRequestBody(requestBody));\n                request.send(file);\n                if(this.updateCallback != null)\n                    this.updateCallback(true);\n            },\n            startUploadOfItemAtIndex: function (itemIndex) {\n                var fileRequestDescription = this._uploads[itemIndex];\n                var request = this.getXHR();\n                fileRequestDescription.request = request;\n                var _this = this;\n\n                var requestBody = this.getUploadRequestBody(fileRequestDescription.remotePath,\n                    fileRequestDescription.isArchive);\n\n                request.upload.addEventListener(\"progress\", function (e) {\n                    if (request.readyState == XMLHttpRequest.OPENED)\n                        _this.progressItem(fileRequestDescription, e.lengthComputable ? e.loaded : null);\n                }, false);\n\n                request.upload.addEventListener('load', function () {\n                    fileRequestDescription.stats.completedBytes = fileRequestDescription.stats.totalBytes;\n                    if(this.updateCallback != null)\n                        this.updateCallback();\n                }, false);\n\n                request.onreadystatechange = function () {\n                    if (request.readyState === XMLHttpRequest.DONE) {\n                        if (request.status == 200)\n                            _this.completeItem(fileRequestDescription, request.responseText, false);\n                        else if (request.status != 0) // is zero on abort\n                            _this.setItemError(fileRequestDescription);\n                    }\n                };\n                this.startXHR(request, requestBody, fileRequestDescription.file);\n                fileRequestDescription.stats.wasStarted();\n            },\n            progressExtract: function (fileKey, uploadItem, fileCount, fileOffset) {\n                var _this = this;\n                connectionFactory.extractArchive(fileKey, fileOffset, EXTRACT_PROGRESS_STEPS).then(function () {\n                    uploadItem.archiveExtractCurrent = Math.min(fileOffset + EXTRACT_PROGRESS_STEPS, fileCount);\n\n                    if((fileOffset + EXTRACT_PROGRESS_STEPS) > (fileCount + 1)) {\n                        _this.completeItem(uploadItem, null, true);\n                    } else {\n                        _this.progressExtract(fileKey, uploadItem, fileCount, fileOffset + EXTRACT_PROGRESS_STEPS);\n                    }\n                }, function (response) {\n                    showResponseError(response, \"extract archive\", $rootScope, $translate);\n                    _this.completeItem(uploadItem, null, true);\n                });\n            },\n            completeItem: function (uploadItem, responseText, isPostExtract) {\n                var _this = this;\n                if(uploadItem.isArchive && !isPostExtract) {\n                    var responseData = JSON.parse(responseText);\n                    uploadItem.archiveExtractCurrent = 0;\n                    uploadItem.archiveExtractMax = responseData.fileCount;\n                    this.progressExtract(responseData.fileKey, uploadItem, responseData.fileCount, 0);\n                } else {\n                    --this._activeUploadCount;\n                    uploadItem.request = null;\n                    uploadItem.stats.complete();\n                    this.removeItem(uploadItem);\n\n                    setTimeout(function () {\n                        _this.broadcastComplete.call(_this);\n                    }, 0);\n                }\n            }, broadcastComplete: function () {\n                $rootScope.$broadcast('upload:load');\n                this.startNextItem();\n                if(this.updateCallback != null)\n                    this.updateCallback(true);\n            },\n            abortItem: function (uploadItem) {\n                --this._activeUploadCount;\n                if (uploadItem.request != null) {\n                    uploadItem.request.abort();\n                    uploadItem.request = null;\n                }\n\n                this.removeItem(uploadItem);\n                $rootScope.$broadcast('upload:abort');\n                this.startNextItem();\n            },\n            removeItem: function (uploadItem) {\n                this._uploadIterator(function (_itemIndex, _item) {\n                    if (uploadItem.remotePath == _item.remotePath) {\n                        if (_item.request != null)\n                            return false;\n\n                        this._uploads.splice(_itemIndex, 1);\n                        return false;\n                    }\n                })\n            },\n            setItemError: function (uploadItem) {\n                uploadItem.hasError = true;\n                if (uploadItem.request != null) {\n                    uploadItem.request = null;\n                    if(this.updateCallback != null)\n                        this.updateCallback();\n                }\n            },\n            _uploadIterator: function (callback) {\n                for (var itemIndex = 0; itemIndex < this._uploads.length; ++itemIndex) {\n                    if (callback.call(this, itemIndex, this._uploads[itemIndex]) === false)\n                        break;\n                }\n            },\n            abortAll: function () {\n                for (var itemIndex = 0; itemIndex < this._uploads.length; ++itemIndex) {\n                    var uploadItem = this._uploads[itemIndex];\n\n                    if (uploadItem.request != null) {\n                        uploadItem.request.abort();\n                        uploadItem.request = null;\n                    }\n                }\n                this._uploads = [];\n                this._activeUploadCount = 0;\n                if(this.updateCallback != null)\n                    this.updateCallback(true);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('uploadUIFactory', uploadUIFactory);\n\n    uploadUIFactory.$inject = ['uiOperationFactory', 'uploadFactory', '$filter', '$rootScope', '$translate'];\n\n    function uploadUIFactory(uiOperationFactory, uploadFactory, $filter, $rootScope, $translate) {\n        var sizeFilter = $filter('file_size'),\n            NAME_INDEX = 0,\n            REMOTE_PATH_INDEX = 1,\n            FILE_INDEX = 2,\n            SIZE_INDEX = 3,\n            IS_ARCHIVE_INDEX = 4;\n\n        function showErrorModal(message) {\n            $rootScope.$broadcast('modal-error:show', message, function () {\n\n            });\n        }\n\n        function showTooLargeFilesError(message, tooLargeFiles) {\n            for (var fileIndex = 0; fileIndex < tooLargeFiles.length; ++fileIndex) {\n                var fileData = tooLargeFiles[fileIndex];\n                message += \"<br>&nbsp;&nbsp;&nbsp;&nbsp;\" + fileData[0] + \" (\" + sizeFilter(fileData[1]) + \")\";\n            }\n\n            showErrorModal(message);\n        }\n\n        function broadcastExtractMessage(factory, $rootScope, message) {\n            $rootScope.$broadcast(\"modal-choice:show\", \"EXTRACT_AFTER_UPLOAD_TITLE\", message, [\n                [\"UPLOAD_STANDARD_ACTION\", function () {\n                    factory.uploadStandardCallback()\n                }],\n                [\"UPLOAD_EXTRACT_ACTION\", function () {\n                    factory.uploadAndExtractCallback()\n                }]\n            ]);\n        }\n\n        return {\n            tooLargeFiles: [],\n            filesToQueue: [],\n            fileQueueIndex: 0,\n            treeTotalSize: 0,\n            treeProcessed: 0,\n            traverseFinished: false,\n            uploadStandardCallback: function () {\n                this.filesToQueue[this.fileQueueIndex][IS_ARCHIVE_INDEX] = false;\n                this.processUploadQueue();\n            },\n            uploadAndExtractCallback: function () {\n                this.filesToQueue[this.fileQueueIndex][IS_ARCHIVE_INDEX] = true;\n                this.processUploadQueue();\n            },\n            promptForExtract: function (fileName) {\n                var _this = this;\n                $translate(\"EXTRACT_AFTER_UPLOAD_MESSAGE\", {\n                    file_name: fileName,\n                    file_type: extractFileExtension(fileName)\n                }).then(function (translatedMessage) {\n                    broadcastExtractMessage(_this, $rootScope, translatedMessage);\n                }, function () {\n                    broadcastExtractMessage(_this, $rootScope, \"Extract \" + fileName + \" after uploading?\");\n                });\n            },\n            processUploadQueue: function () {\n                if (this.fileQueueIndex >= this.filesToQueue.length) {\n                    this.checkTooLargeFiles();\n                    this.performUploads();\n                    return;\n                }\n\n                var fileInfo = this.filesToQueue[this.fileQueueIndex];\n\n                if (fileInfo[IS_ARCHIVE_INDEX] == null && extractFileExtension(fileInfo[NAME_INDEX]) == \"zip\")\n                    this.promptForExtract(fileInfo[NAME_INDEX]);\n                else {\n                    ++this.fileQueueIndex;\n                    this.processUploadQueue();\n                }\n            },\n            performUploads: function () {\n                for (var i = 0; i < this.filesToQueue.length; ++i) {\n                    var fileInfo = this.filesToQueue[i];\n                    uploadFactory.addUpload(fileInfo[NAME_INDEX], fileInfo[REMOTE_PATH_INDEX], fileInfo[FILE_INDEX],\n                        fileInfo[SIZE_INDEX], fileInfo[IS_ARCHIVE_INDEX]);\n                }\n\n                this.filesToQueue = [];\n                this.fileQueueIndex = 0;\n                this.tooLargeFiles = [];\n            },\n            checkTooLargeFiles: function () {\n                if (this.tooLargeFiles.length != 0) {\n                    var tLFCopy = this.tooLargeFiles.slice();\n                    $translate('UPLOAD_FILES_TOO_LARGE_MESSAGE', {\n                        item_count: this.tooLargeFiles.length,\n                        maximum_size: sizeFilter(MAX_UPLOAD_BYTES)\n                    }).then(function (translatedMessage) {\n                        showTooLargeFilesError(translatedMessage, tLFCopy);\n                    }, function (message) {\n                        showTooLargeFilesError(message, tLFCopy);\n                    });\n                }\n            },\n            doUploadAdd: function (file, relativeFilePath, isArchive) {\n                var remotePath = uiOperationFactory.joinNameToCurrentDirectory(relativeFilePath);\n\n                if (file.size > MAX_UPLOAD_BYTES)\n                    this.tooLargeFiles.push([relativeFilePath, file.size]);\n                else\n                    this.filesToQueue.push([file.name, remotePath, file, file.size, isArchive]);\n            },\n            traverseFileTree: function (item, path, isArchive) {\n                path = path || \"\";\n                var _this = this;\n                if (item.isFile) {\n                    ++_this.treeTotalSize;\n                    item.file(function (file) {\n                        ++_this.treeProcessed;\n                        var relativeFilePath = pathJoin(path, item.name);\n                        _this.doUploadAdd.call(_this, file, relativeFilePath, isArchive);\n                        if (_this.traverseFinished && _this.treeProcessed == _this.treeTotalSize) {\n                            _this.processUploadQueue();\n                        }\n                    });\n                } else if (item.isDirectory) {\n                    var dirReader = item.createReader();\n                    dirReader.readEntries(function (entries) {\n                        for (var entryIndex = 0; entryIndex < entries.length; ++entryIndex) {\n                            _this.traverseFileTree.call(_this, entries[entryIndex], pathJoin(path, item.name),\n                                isArchive);\n                        }\n                    });\n                }\n            },\n            handleItemsBasedUpload: function (items, isArchive) {\n                if (!EXTRACT_UPLOAD)\n                    isArchive = false;\n\n                this.tooLargeFiles = [];\n                this.filesToQueue = [];\n                this.fileQueueIndex = 0;\n                this.treeTotalSize = 0;\n                this.treeProcessed = 0;\n                this.traverseFinished = false;\n                for (var itemIndex = 0; itemIndex < items.length; ++itemIndex) {\n                    var item = items[itemIndex].webkitGetAsEntry();\n                    if (item)\n                        this.traverseFileTree(item, null, isArchive);\n                }\n                this.fileQueueIndex = 0;\n                this.traverseFinished = true;\n            },\n            handleFilesBasedUpload: function (files, isArchive) {\n                if (!EXTRACT_UPLOAD)\n                    isArchive = false;\n\n                this.tooLargeFiles = [];\n                this.filesToQueue = [];\n                this.fileQueueIndex = 0;\n                var checkedFilesCount = 0, _this = this;\n\n                var handleFileCheckFinished = function () {\n                    if (checkedFilesCount != files.length)\n                        return;\n\n                    for (fileIndex = 0; fileIndex < files.length; ++fileIndex) {\n                        file = files[fileIndex];\n                        var relativeFilePath = file.webkitRelativePath ? file.webkitRelativePath : file.name;\n                        _this.doUploadAdd.call(_this, file, relativeFilePath, isArchive);\n                    }\n                    _this.processUploadQueue();\n                };\n\n                if (window.FileReader == undefined) {\n                    // can't check if it's file or folder so just try to upload and hope for the best\n                    checkedFilesCount = files.length;\n                    handleFileCheckFinished();\n                    return;\n                }\n\n                var loadSuccess = function () {\n                    ++checkedFilesCount;\n                    handleFileCheckFinished();\n                };\n\n                var showChromeFolderUploadError = function () {\n                    $translate('FOLDER_UPLOAD_CHROME_ONLY_MESSAGE').then(showErrorModal, showErrorModal);\n                };\n\n                if (files.length == 0) {\n                    // happens for folder drag drop in IE\n                    showChromeFolderUploadError();\n                    return;\n                }\n\n                var userAgent = window.navigator.userAgent;\n\n                var isInternetExplorer = /trident/i.test(userAgent) || /msie/i.test(userAgent);\n\n                for (var fileIndex = 0; fileIndex < files.length; ++fileIndex) {\n                    if (isInternetExplorer) {\n                        loadSuccess();  // if dropping a folder on IE files will be empty and we won't get here\n                        continue\n                    }\n\n                    var file = files[fileIndex];\n\n                    var reader = new FileReader();\n\n                    reader.onerror = function (e) {\n                        showChromeFolderUploadError();\n                    };\n\n                    reader.onload = loadSuccess;\n                    if (file.size <= MAX_UPLOAD_BYTES) {\n                        // we won't be able to upload them anyway so don't bother reading\n                        try {\n                            var s = file.slice(0, Math.min(file.size, 1024));\n\n                            if(s.size == 0)\n                                reader.readAsBinaryString(file); // might be a directory depending on browser\n                            else\n                                reader.readAsBinaryString(s);\n                        } catch (e) {\n\n                        }\n                    } else\n                        loadSuccess();\n                }\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').filter('file_last_modified', filesLastModified);\n\n    filesLastModified.$inject = ['dateFilter'];\n\n    function filesLastModified(dateFilter) {\n        function filter(input) {\n            if (typeof(input) != 'number')\n                return '';\n\n            var inputDate = new Date(input * 1000);\n            var currentDate = new Date();\n            var format;\n\n            if (inputDate.getDate() == currentDate.getDate() &&\n                inputDate.getMonth() == currentDate.getMonth() &&\n                inputDate.getFullYear() == currentDate.getFullYear())\n                format = 'shortTime';\n            else\n                format = 'mediumDate';\n\n            return dateFilter(inputDate, format)\n        }\n\n        return filter;\n    }\n}());","angular.module('MonstaFTP').filter('file_size', function () {\n    return function (input) {\n        return normalizeFileSize(input);\n    };\n});","angular.module('MonstaFTP').filter(\"html_safe\", ['$sce', function($sce) {\n    return function(htmlCode){\n        return $sce.trustAsHtml(htmlCode);\n    };\n}]);","(function () {\n    angular.module('MonstaFTP').filter('human_time_since', humanTimeSince);\n    function humanTimeSince() {\n        function timestampToFormattedDate(timeStamp, dmyFormat) {\n            var d = new Date(timeStamp * 1000);\n            if (dmyFormat === true)\n                return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();\n\n            return (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();\n        }\n\n        return function (input, dmyFormat) {\n            if (typeof(input) != 'number')\n                return '';\n\n            var scaledTimeDelta, units,\n                timeDiff = Date.now() / 1000 - input,\n                timeSteps = [\n                    [3540, 60, 'minute'], // 59 minutes\n                    [82800, 3600, 'hour'], // 23 hours\n                    [2592000, 86400, 'day'] // 30 days\n                ];\n\n            if (timeDiff < 0 || timeDiff > timeSteps[timeSteps.length - 1][0])\n                return timestampToFormattedDate(input, dmyFormat);\n            else if (timeDiff <= 60)\n                return 'now';\n\n            for (var i = 0; i < timeSteps.length; ++i) {\n                if (timeDiff > timeSteps[i][0])\n                    continue;\n\n                scaledTimeDelta = Math.round(timeDiff / timeSteps[i][1]);\n                units = timeSteps[i][2];\n                break;\n            }\n\n            if (scaledTimeDelta != 1)\n                units += 's';\n\n            return scaledTimeDelta + ' ' + units + ' ago';\n        }\n    }\n}());","angular.module('MonstaFTP').filter('icon', function () {\n    return function (item) {\n        if (item.isDirectory)\n            return 'fa-folder';\n\n        if (item.isLink)\n            return 'fa-long-arrow-right';\n\n        var iconName = '';\n\n        switch (extractFileExtension(item.name)) {\n            case 'doc':\n            case 'docx':\n                iconName = 'word';\n                break;\n            case 'xlr':\n            case 'xls':\n            case 'xlsx':\n                iconName = 'excel';\n                break;\n            case 'ppt':\n            case 'pps':\n            case 'pptx':\n                iconName = 'powerpoint';\n                break;\n            case 'pdf':\n                iconName = 'pdf';\n                break;\n            case 'txt':\n            case 'rtf':\n            case 'text':\n                iconName = 'text';\n                break;\n            case 'bmp':\n            case 'gif':\n            case 'jpg':\n            case 'png':\n            case 'psd':\n            case 'tif':\n            case 'ai':\n            case 'eps':\n            case 'svg':\n            case 'ps':\n            case 'jpeg':\n                iconName = 'image';\n                break;\n            case 'avi':\n            case 'flv':\n            case 'm4v':\n            case 'mov':\n            case 'mp4':\n            case 'mkv':\n            case 'mpg':\n            case 'wmv':\n                iconName = 'video';\n                break;\n            case 'wav':\n            case 'mp3':\n            case 'wma':\n            case 'm4a':\n            case 'm4p':\n            case 'mpa':\n            case 'flac':\n            case 'aif':\n            case 'aiff':\n                iconName = 'audio';\n                break;\n            case 'tar':\n            case 'zip':\n            case 'tgz':\n            case 'gz':\n            case 'gzip':\n            case 'rar':\n                iconName = 'archive';\n                break;\n            case 'htm':\n            case 'html':\n            case 'php':\n            case 'asp':\n            case 'aspx':\n            case 'js':\n            case 'css':\n            case 'xhtml':\n            case 'cfm':\n            case 'pl':\n            case 'py':\n            case 'c':\n            case 'cpp':\n            case 'rb':\n            case 'java':\n            case 'xml':\n                iconName = 'code';\n                break;\n            default:\n                break;\n        }\n\n        return 'fa-file' + (iconName == '' ? '' : '-') + iconName + '-o';\n    }\n});","angular.module('MonstaFTP').filter('item_permission_description', ['permissionsFactory', function (permissionsFactory) {\n    return function (item) {\n        var description = item.isDirectory ? 'd' : '-';\n        var permissionObject = permissionsFactory.numericToObject(item.numericPermissions);\n        description += permissionObject.ownerRead ? 'r' : '-';\n        description += permissionObject.ownerWrite ? 'w' : '-';\n        description += permissionObject.ownerExecute ? 'x' : '-';\n\n        description += permissionObject.groupRead ? 'r' : '-';\n        description += permissionObject.groupWrite ? 'w' : '-';\n        description += permissionObject.groupExecute ? 'x' : '-';\n\n        description += permissionObject.otherRead ? 'r' : '-';\n        description += permissionObject.otherWrite ? 'w' : '-';\n        description += permissionObject.otherExecute ? 'x' : '-';\n\n        return description;\n    };\n}]);\n","angular.module('MonstaFTP').filter('sort_description', function () {\n    return function (sortName) {\n        // these are localized so must be uppercase\n        switch (sortName) {\n            case 'modified':\n                return 'CHANGED';\n            default:\n                return sortName.toUpperCase();\n        }\n    };\n});\n","angular.module('MonstaFTP').filter('spaces_to_nbsp', function () {\n    return function (input) {\n        return input.replace(/ /g, String.fromCharCode(160));\n    };\n});\n","angular.module('MonstaFTP').filter('transfer_percent', function () {\n    return function (upload) {\n        if (!upload.hasError && upload.request == null && !upload.stats.hasBeenStarted()) {\n            return 0;\n        }\n\n        if (upload.stats == null)\n            return 0;\n\n        if(upload.archiveExtractMax != 0 && upload.archiveExtractCurrent != -1)\n            return upload.archiveExtractCurrent / upload.archiveExtractMax * 100;\n\n        return upload.stats.getTransferPercent();\n    };\n});","angular.module('MonstaFTP').filter('transfer_rate', function () {\n    return function (upload) {\n        if (upload.stats == null)\n            return '-';\n\n        var tr = upload.stats.calculateTransferRate();\n\n        var fileSize = normalizeFileSize(tr);\n        return fileSize == '' ? '-' : fileSize + '/s';\n    };\n});","String.prototype.capitalizeFirstLetter = function () {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nif (typeof String.prototype.trim !== 'function') {\n    String.prototype.trim = function () {\n        return this.replace(/^\\s+|\\s+$/g, '');\n    }\n}"],"sourceRoot":"/source/"}