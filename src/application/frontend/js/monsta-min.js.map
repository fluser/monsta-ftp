{"version":3,"sources":["FileTransferStats/filetransferstats.class.js","functions/basicurlvalidate.func.js","functions/extractfileextension.func.js","functions/isempty.func.js","functions/namejoin.func.js","functions/normalizefilesize.func.js","functions/parentpath.func.js","functions/parseerrorresponse.func.js","functions/pathjoin.func.js","functions/responseisunsuccessful.func.js","functions/showresponseerror.func.js","functions/unicodesafebase64.func.js","functions/validatefilename.func.js","functions/versionislessthan.func.js","monsta.js","Authentication/authentication.factory.js","Breadcrumb/breadcrumb.controller.js","CodeMirror/codemirror.factory.js","Configuration/configuration.factory.js","Configuration/localconfiguration.factory.js","Connection/connection.factory.js","DirectorySorting/directorysorting.factory.js","FileBrowser/filebrowser.controller.js","FileBrowser/rowmousetracker.factory.js","FileBrowser/selecteditems.factory.js","Footer/footer.controller.js","FileEditor/fileeditor.controller.js","DragDrop/dragdrop.controller.js","Header/header.controller.js","History/history.controller.js","History/history.factory.js","License/license.factory.js","JQuery/jquery.factory.js","LoginPanel/loginpanel.controller.js","LoginLinkModal/modalloginlink.controller.js","ModalAddons/modaladdons.controller.js","ModalError/modalerror.controller.js","ModalConfirm/modalconfirm.controller.js","ModalPermissions/modalpermissions.controller.js","ModalPrompt/modalprompt.controller.js","ModalProperties/modalproperties.controller.js","ModalChoice/modalchoice.controller.js","ModalTransfer/modaltransfer.controller.js","ModalTransfer/uploadprogressbar.directive.js","ModalSettings/modalsettings.controller.js","Slidebar/slidebar.controller.js","Spinner/spinner.controller.js","Permissions/permissions.factory.js","UIOperation/uioperation.factory.js","URLLogin/requestlogin.factory.js","UploadUI/uploadui.factory.js","Upload/upload.factory.js","filters/file_last_modified.filter.js","filters/file_size.filter.js","filters/html_safe.filter.js","filters/human_time_since.filter.js","filters/icon.filter.js","filters/item_permission_description.filter.js","filters/sort_description.filter.js","filters/spaces_to_nbsp.filter.js","filters/transfer_percent.filter.js","filters/transfer_rate.filter.js","prototypes/string.prototype.js"],"names":["FileTransferStats","totalBytes","this","completedBytes","previousCompletedBytes","previousSampleTime","_transferRateSamples","basicURLValidate","url","re","RegExp","test","extractFileExtension","fileName","nameComponents","split","length","toLowerCase","isEmpty","val","nameJoin","names","retVal","i","normalizeFileSize","fileSize","units","scaledSize","sizeSteps","toFixed","Math","round","parentPath","inputPath","hasLeadingSlash","substr","normalizedPath","splitPath","pathIndex","pathComponent","push","join","parseErrorResponse","response","action","data","errors","actionMsg","status","pathJoin","prefix","suffix","joiner","responseIsUnsuccessful","undefined","success","showResponseError","$rootScope","$translate","translateErrorDone","translatedError","translatedErrors","expectedTranslations","$broadcast","localizedErrors","context","window","console","error","errorName","then","b64EncodeUnicode","str","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","b64DecodeUnicode","decodeURIComponent","Array","prototype","map","call","atob","c","charCodeAt","toString","slice","validateFileNameNonEmpty","validateFileNameContainsNoSlash","indexOf","mapParseInt","simpleCompare","a","b","betaVersionComponentCompare","component1","component2","component1IsBeta","component2IsBeta","splitComponent1","splitComponent2","c1Compare","versionComponentCompare","versionIsLessThan","version1","version2","splitV1","splitV2","comparison","HISTORY_MAX","TRANSFER_RATE_UPDATE_INTERVAL","TRANSFER_BYTES_MIN_UPDATE","TRANSFER_RATE_SAMPLES_MAX","AUTOSAVE_DELAY_MS","MAX_CONCURRENT_UPLOADS","MAX_UPLOAD_BYTES","UPLOAD_ACTION","UPLOAD_ARCHIVE_ACTION","API_PATH","DOWNLOAD_PATH","UPLOAD_PATH","CM_MODE_BASE","EXTRACT_UPLOAD","DEBUG","g_ConnectionDefaults","ftp","port","sftp","angular","module","config","$httpProvider","activeRequestCount","interceptors","$q","handleActiveRequestChange","delta","request","responseError","rejection","reject","$translateProvider","useSanitizeValueStrategy","underTest","useStaticFilesLoader","useMessageFormatInterpolation","fallbackLanguage","localStorage","storedLanguage","getItem","g_defaultLanguage","JSON","parse","e","preferredLanguage","authenticationFactory","configurationKey","connectionTypeKey","initialDirectoryKey","rememberLoginKey","isAuthenticatedKey","hasServerSavedAuthenticationKey","isAuthenticated","rememberLogin","configuration","connectionType","initialDirectory","hasServerSavedAuthentication","_localStorageSupported","getConfigurationAsJSON","stringify","setConfigurationFromJSON","jsonConfig","localStorageSupported","testKey","storage","setItem","removeItem","postLogin","saveSettings","loadSettings","loadMetaConfiguration","loadConfiguration","saveMetaConfiguration","saveConfiguration","clearConfiguration","clearSettings","logout","hasStoredAuthenticationDetails","getActiveConfiguration","activeConfiguration","factory","BreadcrumbController","$scope","jQuery","linkClick","ev","preventDefault","vm","changeDirectoryToItem","makeBreadcrumbItem","linkText","index","$span","$link","text","click","append","renderBreadcrumbs","RIGHT_COMPONENT_BUFFER","RIGHT_FULL_BUFFER","$breadcrumbContainer","$homeLink","historyButton","windowWidth","width","maxWidth","totalWidth","find","remove","lastIndex","pathComponents","$rightSpan","component","after","outerWidth","$initialSpan","charactersRemoved","offset","left","lastComponent","lastComponentLength","trimmedName","setPath","path","splice","itemIndex","joinedPath","newPath","directoryChanged","$on","resize","controller","$inject","codeMirrorFactory","$window","_jQuery","loadedModes","convertFilenameToMode","fileExtension","modeLookup","htm","html","php","asp","aspx","js","css","xhtml","cfm","pl","py","cpp","rb","java","xml","hasOwnProperty","getModeDependencies","modeName","dependencyLookup","htmlmixed","generateModePath","setupCodeMirror","editorElement","postSetupCallback","cm","CodeMirror","fromTextArea","value","mode","lineNumbers","lineWrapping","postScriptLoad","loadModeAfterDependencies","_this","getScript","initiateCodeMirror","dependencies","neededDependencies","dependencyName","configurationFactory","connectionFactory","getSystemConfiguration","promise","lastRequestFailed","getSystemVars","requestSuccess","requestFailure","saveApplicationSettings","setApplicationSettings","applicationSettings","setApplicationSetting","key","keyChanged","getApplicationSetting","localConfigurationFactory","isLocalStorageSupported","getItemFromLocalStorage","rawItem","storeItemInLocalStorage","item","storeItem","inMemoryStorage","getConfigurationItem","getApplicationSettings","systemVars","setConfigurationItem","$http","NETWORK_TIMEOUT_SECONDS","IGNORE_TIMEOUT_TYPES","addRemoteFileRequest","actionName","remotePath","addSourceDestinationRequest","source","destination","_sendRequest","requestBody","timeout","req","method","headers","Content-Type","transformRequest","obj","p","log","getRequestBody","copy","defaultsForConnectionType","defaultName","getEmptyRequestBody","getListDirectoryRequest","showHidden","getFetchFileRequest","getMakeDirectoryRequest","getDeleteDirectoryRequest","getDeleteFileRequest","getCopyRequest","getRenameRequest","getChangePermissionsRequest","getPutFileContentsRequest","fileContents","getGetFileContentsRequest","getTestConnectAndAuthenticateRequest","getCheckSavedAuthExistsRequest","getWriteSavedAuthRequest","password","authData","getReadSavedAuthRequest","getReadLicenseRequest","getGetSystemVarsRequest","getFetchRemoteFileRequest","remoteSource","destinationDirectory","getDownloadMultipleFilesRequest","baseDirectory","items","getSetApplicationSettingsRequest","getDeleteMultipleRequest","pathsAndTypes","getExtractArchiveRequest","fileKey","fileIndexOffset","extractCount","listDirectory","fetchFile","rename","changePermissions","deleteFile","deleteDirectory","makeDirectory","getFileContents","putFileContents","contents","testConnectAndAuthenticate","checkSavedAuthExists","writeSavedAuth","readSavedAuth","getLicense","fetchRemoteFile","downloadMultipleFiles","deleteMultiple","extractArchive","directorySortingFactory","compareByDirectoryFlag","isDirectory","compareByName","directoryCompare","name","compareByModificationDate","modificationDate","compareBySize","size","compareByType","aExt","bExt","_handleReverse","sortedList","reverse","sortByName","unsortedList","sort","sortByModificationDate","sortBySize","sortByType","FileBrowserController","uiOperationFactory","historyFactory","$timeout","selectedItemsFactory","rowMouseTrackerFactory","loggedIn","changeDirectory","contextMenuStyleForEvent","position","clientX","CONTEXT_MENU_X_OFFSET","top","clientY","CONTEXT_MENU_Y_OFFSET","margin-left","margin-top","fixContextMenuOffScreen","event","$dropdownMenu","elementWillExtendPastWindowWidth","CONTEXT_MENU_INSET","elementWillExtendPastWindowHeight","height","setupContextMenuEvents","contextmenu","$tr","first","rowIndex","preventRowDeselect","getSelectedItems","dropdown","target","tagName","selectItem","$fileToobar","on","currentContextMenu","$dropDownMenuParent","parent","removeClass","outerHeight","addClass","$contextCatcherUl","attr","xOffset","$element","yOffset","doReorder","directoryList","sortDirectoryList","sortName","sortReversed","handleReorderChange","newSortName","sortMethodName","directoryListSuccess","change","currentDirectory","clearSelection","isHistoryChangeDir","addEntry","isFirstLoad","allowTimeout","handleError","refreshDirectoryList","filesReadyForDownloadCallback","location","fileFetchFailureCallback","downloadFileAtPath","downloadMultiple","selectedItems","itemNames","downloadSingle","fullFilePath","joinNameToCurrentDirectory","downloadSelectedFiles","getSelectedPaths","selectedPathCopy","initiateCopyOfPaths","paths","setCopySource","initiateCutOfPaths","setCutSource","initiateCutOfSelectedPaths","initiateCopyOfSelectedPaths","performPaste","cutSource","copySource","sourcePaths","operation","sourcePath","splitSourceFileName","sourceFileName","destinationPath","pasteComplete","deleteComplete","allItems","concat","directoriesToDelete","filesToDelete","confirmDelete","itemsToDelete","isCutOrCopySource","clearCutAndCopySource","cancelDelete","showTranslatedDeleteConfirm","translatedMessage","showDeleteConfirm","fileNames","item_count","message","initiateDeleteOfSelectedPaths","fullPath","clearNewItemTempVars","newItemPath","makeItemType","makeItemSuccessCallback","shouldEditItem","itemIsEditable","makeItemFailureCallback","errorMessage","translations","displayPromptError","getFileNameError","translateAndDisplayPromptError","promptErrorID","makeItemOKCallback","itemName","itemNameError","item_type","initiateMakeItem","itemType","ucItemType","capitalizeFirstLetter","NEW_ITEM_PROMPT_TITLE","NEW_ITEM_NAME_PLACEHOLDER","initiateChmodOfSelectedItems","itemPaths","numericPerms","numericPermissions","fileRenameCallback","finalValue","initialValue","renameSource","showRenamePrompt","RENAME_FILE_PROMPT_TITLE","RENAME_FILE_NAME_PLACEHOLDER","initiateRename","handleChangeDirectory","didLogout","clearHistory","systemVarLoadSuccess","vars","setEditableExtensions","systemVarLoadFailure","editableExtensionStr","splitExtensions","editableExtensions","trimmedExtension","trim","itemPath","extension","navigateUpOneLevel","showProperties","handleBodyClick","$event","which","id","hasPasteSource","$extraDropdownButton","rowMouseDown","mouseDown","rowMouseMove","$index","mouseMove","rowMouseUp","mouseUp","rowMouseLeave","mouseLeave","rowDragStartIndex","isMetaDrag","previousDragOverIndex","reorder","currentTarget","getAttribute","initiateDeleteOfItem","downloadItem","initiateCutOfItem","initiateCopyOfItem","editItem","initiateRenameOfItem","handleClick","stopPropagation","directoryPath","parentNode","buttonName","initiateChmodOfItem","mouseIsDown","mouseDownEvent","mouseMovedWhileDown","mouseClick","startDrag","mouseDrag","rowClickTargetElementNames","metaDraggedToIndex","draggedToIndex","ctrlKey","metaKey","metaClickAtIndex","shiftKey","shiftClickAtIndex","standardClickAtIndex","startMetaDraggingAtIndex","startDraggingAtIndex","generateRange","start","stop","range","broadcastSelectionChange","initialSelectedIndex","indexOfIndex","dragStartIndex","metaDragStartIndex","metaSelectedItems","newSelectedItems","lowerBound","min","upperBound","max","FooterController","uploadUIFactory","handleUpload","uploadSingleInput","fileChangeHandler","files","isArchiveUpload","validateArchiveUpload","handleItemsBasedUpload","handleFilesBasedUpload","showModalError","handleUploadFolder","userAgent","navigator","uploadFolderInput","allowAction","editorActive","actionsRequiringSelection","selectedItemsCount","performRemoteFetch","translatedBusyMessage","setModalPromptError","remoteFetchCallback","final","initiateRemoteFetch","FETCH_FILE_PROMPT_TITLE","FETCH_FILE_URL_PLACEHOLDER","onEditorHide","activeFileCount","showEditor","maxUploadBytes","currentUsername","currentHost","currentVersion","newVersionAvailable","buttonClick","document","getElementById","addEventListener","currentConfig","username","host","maxFileUpload","version","MONSTA_LATEST_VERSION","FileEditorController","licenseFactory","show","hideProUpgradeMessages","savedDirectories","modalFileEditorId","modal","hide","editorFiles","setupAdvancedEditor","filePath","codeMode","setTimeout","editorItem","getEditorFileByPath","cmSetup","textAreaId","cMirror","getValue","textChange","startEditingFile","ensureFileInScope","activeFile","isLicensed","contentsLoadedCallback","filePathIsInScope","editorFile","dirty","saving","loadFileContents","getFileIndexByPath","fileIndex","updateFileContents","file","removeFile","closingFiles","toTextArea","newFileIndex","showTabCloseConfirm","confirmMessage","confirmTabClose","cancelTabClose","initiateConfirmTabClose","pathOfTabToRemove","file_name","contentPutFinish","dirName","beginAutosave","settings","autoSave","autoSaveTimeout","clearTimeout","saveActiveFile","fileListClick","$filePickerMenu","toggleClass","shouldShowProUpgrade","itemsMoved","deletedItems","pathsToRemove","deletedPathIndex","deletedPath","deletedPathAsDirectory","editorFileIndex","removeIndex","activateTab","closeTabForFile","movedItems","moveSources","wasStarted","Date","now","updateTransferAmount","addTransferRate","getInstantaneousTransferRate","calculateTransferRate","sum","rate","elapsedTime","getTransferPercent","complete","hasBeenStarted","DragDropController","containsFiles","browserEvent","dataTransfer","types","handleDropEvent","overDrop","$html","ready","$fileDrop","$files","display","dragenter","dragleave","contains","dragover","drop","originalEvent","dragend","HeaderController","canGoBack","canGoForward","updateScopeFromHistoryFactory","hasPreviousHistoryItem","hasNextHistoryItem","navigateBack","newDir","navigateForward","refresh","HistoryController","updateHistory","history","getUniqueHistory","historyClick","removeEntry","HISTORY_CHANGED_EVENT_NAME","ensureTrailingSlash","_fullHistory","_historyIndex","getFullHistory","getFullHistoryCount","changed","historyItem","getFullHistoryItem","getHistoryIndex","setHistoryIndex","historySize","uniqueHistory","fullHistoryIndex","historyPath","isNullLicense","email","expiryDate","purchaseDate","handleGetFailure","handleGetSuccess","licenseData","isLicenseExpired","monstaJQuery","LoginPanelController","requestLoginFactory","setStoredAuthenticationErrorMessage","storedAuthenticationErrorMessage","showRemoveProfileConfirm","removeProfile","buildDefaultConfiguration","availableConnectionTypes","connectionTypes","ctIndex","connectionTypeAllowed","modalLoginId","modalConfig","backdrop","keyboard","updateHasServerSavedAuth","$modal","modalSetup","options","displayTranslatedError","connectionErrorMessage","setupInitialDirectory","resumeType","connType","authInitDir","writeAuthenticationToServer","metaConfiguration","masterPassword","savedAuthentication","saveCurrentAuthentication","profileToSave","enteredProfileName","profileArray","savedProfileIndex","initiateAuthenticationSave","saveAuthentication","handleAuthenticationSuccess","handleAuthenticationFailure","transferConfigToAuthFactory","applyRestrictionsToConfiguration","successCallback","handleTestConfiguration","testConfiguration","transferConfigFromAuthFactory","initWithStoredAuth","initWithURLConfig","urlConfig","type","addDefaultsToConfig","passive","initWithDefaultAuth","init","configFromURL","readURL","getConfigFromCurrentURL","handleCreateAuthSuccess","masterPasswordValid","handleLoadSavedAuthSuccess","handleAuthFileFailure","performCreateAuthFile","defaultAuth","tIndex","initiateLoadOfAuthFile","loadProfileAtIndex","profileIndex","loadNewProfile","configurationSettable","connectionRestrictions","typeConnectionSettings","settingName","Object","shouldShowProfiles","disableMasterLogin","showLoginLink","profileIsSelected","getProfileName","profile","useDefault","remoteUsername","getDefaultProfileName","defaults","systemConfiguration","$","$apply","handleProfileChange","connect","sftpAvailable","handleLoginKeyPress","handleAuthGo","masterPasswordKeypress","selectValue","isNaN","initiateProfileDelete","shouldHideDeleteButton","ModalLoginLinkController","configURL","getConfigURL","supportsCopy","browserSupportsCopy","modalId","alertOnCopyFailure","textArea","alert","select","copySuccess","execCommand","err","copyFailureMessage","queryCommandEnabled","ModalAddonsController","$filter","formattedExpiryDate","licenseExpired","ModalErrorController","modalErrorId","dismissCallback","ModalConfirmController","okHandler","modalConfirmId","okCallback","cancelHandler","cancelCallback","ok","cancel","ModalPermissionsController","permissionsFactory","modalPermissionsEditorId","invalidRange","filePaths","setPermissions","permissions","numericToObject","zeroPadLeft","input","setFormattedPermissions","formattedPermissions","permissionsChange","objectToNumeric","validateFormattedPermission","formattedPermission","formattedPermissionsChange","permissionSaveError","permissionSaveSuccess","initiatePermissionsSave","filesSaved","checkCompleted","$watch","manualFocus","okClick","cancelClick","ModalPromptController","modalPromptId","setVars","title","initial","placeHolder","translatedTitle","translatedPlaceholder","errorSet","isBusy","busyMessage","updateDismissMessage","translatedDismissMessage","dismissMessage","focus","successClose","handlePromptKeypress","clearError","clearBusy","setBusy","translatedErrorMessage","ModalPropertiesController","modalPropertiesId","ModalChoiceController","handleCallback","callbackIndex","callbacks","ModalTransferController","uploadFactory","updateUploads","instantUpdate","uploads","getUploads","updateApplyTimeout","TRANSFER_UI_UPDATE_DELAY","uploadFinished","abortItem","abortAll","fsFilter","itemToAbort","updateCallback","uploadProgressBar","transfer_percentFilter","getProgressBarHtml","upload","indeterminateClasses","stats","transferPercent","restrict","scope","template","link","element","attrs","updatePBarHtml","directive","ModalSettingsController","previousShowDotFiles","showDotFiles","systemShowDotFiles","applicationSettingsKeys","keys","debug","use","SlidebarController","confirmLogout","slidebars","close","showModalConfirm","initiateLogout","showAddonsModal","showSettingsModal","showLoginPanel","SpinnerController","spinnerVisible","reqCount","ownerRead","ownerWrite","ownerExecute","groupRead","groupWrite","groupExecute","otherRead","otherWrite","otherExecute","numericPermission","newCutSource","newCopySource","$location","encodeConfiguration","configDict","t","compactConfigKeys","decodeConfiguration","encodedConfiguration","uncompactConfigKeys","decodePostHash","postHash","splitURL","decodedConfiguration","usernameKey","getPreHashURL","absURL","absUrl","getTransformLookup","isCompact","compactLookup","to","from","transformLookup","compactAndUncompact","toTransform","transformResult","getFormFieldHTML","entityMap","&","<",">","\"","s","showErrorModal","showTooLargeFilesError","tooLargeFiles","fileData","sizeFilter","broadcastExtractMessage","uploadStandardCallback","uploadAndExtractCallback","NAME_INDEX","REMOTE_PATH_INDEX","FILE_INDEX","SIZE_INDEX","IS_ARCHIVE_INDEX","filesToQueue","fileQueueIndex","treeTotalSize","treeProcessed","traverseFinished","processUploadQueue","promptForExtract","file_type","checkTooLargeFiles","performUploads","fileInfo","addUpload","tLFCopy","maximum_size","doUploadAdd","relativeFilePath","isArchive","traverseFileTree","isFile","dirReader","createReader","readEntries","entries","entryIndex","webkitGetAsEntry","checkedFilesCount","handleFileCheckFinished","webkitRelativePath","FileReader","loadSuccess","showChromeFolderUploadError","isInternetExplorer","reader","onerror","onload","readAsBinaryString","EXTRACT_PROGRESS_STEPS","_uploads","_activeUploadCount","fileObject","hasError","archiveExtractMax","archiveExtractCurrent","startUploadOfItemAtIndex","startNextItem","getUploadItem","progressItem","uploadItem","transferredBytes","getUploadRequestBody","encodeRequestBody","jsonRequestBody","getXHR","XMLHttpRequest","startXHR","open","setRequestHeader","send","fileRequestDescription","readyState","OPENED","lengthComputable","loaded","onreadystatechange","DONE","completeItem","responseText","setItemError","progressExtract","fileCount","fileOffset","isPostExtract","responseData","broadcastComplete","abort","_uploadIterator","_itemIndex","_item","callback","filesLastModified","dateFilter","filter","format","inputDate","currentDate","getDate","getMonth","getFullYear","$sce","htmlCode","trustAsHtml","humanTimeSince","timestampToFormattedDate","timeStamp","dmyFormat","d","scaledTimeDelta","timeDiff","timeSteps","isLink","iconName","description","permissionObject","toUpperCase","tr","charAt"],"mappings":"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","file":"monsta-min.js","sourcesContent":["function FileTransferStats(totalBytes) {\n    this.completedBytes = 0;\n    this.previousCompletedBytes = 0;\n    this.totalBytes = totalBytes;\n    this.previousSampleTime = -1;\n    this._transferRateSamples = [];\n}\n\nFileTransferStats.prototype.wasStarted = function () {\n    this.previousSampleTime = Date.now();\n};\n\nFileTransferStats.prototype.updateTransferAmount = function (completedBytes) {\n    if (Date.now() - this.previousSampleTime < TRANSFER_RATE_UPDATE_INTERVAL)\n        return false;\n\n    if (completedBytes < this.completedBytes)\n        return false;\n\n    if(completedBytes != this.totalBytes && (completedBytes - this.completedBytes <= TRANSFER_BYTES_MIN_UPDATE))\n        return false; // limit update rate\n\n    this.previousCompletedBytes = this.completedBytes;\n    this.completedBytes = completedBytes;\n    this.addTransferRate();\n    return true;\n};\n\nFileTransferStats.prototype.addTransferRate = function () {\n    if (this._transferRateSamples.length == TRANSFER_RATE_SAMPLES_MAX)\n        this._transferRateSamples.splice(0, 1);\n\n    this._transferRateSamples.push(this.getInstantaneousTransferRate());\n};\n\nFileTransferStats.prototype.calculateTransferRate = function () {\n    if (this._transferRateSamples.length == 0)\n        return 0;\n\n    var sum = 0;\n\n    this._transferRateSamples.map(function (rate) {\n        sum += rate;\n    });\n\n    return sum / this._transferRateSamples.length;\n};\n\nFileTransferStats.prototype.getInstantaneousTransferRate = function () {\n    var elapsedTime = Date.now() - this.previousSampleTime;\n    this.previousSampleTime = Date.now();\n    return (this.completedBytes - this.previousCompletedBytes) / (elapsedTime / 1000);\n};\n\nFileTransferStats.prototype.getTransferPercent = function () {\n    if (this.totalBytes == 0 || this.totalBytes == null || this.completedBytes == null)\n        return 0;\n\n    return (100 * this.completedBytes) / this.totalBytes;\n};\n\nFileTransferStats.prototype.complete = function () {\n    this.completedBytes = this.totalBytes;\n};\n\nFileTransferStats.prototype.hasBeenStarted = function () {\n    return this.previousSampleTime != -1;\n};","function basicURLValidate(url) {\n    var re = new RegExp(\"^\\\\s*https?:\\/\\/.+\", \"i\");\n    return re.test(url);\n}","function extractFileExtension(fileName) {\n    if (typeof (fileName) != 'string')\n        return '';\n\n    var nameComponents = fileName.split('.');\n\n    if (nameComponents.length == 1 || (nameComponents.length == 2 && nameComponents[0] == ''))  // case 2 -> it starts with a .\n        return '';\n\n    return nameComponents[nameComponents.length - 1].toLowerCase();\n}","function isEmpty(val) {\n    return val === null || typeof val == 'undefined' || val === '';\n}","function nameJoin(names) {\n    switch (names.length) {\n        case 0:\n            return '';\n        case 1:\n            return names[0];\n        default:\n            var retVal = '';\n            for (var i = 0; i < names.length - 1; ++i) {\n                retVal += names[i];\n                if (i < names.length - 2)\n                    retVal += ', ';\n            }\n            retVal += ' and ' + names[names.length - 1];\n            return retVal;\n    }\n}","function normalizeFileSize(fileSize) {\n    if (typeof(fileSize) != 'number')\n        return '';\n\n    var units = 'B', scaledSize = fileSize, sizeSteps = [\n        [1099511627776, 'TB'],\n        [1073741824, 'GB'],\n        [1048576, 'MB'],\n        [1024, 'KB']\n    ];\n\n    for (var i = 0; i < sizeSteps.length; ++i) {\n        if (fileSize >= sizeSteps[i][0]) {\n            scaledSize = fileSize / sizeSteps[i][0];\n            scaledSize = scaledSize.toFixed(1);\n            units = sizeSteps[i][1];\n            break;\n        }\n    }\n\n    if (units == 'KB')\n        scaledSize = Math.round(scaledSize);\n\n    return scaledSize + units;\n}","function parentPath(inputPath){\n    if(inputPath.length <= 1)\n        return '/';\n\n    var hasLeadingSlash = inputPath.substr(0, 1) == '/';\n\n    while(inputPath.length && inputPath.substr(inputPath.length - 1, 1) == '/')\n        inputPath = inputPath.substr(0, inputPath.length - 1);\n\n    var normalizedPath = [];\n\n    var splitPath = inputPath.split('/');\n\n    for(var pathIndex = 0; pathIndex < splitPath.length - 1; ++pathIndex) {\n        var pathComponent = splitPath[pathIndex];\n\n        if (pathComponent.length == 0)\n            continue;\n\n        normalizedPath.push(pathComponent);\n    }\n\n    if (normalizedPath.length == 0)\n        return '/';\n\n    return (hasLeadingSlash ? '/' : '') + normalizedPath.join('/');\n}","function parseErrorResponse(response, action) {\n    if (!response.data || !response.data.errors) {\n        var actionMsg = isEmpty(action) ? '' : ' during ' + action;\n\n        if(response.status == 408 || response.status == -1)\n            return \"OPERATION_TIMEOUT\";\n        else\n            return \"An unknown error occurred\" + actionMsg + \".\";\n    } else {\n        return response.data.errors.join(' ');\n    }\n}","function pathJoin(prefix, suffix) {\n    var joiner = prefix.substr(prefix.length - 1, 1) == '/' ? '' : '/';\n    return prefix + joiner + suffix;\n}","function responseIsUnsuccessful(response) {\n    return response.data == undefined || response.data.success != true;\n}","function showResponseError(response, action, $rootScope, $translate) {\n    if (response.data && response.data.localizedErrors) {\n        var expectedTranslations = response.data.localizedErrors.length, translatedErrors = [];\n\n        function translateErrorDone(translatedError) {\n            translatedErrors.push(translatedError);\n\n            if (translatedErrors.length == expectedTranslations)\n                $rootScope.$broadcast('modal-error:show', translatedErrors.join(' '));\n        }\n\n        for (var i = 0; i < expectedTranslations; ++i) {\n            if (typeof(response.data.localizedErrors[i].context) == \"undefined\"\n                || response.data.localizedErrors[i].context == null || true) {\n                if (window.console && window.console.error) {\n                    console.error(response.data);\n                }\n            }\n\n            $translate(response.data.localizedErrors[i].errorName, response.data.localizedErrors[i].context).then(\n                translateErrorDone, translateErrorDone);\n        }\n    } else\n        $rootScope.$broadcast('modal-error:show', parseErrorResponse(response, action), null, {action: action});\n}","function b64EncodeUnicode(str) {\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n        return String.fromCharCode(parseInt('0x' + p1));\n    }));\n}\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n}","function validateFileNameNonEmpty(fileName) {\n    return fileName != '';\n}\n\nfunction validateFileNameContainsNoSlash(fileName) {\n    return fileName.indexOf('/') == -1;\n}","function mapParseInt(val) {\n    return parseInt(val);\n}\n\nfunction simpleCompare(a, b) {\n    return a - b;\n}\n\nfunction betaVersionComponentCompare(component1, component2) {\n    var component1IsBeta = component1.indexOf('b') != -1;\n    var component2IsBeta = component2.indexOf('b') != -1;\n\n    var splitComponent1 = component1.split('b').map(mapParseInt);\n    var splitComponent2 = component2.split('b').map(mapParseInt);\n\n    if (component1IsBeta && component2IsBeta) {\n        var c1Compare = simpleCompare(splitComponent1[0], splitComponent2[0]);\n        if (c1Compare != 0)\n            return c1Compare;\n\n        return simpleCompare(splitComponent1[1], splitComponent2[1]);\n    } else if (component1IsBeta) {\n        return splitComponent1[0] > splitComponent2[0] ? 1 : -1;\n        // xby < x\n    } else {\n        return splitComponent2[0] > splitComponent1[0] ? 1 : -1;\n    }\n}\n\nfunction versionComponentCompare(component1, component2) {\n    if (component1.indexOf('b') != -1 || component2.indexOf('b') != -1)\n        return betaVersionComponentCompare(component1, component2);\n\n    return simpleCompare(parseInt(component1), parseInt(component2));\n}\n\nfunction versionIsLessThan(version1, version2) {\n    var splitV1 = version1.split('.');\n\n    if (splitV1.length == 2)\n        splitV1.push('0');\n\n    var splitV2 = version2.split('.');\n\n    if (splitV2.length == 2)\n        splitV2.push('0');\n\n    for (var i = 0; i < 3; ++i) {\n        var comparison = versionComponentCompare(splitV1[i], splitV2[i]);\n\n        if (comparison != 0)\n            return comparison < 0;\n    }\n\n    return false;\n}","var HISTORY_MAX = 5;\nvar TRANSFER_RATE_UPDATE_INTERVAL = 200;\nvar TRANSFER_BYTES_MIN_UPDATE = 8192;\nvar TRANSFER_RATE_SAMPLES_MAX = 10;\nvar AUTOSAVE_DELAY_MS = 3000;\nvar MAX_CONCURRENT_UPLOADS = 1;\nvar MAX_UPLOAD_BYTES = -1;\nvar UPLOAD_ACTION = 'uploadFileToNewDirectory';\nvar UPLOAD_ARCHIVE_ACTION = 'uploadArchive';\nvar API_PATH = 'application/api/api.php';\nvar DOWNLOAD_PATH = 'application/api/download.php';\nvar UPLOAD_PATH = 'application/api/upload.php';\nvar CM_MODE_BASE = \"//cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/mode/\";\nvar EXTRACT_UPLOAD = false;\nvar DEBUG = false;\n\nvar g_ConnectionDefaults = {\n    ftp: {\n        port: 21\n    },\n    sftp: {\n        port: 22\n    }\n};\n\nangular.module('MonstaFTP', ['pascalprecht.translate']);\n\nangular.module('MonstaFTP').config(['$httpProvider', function ($httpProvider) {\n    'use strict';\n    var activeRequestCount = 0;\n\n    $httpProvider.interceptors.push(['$rootScope', '$q', function ($rootScope, $q) {\n        var handleActiveRequestChange = function (delta) {\n            activeRequestCount += delta;\n            $rootScope.$broadcast('request-count-change', activeRequestCount);\n        };\n\n        return {\n            'request': function (config) {\n                handleActiveRequestChange(1);\n                return config;\n            },\n            'responseError': function (rejection) {\n                handleActiveRequestChange(-1);\n                return $q.reject(rejection);\n            },\n            'response': function (response) {\n                handleActiveRequestChange(-1);\n                return response;\n            }\n        };\n    }]);\n}]);\n\nangular.module('MonstaFTP').config(['$translateProvider', function ($translateProvider) {\n    'use strict';\n    $translateProvider.useSanitizeValueStrategy('escape');\n    if (!window.underTest) { // TODO this is a bit hack\n        $translateProvider.useStaticFilesLoader({\n            prefix: 'application/languages/',\n            suffix: '.json'\n        });\n    }\n\n    $translateProvider.useMessageFormatInterpolation();\n    $translateProvider.fallbackLanguage('en_us');\n\n    if(window.localStorage) {\n        try {\n            var storedLanguage = localStorage.getItem('monsta-setting-language');\n            if(storedLanguage)\n                g_defaultLanguage = JSON.parse(storedLanguage);\n        } catch (e) {\n\n        }\n    }\n\n    $translateProvider.preferredLanguage(g_defaultLanguage);\n}]);","(function () {\n    angular.module('MonstaFTP').factory('authenticationFactory', authenticationFactory);\n\n    function authenticationFactory() {\n        var configurationKey = 'monsta-configuration',\n            connectionTypeKey = 'monsta-connectionType',\n            initialDirectoryKey = 'monsta-initialDirectory',\n            rememberLoginKey = 'monsta-rememberLogin',\n            isAuthenticatedKey = 'monsta-isAuthenticated',\n            hasServerSavedAuthenticationKey = 'monsta-hasServerSavedAuthentication';\n\n        return {\n            isAuthenticated: false,\n            rememberLogin: false,\n            configuration: null,\n            connectionType: null,\n            initialDirectory: null,\n            hasServerSavedAuthentication: false,\n            _localStorageSupported: null,\n            getConfigurationAsJSON: function () {\n                return JSON.stringify(this.configuration);\n            },\n            setConfigurationFromJSON: function (jsonConfig) {\n                this.configuration = jsonConfig == null ? null : JSON.parse(jsonConfig);\n            },\n            localStorageSupported: function () {\n                if (this._localStorageSupported == null) {\n                    var testKey = 'test', storage = window.localStorage;\n                    try {\n                        storage.setItem(testKey, '1');\n                        storage.removeItem(testKey);\n                        this._localStorageSupported = true;\n                    } catch (error) {\n                        this._localStorageSupported = false;\n                    }\n                }\n                return this._localStorageSupported;\n            },\n            postLogin: function () {\n                this.isAuthenticated = true;\n                this.saveSettings();\n            },\n            loadSettings: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.loadMetaConfiguration();\n\n                if (this.rememberLogin)\n                    this.loadConfiguration();\n            },\n            saveSettings: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.saveMetaConfiguration();\n\n                if (this.rememberLogin)\n                    this.saveConfiguration();\n                else\n                    this.clearConfiguration();\n            },\n            clearSettings: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                if (!this.rememberLogin)\n                    this.clearConfiguration();\n            },\n            logout: function () {\n                this.isAuthenticated = false;\n                this.initialDirectory = null;\n                this.saveSettings();\n                this.clearSettings();  // looks weird, but we want to save all, then clear out ones we don't want\n                this.configuration = null;\n                // if config has been saved to localStorage, this will be repopulated,  otherwise it clears out the form\n            },\n            loadConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.setConfigurationFromJSON(localStorage.getItem(configurationKey));\n                this.connectionType = localStorage.getItem(connectionTypeKey);\n                this.initialDirectory = localStorage.getItem(initialDirectoryKey);\n            },\n            saveConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                localStorage.setItem(configurationKey, this.getConfigurationAsJSON());\n                localStorage.setItem(connectionTypeKey, this.connectionType);\n                localStorage.setItem(initialDirectoryKey, this.initialDirectory);\n            },\n            clearConfiguration: function () {\n                localStorage.removeItem(configurationKey);\n                localStorage.removeItem(connectionTypeKey);\n                localStorage.removeItem(initialDirectoryKey);\n            },\n            loadMetaConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                this.rememberLogin = localStorage.getItem(rememberLoginKey) === 'true';\n                this.isAuthenticated = localStorage.getItem(isAuthenticatedKey) === 'true';\n                this.hasServerSavedAuthentication = localStorage.getItem(hasServerSavedAuthenticationKey) === 'true';\n            },\n            saveMetaConfiguration: function () {\n                if (!this.localStorageSupported())\n                    return;\n\n                localStorage.setItem(isAuthenticatedKey, this.isAuthenticated == true ? 'true' : 'false');\n                localStorage.setItem(rememberLoginKey, this.rememberLogin == true ? 'true' : 'false');\n                localStorage.setItem(hasServerSavedAuthenticationKey,\n                    this.hasServerSavedAuthentication == true ? 'true' : 'false');\n            },\n            hasStoredAuthenticationDetails: function () {\n                return !isEmpty(this.connectionType) && !isEmpty(this.configuration);\n            },\n            getActiveConfiguration: function () {\n                var activeConfiguration = this.configuration[this.connectionType];\n                if (typeof(activeConfiguration.port) != 'undefined' && activeConfiguration.port != null)\n                    activeConfiguration.port = parseInt(activeConfiguration.port);\n                return activeConfiguration;\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('BreadcrumbController', BreadcrumbController);\n\n    BreadcrumbController.$inject = ['$scope', '$rootScope', 'jQuery'];\n\n    function BreadcrumbController($scope, $rootScope, jQuery) {\n        var vm = this;\n\n        vm.pathComponents = [];\n        vm.hasLeadingSlash = false;\n        vm.renderBreadcrumbs = renderBreadcrumbs;\n\n        this.setPath = setPath;\n        this.changeDirectoryToItem = changeDirectoryToItem;\n\n        $scope.$on('directory-changed', directoryChanged);\n\n        $scope.$on(\"logout\", function(){\n            vm.setPath(\"/\");\n        });\n\n        jQuery(window).resize(function () {\n            vm.renderBreadcrumbs();\n        });\n\n        function linkClick(ev) {\n            ev.preventDefault();\n            vm.changeDirectoryToItem(jQuery(this).data('index'));\n            return false;\n        }\n\n        function makeBreadcrumbItem(linkText, index) {\n            var $span = jQuery('<li class=\"breadcrumb-display\"></li>');\n            var $link = jQuery('<a href=\"#\" data-index=\"' + index + '\"></a>').text(linkText + ' ');\n            $link.click(linkClick);\n            $span.append($link);\n            return $span;\n        }\n\n        function renderBreadcrumbs() {\n            var RIGHT_COMPONENT_BUFFER = 15, RIGHT_FULL_BUFFER = 120;\n            // TODO: cache these elements so they aren't looked up every time\n            var $breadcrumbContainer = jQuery(\"#breadcrumb-ol\"), $homeLink = jQuery(\"#breadcrumb__home_link\"),\n                historyButton = jQuery('#history > button'), windowWidth = jQuery(window).width(),\n                maxWidth = windowWidth - historyButton.width() - RIGHT_FULL_BUFFER, totalWidth = 0;\n            $breadcrumbContainer.find('.breadcrumb-display').remove();\n\n            var lastIndex = vm.pathComponents.length - 1, $rightSpan = null;\n\n            for (var i = lastIndex; i >= 0; --i) {\n                var component = vm.pathComponents[i];\n\n                var $span = makeBreadcrumbItem(component, i + 1);\n\n                if ($rightSpan === null)\n                    $rightSpan = $span;\n\n                $homeLink.after($span);\n\n                totalWidth += $span.outerWidth();\n\n                if (totalWidth > maxWidth) {\n                    if (i != lastIndex) {\n                        // only remove it if this isn't the first try\n                        $span.remove();\n                    }\n\n                    if (lastIndex != 0) {\n                        var $initialSpan = makeBreadcrumbItem(\"…\", i + 1);\n                        $homeLink.after($initialSpan);\n                    }\n                    break;\n                }\n            }\n\n            if (totalWidth > maxWidth) {\n                var charactersRemoved = 1;\n\n                while ($rightSpan.offset().left + $rightSpan.outerWidth() + RIGHT_COMPONENT_BUFFER > windowWidth) {\n                    ++charactersRemoved;\n                    var lastComponent = vm.pathComponents[lastIndex], lastComponentLength = lastComponent.length;\n                    var trimmedName = lastComponent.substr(0, lastComponentLength - charactersRemoved);\n                    trimmedName += \"…\";\n                    $rightSpan.text(trimmedName);\n                    if (lastComponentLength - charactersRemoved == 1)\n                        break; // this is safety to prevent infinite loops\n                }\n            }\n        }\n\n        function setPath(path) {\n            if (typeof(path) != 'string' || path.length == 0) {\n                vm.pathComponents = [];\n                vm.hasLeadingSlash = false;\n                return;\n            }\n\n            vm.hasLeadingSlash = path.substr(0, 1) == '/';\n\n            if (path == '/')\n                vm.pathComponents = [];\n            else {\n                vm.pathComponents = path.split('/');\n                if (vm.pathComponents[0] == '')\n                    vm.pathComponents.splice(0, 1);\n\n                if (vm.pathComponents[vm.pathComponents.length - 1] == '')\n                    vm.pathComponents.splice(vm.pathComponents.length - 1, 1);\n            }\n\n            vm.renderBreadcrumbs();\n        }\n\n        function changeDirectoryToItem(itemIndex) {\n            var joinedPath = '';\n            if (itemIndex != 0)\n                joinedPath = vm.pathComponents.slice(0, itemIndex).join('/');\n\n            var newPath = (vm.hasLeadingSlash ? '/' : '') + joinedPath;\n            $rootScope.$broadcast('change-directory', newPath);\n        }\n\n        function directoryChanged(ev, path) {\n            vm.setPath(path);\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('codeMirrorFactory', codeMirrorFactory);\n\n    codeMirrorFactory.$inject = ['$window'];\n\n    function codeMirrorFactory($window) {\n        var _jQuery = $window.jQuery; // can't inject factory into factory it seems\n        return {\n            jQuery: _jQuery, // for reference in tests & mocking\n            loadedModes: [],\n            convertFilenameToMode: function (fileName) {\n                var fileExtension = extractFileExtension(fileName);\n\n                var modeLookup = {\n                    htm: 'htmlmixed',\n                    html: 'htmlmixed',\n                    php: 'php',\n                    asp: 'htmlembedded',\n                    aspx: 'htmlembedded',\n                    js: 'javascript',\n                    css: 'css',\n                    xhtml: 'htmlmixed',\n                    cfm: 'htmlembedded',\n                    pl: 'perl',\n                    py: 'python',\n                    c: 'clike',\n                    cpp: 'clike',\n                    rb: 'ruby',\n                    java: 'java',\n                    xml: 'xml'\n                };\n\n                return modeLookup.hasOwnProperty(fileExtension) ? modeLookup[fileExtension] : null;\n            },\n            getModeDependencies: function (modeName) {\n                var dependencyLookup = {\n                    'htmlmixed': ['xml', 'javascript', 'css'],\n                    'php': ['xml', 'javascript', 'css', 'htmlmixed', 'clike']\n                    // todo: make these work recursively instead of coding all deps in\n                };\n\n                return dependencyLookup.hasOwnProperty(modeName) ? dependencyLookup[modeName] : null;\n            },\n            generateModePath: function (modeName) {\n                return CM_MODE_BASE + modeName + \"/\" + modeName + '.js';\n            }, setupCodeMirror: function (modeName, editorElement, postSetupCallback) {\n                var cm = CodeMirror.fromTextArea(editorElement, {\n                    value: editorElement.value,\n                    mode: modeName,\n                    lineNumbers: true,\n                    lineWrapping: true\n                });\n\n                postSetupCallback(cm);\n            }, postScriptLoad: function (modeName, editorElement, postSetupCallback) {\n                if (this.loadedModes.indexOf(modeName) == -1)\n                    this.loadedModes.push(modeName);\n\n                this.setupCodeMirror(modeName, editorElement, postSetupCallback);\n            }, loadModeAfterDependencies: function (modeName, editorElement, postSetupCallback) {\n                if (this.loadedModes.indexOf(modeName) != -1) {\n                    this.setupCodeMirror(modeName, editorElement, postSetupCallback);\n                    return;\n                }\n                var _this = this;\n                this.jQuery.getScript(this.generateModePath(modeName), function () {\n                    _this.postScriptLoad.call(_this, modeName, editorElement, postSetupCallback);\n                });\n            }, initiateCodeMirror: function (modeName, editorElement, postSetupCallback) {\n                var dependencies = this.getModeDependencies(modeName);\n\n                var neededDependencies = [];\n\n                if (dependencies != null) {\n                    for (var i = 0; i < dependencies.length; ++i)\n                        if (this.loadedModes.indexOf(dependencies[i]) == -1)\n                            neededDependencies.push(dependencies[i]);\n                }\n\n                if (neededDependencies.length == 0)\n                    this.loadModeAfterDependencies(modeName, editorElement, postSetupCallback);\n                else {\n                    var dependencyName = neededDependencies[0], _this = this;\n\n                    this.jQuery.getScript(this.generateModePath(dependencyName), function () {\n                        _this.loadedModes.push(dependencyName);\n                        _this.initiateCodeMirror.call(_this, modeName, editorElement, postSetupCallback);\n                    });\n                }\n            }\n        };\n    }\n}());\n\n","(function(){\n    angular.module('MonstaFTP').factory('configurationFactory', configurationFactory);\n\n    configurationFactory.$inject = ['connectionFactory', '$q', '$rootScope'];\n\n    function configurationFactory(connectionFactory, $q, $rootScope) {\n        var factory = {\n            getSystemConfiguration: getSystemConfiguration,\n            saveApplicationSettings: saveApplicationSettings,\n            setApplicationSetting: setApplicationSetting,\n            getApplicationSetting: getApplicationSetting\n        }, promise = null, lastRequestFailed = false, config = null;\n\n        function getSystemConfiguration() {\n            if(promise === null || lastRequestFailed)\n                promise = connectionFactory.getSystemVars().then(requestSuccess, requestFailure);\n\n            return promise;\n        }\n\n        function requestSuccess(response) {\n            config = response.data.data;\n            return config;\n        }\n\n        function requestFailure(response) {\n            lastRequestFailed = true;\n            return $q.reject(response);\n        }\n\n        function saveApplicationSettings() {\n            return connectionFactory.setApplicationSettings(config.applicationSettings);\n        }\n\n        function setApplicationSetting(key, value) {\n            if (config == null)\n                return;\n\n            if (config.applicationSettings == undefined)\n                config.applicationSettings = {};\n\n            var keyChanged = config.applicationSettings[key] != value;\n\n            config.applicationSettings[key] = value;\n\n            if(keyChanged)\n                $rootScope.$broadcast('configuration:key-changed', key, value);\n        }\n\n        function getApplicationSetting(key) {\n            if(config == null)\n                return null;\n\n            return config.applicationSettings[key];\n        }\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('localConfigurationFactory', localConfigurationFactory);\n\n    localConfigurationFactory.$inject = ['configurationFactory', '$rootScope'];\n\n    function localConfigurationFactory(configurationFactory, $rootScope) {\n        var factory = {\n            getApplicationSettings: getApplicationSettings,\n            getConfigurationItem: getConfigurationItem,\n            setConfigurationItem: setConfigurationItem\n        };\n\n        var isLocalStorageSupported = null, inMemoryStorage = {}, applicationSettings = {};\n\n        function localStorageSupported() {\n            if (isLocalStorageSupported == null) {\n                var testKey = 'test', storage = window.localStorage;\n                try {\n                    storage.setItem(testKey, '1');\n                    storage.removeItem(testKey);\n                    isLocalStorageSupported = true;\n                } catch (error) {\n                    isLocalStorageSupported = false;\n                }\n            }\n            return isLocalStorageSupported;\n        }\n\n        function getItemFromLocalStorage(key) {\n            var rawItem = localStorage.getItem(key);\n\n            if (typeof (rawItem) == \"string\")\n                return JSON.parse(rawItem);\n\n            return rawItem;\n        }\n\n        function storeItemInLocalStorage(key, item) {\n            localStorage.setItem(key, JSON.stringify(item));\n        }\n\n        function storeItem(key, item) {\n            key = \"monsta-setting-\" + key;\n            if (localStorageSupported())\n                storeItemInLocalStorage(key, item);\n            else\n                inMemoryStorage[key] = item;\n        }\n\n        function getItem(key) {\n            key = \"monsta-setting-\" + key;\n            if (localStorageSupported())\n                return getItemFromLocalStorage(key);\n\n            return inMemoryStorage[key];\n        }\n\n        function getConfigurationItem(key) {\n            if(getItem(key) == undefined)\n                return applicationSettings[key];\n\n            return getItem(key);\n        }\n\n        function getApplicationSettings() {\n            return configurationFactory.getSystemConfiguration().then(function (systemVars) {\n                applicationSettings = systemVars.applicationSettings;\n            }, requestFailure);\n        }\n\n        function setConfigurationItem(key, item) {\n            var keyChanged = getItem(key) != item;\n\n            storeItem(key, item);\n\n            if(keyChanged)\n                $rootScope.$broadcast('configuration:key-changed', key, item);\n        }\n\n        function requestFailure(response) {\n            return $q.reject(response);\n        }\n\n        return factory;\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').factory('connectionFactory', connectionFactory);\n\n    connectionFactory.$inject = ['$http', 'authenticationFactory'];\n\n    function connectionFactory($http, authenticationFactory) {\n        var NETWORK_TIMEOUT_SECONDS = 30;\n        var IGNORE_TIMEOUT_TYPES = [\n            \"downloadMultipleFiles\",\n            \"fetchRemoteFile\",\n            \"copy\",\n            \"extractArchive\",\n            \"deleteMultiple\"\n        ];\n\n        var addRemoteFileRequest = function (request, actionName, remotePath) {\n            request['actionName'] = actionName;\n            request['context'] = {\n                'remotePath': remotePath\n            };\n        };\n\n        var addSourceDestinationRequest = function (request, actionName, source, destination) {\n            request['actionName'] = actionName;\n            request['context'] = {\n                'source': source,\n                'destination': destination\n            };\n        };\n\n        return {\n            _sendRequest: function (requestBody) {\n                var timeout = IGNORE_TIMEOUT_TYPES.indexOf(requestBody.actionName) == -1 ? NETWORK_TIMEOUT_SECONDS * 1000 : null;\n\n                var req = {\n                    method: 'POST',\n                    url: API_PATH,\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    transformRequest: function (obj) {\n                        var str = [];\n                        for (var p in obj) {\n                            if (!obj.hasOwnProperty(p))\n                                continue;\n                            str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(JSON.stringify(obj[p])));\n                        }\n                        return str.join(\"&\");\n                    },\n                    timeout: timeout,\n                    data: {\n                        request: requestBody\n                    }\n                };\n\n                if (DEBUG)\n                    console.log(req);\n\n                return $http(req);\n            },\n            getRequestBody: function () {\n                var config = angular.copy(authenticationFactory.getActiveConfiguration());\n\n                var defaultsForConnectionType = g_ConnectionDefaults[authenticationFactory.connectionType];\n\n                if (defaultsForConnectionType) {\n                    for (var defaultName in defaultsForConnectionType) {\n                        if (!defaultsForConnectionType.hasOwnProperty(defaultName))\n                            continue;\n\n                        if (config[defaultName] == null || config[defaultName] == undefined || config[defaultName] == '')\n                            config[defaultName] = defaultsForConnectionType[defaultName];\n                    }\n                }\n\n                return {\n                    connectionType: authenticationFactory.connectionType,\n                    configuration: config\n                };\n            },\n            getEmptyRequestBody: function () {\n                return {connectionType: null, configuration: null};\n            },\n            getListDirectoryRequest: function (request, path, showHidden) {\n                request['actionName'] = 'listDirectory';\n                request['context'] = {\n                    path: path,\n                    showHidden: showHidden\n                };\n            },\n            getFetchFileRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'fetchFile', remotePath);\n            },\n            getMakeDirectoryRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'makeDirectory', remotePath);\n            },\n            getDeleteDirectoryRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'deleteDirectory', remotePath);\n            },\n            getDeleteFileRequest: function (request, remotePath) {\n                addRemoteFileRequest(request, 'deleteFile', remotePath);\n            },\n            getCopyRequest: function (request, source, destination) {\n                addSourceDestinationRequest(request, 'copy', source, destination);\n            },\n            getRenameRequest: function (request, source, destination) {\n                addSourceDestinationRequest(request, 'rename', source, destination);\n            },\n            getChangePermissionsRequest: function (request, remotePath, mode) {\n                addRemoteFileRequest(request, 'changePermissions', remotePath);\n                request['context']['mode'] = mode;\n            },\n            getPutFileContentsRequest: function (request, remotePath, fileContents) {\n                request['actionName'] = 'putFileContents';\n                request['context'] = {remotePath: remotePath, fileContents: fileContents};\n            },\n            getGetFileContentsRequest: function (request, remotePath) {\n                request['actionName'] = 'getFileContents';\n                request['context'] = {remotePath: remotePath};\n            },\n            getTestConnectAndAuthenticateRequest: function (request) {\n                request['actionName'] = 'testConnectAndAuthenticate';\n                request['context'] = {}\n            },\n            getCheckSavedAuthExistsRequest: function (request) {\n                request['actionName'] = 'checkSavedAuthExists';\n                request['context'] = {};\n            },\n            getWriteSavedAuthRequest: function (request, password, authData) {\n                request['actionName'] = 'writeSavedAuth';\n                request['context'] = {\n                    password: password,\n                    authData: authData\n                };\n            },\n            getReadSavedAuthRequest: function (request, password) {\n                request['actionName'] = 'readSavedAuth';\n                request['context'] = {\n                    password: password\n                };\n            },\n            getReadLicenseRequest: function (request) {\n                request['actionName'] = 'readLicense';\n                request['context'] = {};\n            },\n            getGetSystemVarsRequest: function (request) {\n                request['actionName'] = 'getSystemVars';\n                request['context'] = {};\n            },\n            getFetchRemoteFileRequest: function (request, remoteSource, destinationDirectory) {\n                addSourceDestinationRequest(request, 'fetchRemoteFile', remoteSource, destinationDirectory);\n            },\n            getDownloadMultipleFilesRequest: function (request, baseDirectory, items) {\n                request['actionName'] = 'downloadMultipleFiles';\n                request['context'] = {baseDirectory: baseDirectory, items: items};\n            },\n            getSetApplicationSettingsRequest: function(request, applicationSettings){\n                request['actionName'] = 'setApplicationSettings';\n                request['context'] = {applicationSettings: applicationSettings};\n            },\n            getDeleteMultipleRequest: function (request, pathsAndTypes) {\n                request['actionName'] = 'deleteMultiple';\n                request['context'] = {pathsAndTypes: pathsAndTypes};\n            },\n            getExtractArchiveRequest: function (request, fileKey, fileIndexOffset, extractCount) {\n                request['actionName'] = 'extractArchive';\n                request['context'] = {fileKey: fileKey, fileIndexOffset: fileIndexOffset, extractCount: extractCount};\n            },\n            listDirectory: function (path, showHidden) {\n                this.requestBody = this.getRequestBody();\n                this.getListDirectoryRequest(this.requestBody, path, showHidden);\n                return this._sendRequest(this.requestBody);\n            },\n            fetchFile: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getFetchFileRequest(this.requestBody, path, true);\n                return this._sendRequest(this.requestBody);\n            },\n            rename: function (source, destination) {\n                this.requestBody = this.getRequestBody();\n                this.getRenameRequest(this.requestBody, source, destination);\n                return this._sendRequest(this.requestBody);\n            },\n            changePermissions: function (path, mode) {\n                this.requestBody = this.getRequestBody();\n                this.getChangePermissionsRequest(this.requestBody, path, mode);\n                return this._sendRequest(this.requestBody);\n            },\n            copy: function (source, destination) {\n                this.requestBody = this.getRequestBody();\n                this.getCopyRequest(this.requestBody, source, destination);\n                return this._sendRequest(this.requestBody);\n            },\n            deleteFile: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getDeleteFileRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            deleteDirectory: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getDeleteDirectoryRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            makeDirectory: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getMakeDirectoryRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            getFileContents: function (path) {\n                this.requestBody = this.getRequestBody();\n                this.getGetFileContentsRequest(this.requestBody, path);\n                return this._sendRequest(this.requestBody);\n            },\n            putFileContents: function (path, contents) {\n                this.requestBody = this.getRequestBody();\n                this.getPutFileContentsRequest(this.requestBody, path, contents);\n                return this._sendRequest(this.requestBody);\n            },\n            testConnectAndAuthenticate: function () {\n                this.requestBody = this.getRequestBody();\n                this.getTestConnectAndAuthenticateRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            },\n            checkSavedAuthExists: function () {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getCheckSavedAuthExistsRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            }, writeSavedAuth: function (password, authData) {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getWriteSavedAuthRequest(this.requestBody, password, authData);\n                return this._sendRequest(this.requestBody);\n            }, readSavedAuth: function (password) {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getReadSavedAuthRequest(this.requestBody, password);\n                return this._sendRequest(this.requestBody);\n            }, getLicense: function () {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getReadLicenseRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            }, getSystemVars: function () {\n                this.requestBody = this.getEmptyRequestBody();\n                this.getGetSystemVarsRequest(this.requestBody);\n                return this._sendRequest(this.requestBody);\n            }, fetchRemoteFile: function (remoteSource, destinationDirectory) {\n                this.requestBody = this.getRequestBody();\n                this.getFetchRemoteFileRequest(this.requestBody, remoteSource, destinationDirectory);\n                return this._sendRequest(this.requestBody);\n            }, downloadMultipleFiles: function (baseDirectory, items) {\n                this.requestBody = this.getRequestBody();\n                this.getDownloadMultipleFilesRequest(this.requestBody, baseDirectory, items);\n                return this._sendRequest(this.requestBody);\n            }, setApplicationSettings: function(applicationSettings) {\n                this.requestBody = this.getRequestBody();\n                this.getSetApplicationSettingsRequest(this.requestBody, applicationSettings);\n                return this._sendRequest(this.requestBody);\n            }, deleteMultiple: function(pathsAndTypes) {\n                this.requestBody = this.getRequestBody();\n                this.getDeleteMultipleRequest(this.requestBody, pathsAndTypes);\n                return this._sendRequest(this.requestBody);\n            }, extractArchive: function (fileKey, fileIndexOffset, extractCount) {\n                this.requestBody = this.getRequestBody();\n                this.getExtractArchiveRequest(this.requestBody, fileKey, fileIndexOffset, extractCount);\n                return this._sendRequest(this.requestBody);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('directorySortingFactory', directorySortingFactory);\n\n    function directorySortingFactory() {\n        var compareByDirectoryFlag = function (a, b) {\n            if (a.isDirectory == b.isDirectory)\n                return 0;\n\n            return a.isDirectory ? -1 : 1;\n        };\n\n        var compareByName = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            if (a.name.toLowerCase() == b.name.toLowerCase())\n                return 0;\n\n            return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n        };\n\n        var compareByModificationDate = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            if (a.modificationDate != b.modificationDate)\n                return a.modificationDate - b.modificationDate;\n\n            return compareByName(a, b);\n        };\n\n        var compareBySize = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            if (a.size != b.size)\n                return a.size - b.size;\n\n            return compareByName(a, b);\n        };\n\n        var compareByType = function (a, b) {\n            var directoryCompare = compareByDirectoryFlag(a, b);\n            if (directoryCompare != 0)\n                return directoryCompare;\n\n            var aExt = extractFileExtension(a.name), bExt = extractFileExtension(b.name);\n            if (aExt != bExt)\n                return aExt > bExt ? 1 : -1;\n\n            return compareByName(a, b);\n        };\n\n        return {\n            _handleReverse: function (sortedList, reverse) {\n                if (reverse)\n                    sortedList.reverse();\n\n                return sortedList;\n            },\n            sortByName: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareByName), reverse);\n            },\n            sortByModificationDate: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareByModificationDate), reverse);\n            },\n            sortBySize: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareBySize), reverse);\n            },\n            sortByType: function (unsortedList, reverse) {\n                return this._handleReverse(unsortedList.sort(compareByType), reverse);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('FileBrowserController', FileBrowserController);\n\n\n    FileBrowserController.$inject = ['$scope', '$rootScope', 'connectionFactory', 'uiOperationFactory', '$window',\n        'authenticationFactory', 'historyFactory', 'jQuery', '$timeout', 'directorySortingFactory', '$translate',\n        'selectedItemsFactory', 'configurationFactory', 'localConfigurationFactory', 'rowMouseTrackerFactory'];\n\n    function FileBrowserController($scope, $rootScope, connectionFactory, uiOperationFactory, $window,\n                                   authenticationFactory, historyFactory, jQuery, $timeout, directorySortingFactory,\n                                   $translate, selectedItemsFactory, configurationFactory, localConfigurationFactory,\n                                   rowMouseTrackerFactory) {\n        'use strict';\n        var vm = this, CONTEXT_MENU_X_OFFSET = 7, CONTEXT_MENU_Y_OFFSET = 14, CONTEXT_MENU_INSET = 20,\n            systemVars = null, loggedIn = false, editableExtensions = [], currentContextMenu = null,\n            preventRowDeselect = false;\n\n        $scope.directoryList = [];\n        $scope.selectedItems = selectedItemsFactory.getSelectedItems();\n        $scope.directoriesToDelete = null;\n        $scope.filesToDelete = null;\n        $scope.isHistoryChangeDir = false;\n        $scope.sortName = 'name';\n        $scope.sortReversed = false;\n        vm.renameSource = null;\n        vm.rowDragStartIndex = null;\n        vm.isMetaDrag = false;\n        vm.previousDragOverIndex = null;\n        vm.uiOperationFactory = uiOperationFactory;\n\n        vm.didLogout = didLogout;\n        vm.doReorder = doReorder;\n        vm.cancelDelete = cancelDelete;\n        vm.performPaste = performPaste;\n        vm.confirmDelete = confirmDelete;\n        vm.deleteComplete = deleteComplete;\n        vm.downloadSingle = downloadSingle;\n        vm.initiateRename = initiateRename;\n        vm.changeDirectory = changeDirectory;\n        vm.downloadMultiple = downloadMultiple;\n        vm.getSelectedPaths = getSelectedPaths;\n        vm.initiateMakeItem = initiateMakeItem;\n        vm.showDeleteConfirm = showDeleteConfirm;\n        vm.sortDirectoryList = sortDirectoryList;\n        vm.downloadFileAtPath = downloadFileAtPath;\n        vm.fileRenameCallback = fileRenameCallback;\n        vm.initiateCutOfPaths = initiateCutOfPaths;\n        vm.makeItemOKCallback = makeItemOKCallback;\n        vm.handleReorderChange = handleReorderChange;\n        vm.initiateCopyOfPaths = initiateCopyOfPaths;\n        vm.directoryListSuccess = directoryListSuccess;\n        vm.refreshDirectoryList = refreshDirectoryList;\n        vm.downloadSelectedFiles = downloadSelectedFiles;\n        vm.handleChangeDirectory = handleChangeDirectory;\n        vm.makeItemSuccessCallback = makeItemSuccessCallback;\n        vm.makeItemFailureCallback = makeItemFailureCallback;\n        vm.setupContextMenuEvents = setupContextMenuEvents;\n        vm.initiateCutOfSelectedPaths = initiateCutOfSelectedPaths;\n        vm.initiateCopyOfSelectedPaths = initiateCopyOfSelectedPaths;\n        vm.initiateChmodOfSelectedItems = initiateChmodOfSelectedItems;\n        vm.initiateDeleteOfSelectedPaths = initiateDeleteOfSelectedPaths;\n\n        vm.rowMouseDown = rowMouseDown;\n        vm.rowMouseMove = rowMouseMove;\n        vm.rowMouseUp = rowMouseUp;\n        vm.rowMouseLeave = rowMouseLeave;\n\n        vm.setEditableExtensions = setEditableExtensions;\n        vm.itemIsEditable = itemIsEditable;\n        vm.navigateUpOneLevel = navigateUpOneLevel;\n        vm.showProperties = showProperties;\n        vm.handleBodyClick = handleBodyClick;\n\n        $scope.reorder = function ($event) {\n            vm.handleReorderChange($event.currentTarget.getAttribute('data-sort-name'));\n        };\n\n        $scope.initiateDeleteOfItem = function (item) {\n            var itemPath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n\n            if (item.isDirectory == true) {\n                $scope.directoriesToDelete = [itemPath];\n                $scope.filesToDelete = null;\n            } else {\n                $scope.filesToDelete = [itemPath];\n                $scope.directoriesToDelete = null;\n            }\n\n            vm.showDeleteConfirm([item.name]);\n        };\n\n        $scope.downloadItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            vm.downloadFileAtPath(fullFilePath);\n        };\n\n        $scope.initiateCutOfItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            vm.initiateCutOfPaths([fullFilePath]);\n        };\n\n        $scope.initiateCopyOfItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            vm.initiateCopyOfPaths([fullFilePath]);\n        };\n\n        $scope.editItem = function (item) {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n            $rootScope.$broadcast('file-editor:edit', item.name, fullFilePath);\n        };\n\n        $scope.initiateRenameOfItem = function (item) {\n            vm.renameSource = item.name;\n            vm.initiateRename();\n        };\n\n        $scope.$on('change-directory:on-history', function (ev, path) {\n            $scope.isHistoryChangeDir = true;\n            vm.handleChangeDirectory(path);\n        });\n\n        $scope.$on('change-directory', function (ev, path) {\n            $scope.isHistoryChangeDir = false;\n            vm.handleChangeDirectory(path);\n        });\n\n        $scope.$on('change-directory:on-upload', function () {\n            vm.handleChangeDirectory(null, true)\n        });\n\n        $scope.handleClick = function ($event, index) {\n            $event.stopPropagation();\n            var item = this.item;\n            if (item.isDirectory) {\n                var directoryPath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n                vm.changeDirectory(directoryPath);\n            } else {\n                jQuery($event.target.parentNode.parentNode).find('.context-catcher-button').dropdown('toggle');\n                selectedItemsFactory.selectItem(index);\n            }\n        };\n\n        $scope.$on('footer-button-click', function (ev, buttonName) {\n            // todo: this doesn't necessarily need to be here as it's a $rootScope.$bc so available anywhere\n            switch (buttonName) {\n                case 'download':\n                    vm.downloadSelectedFiles();\n                    break;\n                case 'cut':\n                    vm.initiateCutOfSelectedPaths();\n                    break;\n                case 'copy':\n                    vm.initiateCopyOfSelectedPaths();\n                    break;\n                case 'paste':\n                    vm.performPaste();\n                    break;\n                case 'delete':\n                    vm.initiateDeleteOfSelectedPaths();\n                    break;\n                case 'new-folder':\n                    vm.initiateMakeItem('folder');\n                    break;\n                case 'new-file':\n                    vm.initiateMakeItem('file');\n                    break;\n                case 'chmod':\n                    vm.initiateChmodOfSelectedItems();\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        function postLogin() {\n            if (systemVars != null && loggedIn == true)\n                vm.changeDirectory(authenticationFactory.initialDirectory, true);\n        }\n\n        $scope.$on('login', function () {\n            loggedIn = true;\n            postLogin();\n        });\n\n        $scope.initiateChmodOfItem = function (item) {\n            $rootScope.$broadcast('modal-permissions:show', [uiOperationFactory.joinNameToCurrentDirectory(item.name)],\n                item.numericPermissions);\n        };\n\n        $scope.$on('selected-items-changed', function () {\n            $scope.selectedItems = selectedItemsFactory.getSelectedItems();\n        });\n\n        $scope.$on('logout', function () {\n            vm.didLogout();\n        });\n\n        $scope.$on('configuration:key-changed', function (ev, key, value) {\n            if (key == 'editableFileExtensions') {\n                vm.setEditableExtensions(value);\n            }\n        });\n\n        configurationFactory.getSystemConfiguration().then(systemVarLoadSuccess, systemVarLoadFailure);\n\n        function contextMenuStyleForEvent(ev) {\n            return {\n                position: \"fixed\",\n                left: ev.clientX + CONTEXT_MENU_X_OFFSET + \"px\",\n                top: ev.clientY + CONTEXT_MENU_Y_OFFSET + \"px\",\n                'margin-left': 0,\n                'margin-top': 0\n            };\n        }\n\n        function fixContextMenuOffScreen(event, $dropdownMenu) {\n            if (elementWillExtendPastWindowWidth(event.clientX + CONTEXT_MENU_X_OFFSET, $dropdownMenu))\n                $dropdownMenu.css(\"margin-left\", -($dropdownMenu.width() + CONTEXT_MENU_INSET));\n\n            if (elementWillExtendPastWindowHeight(event.clientY + CONTEXT_MENU_Y_OFFSET, $dropdownMenu))\n                $dropdownMenu.css(\"margin-top\", -($dropdownMenu.height() + CONTEXT_MENU_INSET));\n        }\n\n        function setupContextMenuEvents() {\n            jQuery(\".context-catcher-tr\").contextmenu(function (e) {\n                var $tr = jQuery(this);\n                var $dropdownMenu = $tr.find('.dropdown-menu').first();\n                var rowIndex = $tr.data('index');\n                preventRowDeselect = selectedItemsFactory.getSelectedItems().indexOf(rowIndex) != -1;\n                $dropdownMenu.css(contextMenuStyleForEvent(e));\n\n                jQuery(this).find('.context-catcher-button').dropdown('toggle');\n\n                fixContextMenuOffScreen(e, $dropdownMenu);\n\n                if([\"DIV\", \"TR\", \"TD\"].indexOf(e.target.tagName) == -1)\n                     selectedItemsFactory.selectItem(rowIndex);\n\n                return false;\n            });\n\n            var $fileToobar = jQuery('.file-toolbar');\n\n            $fileToobar.on('shown.bs.dropdown', function () {\n                var $dropdownMenu = jQuery(this).find('.dropdown-menu');\n                currentContextMenu = $dropdownMenu;\n                var $dropDownMenuParent = $dropdownMenu.parent().removeClass('dropup');\n\n                if ($dropdownMenu.css('position') == 'fixed')  // it was shown with rightclick so don't mess with it\n                    return;\n\n                if ($dropdownMenu.offset().top + $dropdownMenu.outerHeight() > jQuery(window).height() - jQuery(\"#footer\").height())\n                    $dropDownMenuParent.addClass('dropup');\n            });\n\n            $fileToobar.on('hidden.bs.dropdown', function () {\n                var $contextCatcherUl = jQuery(this).find('.dropdown-menu');\n                $contextCatcherUl.attr('style', null);\n                currentContextMenu = null;\n            });\n        }\n\n        function elementWillExtendPastWindowWidth(xOffset, $element) {\n            return xOffset + $element.width() > jQuery(window).width();\n        }\n\n        function elementWillExtendPastWindowHeight(yOffset, $element) {\n            return yOffset + $element.height() > jQuery(window).height()\n        }\n\n        function doReorder() {\n            $scope.directoryList = vm.sortDirectoryList($scope.directoryList, $scope.sortName, $scope.sortReversed);\n        }\n\n        function handleReorderChange(newSortName) {\n            $scope.sortReversed = newSortName == $scope.sortName ? !$scope.sortReversed : false;\n            $scope.sortName = newSortName;\n            vm.doReorder();\n        }\n\n        function sortDirectoryList(directoryList, sortName, sortReversed) {\n            var sortMethodName = null;\n            switch (sortName) {\n                case 'name':\n                    sortMethodName = 'sortByName';\n                    break;\n                case 'modified':\n                    sortMethodName = 'sortByModificationDate';\n                    break;\n                case 'size':\n                    sortMethodName = 'sortBySize';\n                    break;\n                case 'type':\n                    sortMethodName = 'sortByType';\n                    break;\n                default:\n                    break;\n            }\n\n            if (sortMethodName == null)\n                return directoryList;\n\n            return directorySortingFactory[sortMethodName](directoryList, sortReversed);\n        }\n\n        function directoryListSuccess(path, response, change) {\n            $scope.directoryList = vm.sortDirectoryList(response.data.data, $scope.sortName, $scope.sortReversed);\n            uiOperationFactory.currentDirectory = path;\n            selectedItemsFactory.clearSelection();\n\n            if (change) {\n                if (!$scope.isHistoryChangeDir)\n                    historyFactory.addEntry(uiOperationFactory.currentDirectory);\n                $scope.isHistoryChangeDir = false;\n                $rootScope.$broadcast('directory-changed', path);\n                authenticationFactory.initialDirectory = path;\n                authenticationFactory.saveSettings();\n            }\n            $timeout(function () {\n                vm.setupContextMenuEvents();\n                //DOM has finished rendering\n            });\n        }\n\n        function changeDirectory(path, isFirstLoad, allowTimeout) {\n            localConfigurationFactory.getApplicationSettings().then(\n                function () {\n                    var handleError;\n\n                    if (allowTimeout) {\n                        handleError = function () {\n                            // this is on upload finish which might fail sometimes but we don't care\n                        };\n                    } else {\n                        handleError = function (response) {\n                            if (isFirstLoad)\n                                vm.changeDirectory(\"/\");\n                            else\n                                showResponseError(response, 'directory change', $rootScope, $translate);\n                        };\n                    }\n\n                    connectionFactory.listDirectory(path, localConfigurationFactory.getConfigurationItem('showDotFiles')).then(\n                        function (response) {\n                            vm.directoryListSuccess(path, response, path != uiOperationFactory.currentDirectory);\n                        },\n                        handleError\n                    );\n                },\n                function (response) {\n                    showResponseError(response, 'application settings load', $rootScope, $translate);\n                });\n        }\n\n        function refreshDirectoryList() {\n            vm.changeDirectory(uiOperationFactory.currentDirectory);\n        }\n\n        function filesReadyForDownloadCallback(response) {\n            if (responseIsUnsuccessful(response)) {\n                showResponseError(response, 'file download', $rootScope, $translate);\n                return;\n            }\n\n            var fileKey = response.data.fileKey;\n            $window.location = DOWNLOAD_PATH + '?fileKey=' + fileKey;\n        }\n\n        function fileFetchFailureCallback(response) {\n            showResponseError(response, 'file download', $rootScope, $translate);\n            $rootScope.$broadcast('modal-prompt:clear-busy');\n        }\n\n        function downloadFileAtPath(path) {\n            connectionFactory.fetchFile(path).then(filesReadyForDownloadCallback, fileFetchFailureCallback);\n        }\n\n        function downloadMultiple() {\n            var selectedItems = selectedItemsFactory.getSelectedItems();\n            var itemNames = [];\n\n            selectedItems.map(function (itemIndex) {\n                itemNames.push($scope.directoryList[itemIndex].name);\n            });\n\n            connectionFactory.downloadMultipleFiles(uiOperationFactory.currentDirectory, itemNames).then(\n                filesReadyForDownloadCallback, fileFetchFailureCallback);\n        }\n\n        function downloadSingle() {\n            var fullFilePath = uiOperationFactory.joinNameToCurrentDirectory(\n                $scope.directoryList[selectedItemsFactory.getSelectedItems()[0]].name);\n            vm.downloadFileAtPath(fullFilePath);\n        }\n\n        function downloadSelectedFiles() {\n            var selectedItems = selectedItemsFactory.getSelectedItems();\n            if (selectedItems.length > 1 || $scope.directoryList[selectedItems[0]].isDirectory) {\n                vm.downloadMultiple();\n            } else {\n                vm.downloadSingle();\n            }\n        }\n\n        function getSelectedPaths() {\n            var selectedPathCopy = selectedItemsFactory.getSelectedItems().slice();\n            selectedPathCopy.sort(function (a, b) {\n                return a - b;\n            });\n            return selectedPathCopy.map(function (pathIndex) {\n                return uiOperationFactory.joinNameToCurrentDirectory($scope.directoryList[pathIndex].name);\n            });\n        }\n\n        function initiateCopyOfPaths(paths) {\n            if (paths.length == 0)\n                return;\n\n            uiOperationFactory.setCopySource(paths);\n        }\n\n        function initiateCutOfPaths(paths) {\n            if (paths.length == 0)\n                return;\n\n            uiOperationFactory.setCutSource(paths);\n        }\n\n        function initiateCutOfSelectedPaths() {\n            vm.initiateCutOfPaths(vm.getSelectedPaths());\n        }\n\n        function initiateCopyOfSelectedPaths() {\n            vm.initiateCopyOfPaths(vm.getSelectedPaths());\n        }\n\n        function performPaste() {\n            if (uiOperationFactory.cutSource == null && uiOperationFactory.copySource == null)\n                return;\n\n            var sourcePaths, operation;\n\n            if (uiOperationFactory.cutSource != null) {\n                sourcePaths = uiOperationFactory.cutSource;\n                operation = 'rename';\n            } else {\n                sourcePaths = uiOperationFactory.copySource;\n                operation = 'copy';\n            }\n\n            for (var pathIndex = 0; pathIndex < sourcePaths.length; ++pathIndex) {\n                var sourcePath = sourcePaths[pathIndex];\n                var splitSourceFileName = sourcePath.split('/');\n                var sourceFileName = splitSourceFileName[splitSourceFileName.length - 1];\n                var destinationPath = uiOperationFactory.joinNameToCurrentDirectory(sourceFileName);\n                connectionFactory[operation](sourcePath, destinationPath).then(function () {\n                    uiOperationFactory.pasteComplete();\n                    vm.changeDirectory(uiOperationFactory.currentDirectory);\n                    if (operation == 'rename')\n                        $rootScope.$broadcast('items-moved', [[sourcePath, destinationPath]]);\n                }, function (response) {\n                    showResponseError(response, 'file paste', $rootScope, $translate);\n                });\n            }\n        }\n\n        function deleteComplete() {\n            var allItems = [].concat($scope.directoriesToDelete || [], $scope.filesToDelete || []);\n\n            $rootScope.$broadcast(\"items-deleted\", allItems);\n\n            $scope.directoriesToDelete = null;\n            $scope.filesToDelete = null;\n            vm.changeDirectory(uiOperationFactory.currentDirectory);\n        }\n\n        function confirmDelete() {\n            var itemsToDelete = [];\n\n            if ($scope.filesToDelete != null) {\n                $scope.filesToDelete.map(function (path) {\n                    if (uiOperationFactory.isCutOrCopySource(path))\n                        uiOperationFactory.clearCutAndCopySource();\n\n                    itemsToDelete.push([path, false]);\n                });\n            }\n\n            if ($scope.directoriesToDelete != null) {\n                $scope.directoriesToDelete.map(function (path) {\n                    if (uiOperationFactory.isCutOrCopySource(path))\n                        uiOperationFactory.clearCutAndCopySource();\n\n                    itemsToDelete.push([path, true]);\n                });\n            }\n            connectionFactory.deleteMultiple(itemsToDelete).then(function () {\n                vm.deleteComplete();\n            }, function (response) {\n                showResponseError(response, 'item deletion', $rootScope, $translate);\n                vm.deleteComplete();\n            });\n\n            /*\n             the inner function is needed for testing instead of calling connectionFactory.deleteFile directly in the map\n             because the function is actually called with 3 args (item, index, arr) and the real function discards the\n             second 2. the spy object doesn't know this so thinks its being called wrong\n             */\n        }\n\n        function cancelDelete() {\n            $scope.filesToDelete = null;\n            $scope.directoriesToDelete = null;\n        }\n\n        function showTranslatedDeleteConfirm(translatedMessage) {\n            $rootScope.$broadcast('modal-confirm:show', translatedMessage, vm.confirmDelete, vm.cancelDelete);\n        }\n\n        function showDeleteConfirm(fileNames) {\n            $translate('DELETE_CONFIRM_MESSAGE', {\n                item_count: fileNames.length\n            }).then(function (translatedMessage) {\n                showTranslatedDeleteConfirm(translatedMessage);\n            }, function (message) {\n                showTranslatedDeleteConfirm(message);\n            });\n        }\n\n        function initiateDeleteOfSelectedPaths() {\n            var selectedItems = selectedItemsFactory.getSelectedItems();\n            if (selectedItems.length == 0)\n                return;\n\n            var fileNames = [];\n\n            $scope.directoriesToDelete = [];\n            $scope.filesToDelete = [];\n\n            for (var i = 0; i < selectedItems.length; ++i) {\n                var itemIndex = selectedItems[i];\n                var item = $scope.directoryList[itemIndex];\n\n                fileNames.push(item.name);\n\n                var fullPath = uiOperationFactory.joinNameToCurrentDirectory(item.name);\n\n                if (item.isDirectory)\n                    $scope.directoriesToDelete.push(fullPath);\n                else\n                    $scope.filesToDelete.push(fullPath);\n            }\n\n            vm.showDeleteConfirm(fileNames);\n        }\n\n        function clearNewItemTempVars() {\n            vm.newItemPath = null;\n            $scope.makeItemType = null;\n        }\n\n        function makeItemSuccessCallback() {\n            $rootScope.$broadcast('modal-prompt:hide');\n            vm.refreshDirectoryList();\n\n            if ($scope.makeItemType == 'folder') {\n                clearNewItemTempVars();\n                return;\n            }\n\n            localConfigurationFactory.getApplicationSettings().then(function () {\n                var shouldEditItem = localConfigurationFactory.getConfigurationItem('editNewFilesImmediately');\n                if (shouldEditItem && vm.itemIsEditable(false, vm.newItemPath)) {\n                    var splitPath = vm.newItemPath.split('/');\n                    $rootScope.$broadcast('file-editor:edit', splitPath[splitPath.length - 1], vm.newItemPath);\n                }\n                clearNewItemTempVars();\n            }, function (response) {\n                clearNewItemTempVars();\n                showResponseError(response, 'rename', $rootScope, $translate);\n            });\n        }\n\n        function makeItemFailureCallback(errorMessage, context) {\n            $rootScope.$broadcast('modal-prompt:clear-busy');\n            $translate(['NEW_ITEM_FAILURE_PRECEDING_MESSAGE', errorMessage], context).then(function (translations) {\n                displayPromptError(translations['NEW_ITEM_FAILURE_PRECEDING_MESSAGE'] + ' ' +\n                    translations[errorMessage])\n            });\n        }\n\n        function getFileNameError(fileName) {\n            if (!validateFileNameNonEmpty(fileName))\n                return 'FILE_NAME_EMPTY_MESSAGE';\n\n            if (!validateFileNameContainsNoSlash(fileName))\n                return 'FILE_NAME_CONTAINS_SLASH_MESSAGE';\n\n            return null;\n        }\n\n        function translateAndDisplayPromptError(promptErrorID, context) {\n            $translate(promptErrorID, context).then(displayPromptError, displayPromptError);\n\n        }\n\n        function makeItemOKCallback(itemName) {\n            $rootScope.$broadcast('modal-prompt:clear-error');\n\n            var itemNameError = getFileNameError(itemName);\n\n            if (itemNameError != null) {\n                translateAndDisplayPromptError(itemNameError, {item_type: $scope.makeItemType});\n                return;\n            }\n\n            vm.newItemPath = uiOperationFactory.joinNameToCurrentDirectory(itemName);\n\n            $rootScope.$broadcast('modal-prompt:set-busy', 'CREATING_ACTIVITY_STATUS');\n\n            var promise;\n            if ($scope.makeItemType == 'folder')\n                promise = connectionFactory.makeDirectory(vm.newItemPath);\n            else if ($scope.makeItemType == 'file')\n                promise = connectionFactory.putFileContents(vm.newItemPath, '');\n\n            promise.then(function () {\n                vm.makeItemSuccessCallback();\n            }, function (response) {\n                var action = $scope.makeItemType + ' make';\n                vm.makeItemFailureCallback(parseErrorResponse(response, action), {action: action});\n            });\n        }\n\n        function initiateMakeItem(itemType) {\n            $scope.makeItemType = itemType;\n            var ucItemType = $scope.makeItemType.capitalizeFirstLetter();\n\n            $translate(['NEW_ITEM_PROMPT_TITLE', 'NEW_ITEM_NAME_PLACEHOLDER'], {item_type: ucItemType}).then(\n                function (translations) {\n                    $rootScope.$broadcast('modal-prompt:show', translations.NEW_ITEM_PROMPT_TITLE, '',\n                        translations.NEW_ITEM_NAME_PLACEHOLDER, vm.makeItemOKCallback);\n                });\n        }\n\n        function initiateChmodOfSelectedItems() {\n            if ($scope.selectedItems.length == 0)\n                return;\n\n            var itemPaths = [], numericPerms = -1;\n\n            $scope.selectedItems.map(function (itemIndex) {\n                var item = $scope.directoryList[itemIndex];\n                itemPaths.push(uiOperationFactory.joinNameToCurrentDirectory(item.name));\n                if (numericPerms == -1)\n                    numericPerms = item.numericPermissions;\n                else if (item.numericPermissions != numericPerms)\n                    numericPerms = 0;\n            });\n\n            $rootScope.$broadcast('modal-permissions:show', itemPaths, numericPerms);\n        }\n\n        function displayPromptError(error) {\n            $rootScope.$broadcast('modal-prompt:set-error', error);\n        }\n\n        function fileRenameCallback(finalValue, initialValue) {\n            $rootScope.$broadcast('modal-prompt:clear-error');\n\n            if (initialValue == finalValue)\n                return;\n\n            var itemNameError = getFileNameError(finalValue);\n\n            if (itemNameError != null) {\n                translateAndDisplayPromptError(itemNameError, {item_type: 'item'});\n                return;\n            }\n\n            $rootScope.$broadcast('modal-prompt:set-busy', 'RENAMING_ACTIVITY_STATUS');\n\n            var sourcePath = uiOperationFactory.joinNameToCurrentDirectory(initialValue);\n            var destinationPath = uiOperationFactory.joinNameToCurrentDirectory(finalValue);\n            connectionFactory.rename(sourcePath, destinationPath).then(\n                function (response) {\n                    $rootScope.$broadcast('modal-prompt:clear-busy');\n                    if (responseIsUnsuccessful(response)) {\n                        showResponseError(response, 'rename', $rootScope, $translate);\n                        return;\n                    }\n                    vm.refreshDirectoryList();\n                    $rootScope.$broadcast('items-moved', [[sourcePath, destinationPath]]);\n                    $rootScope.$broadcast('modal-prompt:hide');\n                },\n                function (response) {\n                    $rootScope.$broadcast('modal-prompt:clear-busy');\n                    showResponseError(response, 'rename', $rootScope, $translate);\n                }\n            );\n            vm.renameSource = null;\n        }\n\n        function showRenamePrompt(translations) {\n            $rootScope.$broadcast('modal-prompt:show', translations.RENAME_FILE_PROMPT_TITLE, vm.renameSource,\n                translations.RENAME_FILE_NAME_PLACEHOLDER, vm.fileRenameCallback);\n        }\n\n        function initiateRename() {\n            $translate(['RENAME_FILE_PROMPT_TITLE', 'RENAME_FILE_NAME_PLACEHOLDER']).then(showRenamePrompt,\n                showRenamePrompt);\n        }\n\n        function handleChangeDirectory(path, allowTimeout) {\n            if (path == uiOperationFactory.currentDirectory)\n                return;\n            if (typeof path == 'undefined' || path == null)\n                path = uiOperationFactory.currentDirectory;\n            vm.changeDirectory(path, false, allowTimeout);\n        }\n\n        function didLogout() {\n            uiOperationFactory.currentDirectory = null;\n            authenticationFactory.initialDirectory = null;\n            $scope.directoryList = [];\n            historyFactory.clearHistory();\n        }\n\n        function systemVarLoadSuccess(vars) {\n            systemVars = vars;\n            vm.setEditableExtensions(configurationFactory.getApplicationSetting('editableFileExtensions'));\n            postLogin();\n        }\n\n        function systemVarLoadFailure(response) {\n            showResponseError(response, \"system var load\", $rootScope, $translate);\n        }\n\n        function setEditableExtensions(editableExtensionStr) {\n            var splitExtensions = editableExtensionStr.split(\",\");\n            editableExtensions = [];\n            for (var i = 0; i < splitExtensions.length; ++i) {\n                var trimmedExtension = splitExtensions[i].trim().toLowerCase();\n\n                if (trimmedExtension != '')\n                    editableExtensions.push(trimmedExtension);\n            }\n        }\n\n        function itemIsEditable(isDirectory, itemPath) {\n            if (isDirectory)\n                return false;\n\n            var splitPath = itemPath.split('/');\n            var itemName = splitPath[splitPath.length - 1];\n            var extension = extractFileExtension(itemName);\n\n            if (extension == '')\n                return true;\n\n            return editableExtensions.indexOf(extension) != -1;\n        }\n\n        function navigateUpOneLevel() {\n            vm.changeDirectory(parentPath(uiOperationFactory.currentDirectory), false);\n        }\n\n        function showProperties(item) {\n            $rootScope.$broadcast('modal-properties:show', item);\n        }\n\n        function handleBodyClick($event) {\n            if ($event.which == 3 && $event.target.id == \"files\") {// right click\n                $scope.hasPasteSource = uiOperationFactory.cutSource != null || uiOperationFactory.copySource != null;\n\n                if (currentContextMenu)\n                    currentContextMenu.dropdown('toggle');\n\n                var $extraDropdownButton = jQuery('#extras-dropdown-button');\n\n                $extraDropdownButton.dropdown('toggle');\n                var $dropdownMenu = jQuery('#extras-dropdown');\n                $dropdownMenu.css(contextMenuStyleForEvent($event));\n\n                fixContextMenuOffScreen($event, $dropdownMenu);\n\n                return false;\n            }\n        }\n\n        function rowMouseDown($event) {\n            rowMouseTrackerFactory.mouseDown($event);\n        }\n\n        function rowMouseMove($event, $index) {\n            rowMouseTrackerFactory.mouseMove($event, $index);\n        }\n\n        function rowMouseUp($index) {\n            rowMouseTrackerFactory.mouseUp($index, preventRowDeselect);\n            preventRowDeselect = false;\n        }\n\n        function rowMouseLeave($event) {\n            rowMouseTrackerFactory.mouseLeave($event);\n        }\n    }\n}());","(function(){\n    angular.module('MonstaFTP').factory('rowMouseTrackerFactory', rowMouseTrackerFactory);\n\n    rowMouseTrackerFactory.$inject = ['selectedItemsFactory'];\n\n    function rowMouseTrackerFactory(selectedItemsFactory) {\n        var factory = {}, mouseIsDown = false, mouseMovedWhileDown = false, mouseDownEvent,\n            rowClickTargetElementNames = ['DIV', 'TR', 'TD'], rowDragStartIndex = null, isMetaDrag = false;\n\n        factory.mouseDown = mouseDown;\n        factory.mouseUp = mouseUp;\n        factory.mouseMove = mouseMove;\n        factory.mouseLeave = mouseLeave;\n\n        factory.mouseClick = mouseClick;\n        factory.mouseDrag = mouseDrag;\n        factory.startDrag = startDrag;\n\n        function mouseDown($event) {\n            mouseIsDown = true;\n            mouseDownEvent = $event;\n            mouseMovedWhileDown = false;\n        }\n\n        function mouseUp(rowIndex, preventRowDeselect) {\n            if (mouseIsDown && !mouseMovedWhileDown && !preventRowDeselect) {\n                factory.mouseClick(mouseDownEvent, rowIndex);\n            }\n            mouseIsDown = false;\n            rowDragStartIndex = null;\n        }\n\n        function mouseMove($event, rowIndex) {\n            if(mouseIsDown) {\n                mouseMovedWhileDown = true;\n                if(rowDragStartIndex == rowIndex)\n                    return;\n\n                if (rowDragStartIndex == null)\n                    factory.startDrag($event, rowIndex);\n                else\n                    factory.mouseDrag(rowIndex);\n\n                rowDragStartIndex = rowIndex;\n            }\n        }\n\n        function mouseLeave($event) {\n            if (rowClickTargetElementNames.indexOf($event.target.tagName) != -1)\n                return true;\n\n            rowDragStartIndex = null;\n        }\n\n        function mouseDrag(rowIndex) {\n            if (isMetaDrag)\n                selectedItemsFactory.metaDraggedToIndex(rowIndex);\n            else\n                selectedItemsFactory.draggedToIndex(rowIndex);\n        }\n\n        function mouseClick($event, itemIndex) {\n            if (rowClickTargetElementNames.indexOf($event.target.tagName) == -1)\n                return true;\n            $event.preventDefault();\n            if ($event.ctrlKey || $event.metaKey)\n                selectedItemsFactory.metaClickAtIndex(itemIndex);\n            else if ($event.shiftKey)\n                selectedItemsFactory.shiftClickAtIndex(itemIndex);\n            else\n                selectedItemsFactory.standardClickAtIndex(itemIndex);\n        }\n\n        function startDrag($event, rowIndex) {\n            if ($event.metaKey || $event.ctrlKey) {\n                isMetaDrag = true;\n                selectedItemsFactory.startMetaDraggingAtIndex(rowIndex);\n            } else {\n                isMetaDrag = false;\n                selectedItemsFactory.startDraggingAtIndex(rowIndex);\n            }\n        }\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('selectedItemsFactory', selectedItemsFactory);\n\n    selectedItemsFactory.$inject = ['$rootScope'];\n\n    function selectedItemsFactory($rootScope) {\n        var selectedItems = [];\n        var initialSelectedIndex = 0;\n        var dragStartIndex = 0;\n        var metaDragStartIndex = 0;\n        var metaSelectedItems;\n\n        var factory = {\n            getSelectedItems: getSelectedItems,\n            standardClickAtIndex: standardClickAtIndex,\n            shiftClickAtIndex: shiftClickAtIndex,\n            metaClickAtIndex: metaClickAtIndex,\n            clearSelection: clearSelection,\n            startDraggingAtIndex: startDraggingAtIndex,\n            draggedToIndex: draggedToIndex,\n            startMetaDraggingAtIndex: startMetaDraggingAtIndex,\n            metaDraggedToIndex: metaDraggedToIndex,\n            selectItem: selectItem\n        };\n\n        function generateRange(start, stop) {\n            if (start == stop)\n                return [start];\n\n            var delta = 1;\n\n            if (start > stop)\n                delta = -1;\n\n            var range = [start];\n\n            do {\n                start += delta;\n                range.push(start);\n            } while(start != stop);\n\n            return range;\n        }\n\n        function getSelectedItems() {\n            return selectedItems;\n        }\n\n        function standardClickAtIndex(index) {\n            if(selectedItems.length == 1 && selectedItems[0] == index) {\n                selectedItems = [];\n                broadcastSelectionChange();\n                return;\n            }\n\n            if(selectedItems.indexOf(index) == -1 || selectedItems.length > 1) {\n                // this is just for speed, we could do the below all the time but will be a little fast to skip it\n                // unless it's actually necessary\n                selectedItems = [index];\n                initialSelectedIndex = index;\n                broadcastSelectionChange();\n            }\n        }\n\n        function shiftClickAtIndex(index) {\n            if(selectedItems.length != 1 || selectedItems.indexOf(index) == -1) {\n                selectedItems = generateRange(initialSelectedIndex, index);\n                broadcastSelectionChange();\n            }\n        }\n\n        function metaClickAtIndex(index) {\n            var indexOfIndex = selectedItems.indexOf(index);\n\n            if(indexOfIndex == -1)\n                selectedItems.push(index);\n            else\n                selectedItems.splice(indexOfIndex, 1);\n            broadcastSelectionChange();\n        }\n\n        function clearSelection() {\n            selectedItems = [];\n            broadcastSelectionChange();\n        }\n\n        function startDraggingAtIndex(index) {\n            clearSelection();\n            dragStartIndex = index;\n            selectedItems = [index];\n            broadcastSelectionChange();\n        }\n\n        function draggedToIndex(index) {\n            selectedItems = generateRange(dragStartIndex, index);\n            broadcastSelectionChange();\n        }\n\n        function startMetaDraggingAtIndex(index){\n            metaDragStartIndex = index;\n            metaSelectedItems = angular.copy(selectedItems);\n        }\n\n        function metaDraggedToIndex(index) {\n            var newSelectedItems = angular.copy(metaSelectedItems),\n                lowerBound = Math.min(index, metaDragStartIndex),\n                upperBound = Math.max(index, metaDragStartIndex);\n\n            for(; lowerBound <= upperBound; ++lowerBound){\n                var indexOfIndex = metaSelectedItems.indexOf(lowerBound);\n\n                if(indexOfIndex == -1)\n                    newSelectedItems.push(lowerBound);\n                else\n                    newSelectedItems.splice(newSelectedItems.indexOf(lowerBound), 1);\n            }\n\n            selectedItems = newSelectedItems;\n            broadcastSelectionChange();\n        }\n\n        function selectItem(index) {\n            selectedItems = [index];\n            broadcastSelectionChange();\n        }\n\n        function broadcastSelectionChange() {\n            $rootScope.$broadcast('selected-items-changed');\n        }\n\n        return factory;\n    }\n}());\n\n\n","(function () {\n    angular.module('MonstaFTP').controller('FooterController', FooterController);\n\n    FooterController.$inject = ['$scope', '$rootScope', 'uiOperationFactory', 'connectionFactory',\n        'authenticationFactory', 'uploadUIFactory', '$translate', 'selectedItemsFactory', 'configurationFactory'];\n\n    function FooterController($scope, $rootScope, uiOperationFactory, connectionFactory,\n                              authenticationFactory, uploadUIFactory, $translate, selectedItemsFactory,\n                              configurationFactory) {\n        var vm = this, actionsRequiringSelection = ['chmod', 'cut', 'copy', 'download'];\n\n        vm.isArchiveUpload = false;\n\n        $scope.selectedItemsCount = 0;\n        $scope.hasPasteSource = false;\n        $scope.maxUploadBytes = MAX_UPLOAD_BYTES;\n        $scope.currentUsername = null;\n        $scope.currentHost = null;\n        $scope.currentVersion = 0;\n        $scope.newVersionAvailable = false;\n        $scope.editorActive = false;\n\n        vm.handleUpload = handleUpload;\n        vm.handleUploadFolder = handleUploadFolder;\n        vm.allowAction = allowAction;\n        vm.performRemoteFetch = performRemoteFetch;\n        vm.remoteFetchCallback = remoteFetchCallback;\n        vm.initiateRemoteFetch = initiateRemoteFetch;\n        vm.onEditorHide = onEditorHide;\n        vm.showEditor = showEditor;\n        vm.validateArchiveUpload = validateArchiveUpload;\n\n        $scope.buttonClick = function ($event) {\n            var buttonName = ($event.currentTarget.getAttribute('data-name'));\n            if (buttonName == 'upload-file') {\n                vm.isArchiveUpload = false;\n                vm.handleUpload();\n                return;\n            } else if (buttonName == 'upload-folder') {\n                vm.handleUploadFolder();\n                return;\n            } else if (buttonName == 'upload-archive') {\n                vm.isArchiveUpload = true;\n                vm.handleUpload();\n                return;\n            } else if (buttonName == 'fetch-file') {\n                vm.initiateRemoteFetch();\n                return;\n            } else if (buttonName == 'show-editor') {\n                if (!vm.allowAction(buttonName))\n                    return;\n\n                vm.showEditor();\n                return;\n            }\n\n            if (!vm.allowAction(buttonName))\n                return;\n\n            $rootScope.$broadcast('footer-button-click', buttonName);\n        };\n\n        var uploadSingleInput = document.getElementById('upload-placeholder'),\n            uploadFolderInput = document.getElementById('upload-folder-placeholder');\n\n        if (uploadSingleInput) {\n            uploadSingleInput.addEventListener('change', fileChangeHandler);\n            uploadFolderInput.addEventListener('change', fileChangeHandler);\n        }\n\n        $scope.$on('selected-items-changed', function () {\n            $scope.selectedItemsCount = selectedItemsFactory.getSelectedItems().length;\n        });\n\n        $scope.$on('paste-source:set', function () {\n            $scope.hasPasteSource = true;\n        });\n\n        $scope.$on('paste-source:cleared', function () {\n            $scope.hasPasteSource = false;\n        });\n\n        $scope.$on('login', function () {\n            var currentConfig = authenticationFactory.getActiveConfiguration();\n            $scope.currentUsername = currentConfig.username || null;\n            $scope.currentHost = currentConfig.host || null;\n        });\n\n        $scope.$on('logout', function () {\n            $scope.currentUsername = null;\n            $scope.currentHost = null;\n        });\n\n        $scope.$on('file-editor:hide', function (ev, activeFileCount) {\n            vm.onEditorHide(activeFileCount);\n        });\n\n        configurationFactory.getSystemConfiguration().then(function (config) {\n            MAX_UPLOAD_BYTES = config.maxFileUpload;\n            $scope.maxUploadBytes = MAX_UPLOAD_BYTES;\n            $scope.currentVersion = config.version;\n\n            if ($scope.currentVersion && window.MONSTA_LATEST_VERSION)\n                $scope.newVersionAvailable = versionIsLessThan($scope.currentVersion, window.MONSTA_LATEST_VERSION);\n        }, function (response) {\n\n        });\n\n        function handleUpload() {\n            uploadSingleInput.value = null;\n            uploadSingleInput.click();\n        }\n\n        function fileChangeHandler() {\n            if (!this.files || !this.files.length)\n                return;\n\n            var items = this.items;\n\n            if(vm.isArchiveUpload && !validateArchiveUpload(this.files))\n                return;\n\n            if (items != undefined)\n                uploadUIFactory.handleItemsBasedUpload(items, vm.isArchiveUpload);\n            else\n                uploadUIFactory.handleFilesBasedUpload(this.files, vm.isArchiveUpload);\n        }\n\n        function showModalError(errorMessage) {\n            $rootScope.$broadcast(\"modal-error:show\", errorMessage);\n        }\n\n        function handleUploadFolder() {\n            var userAgent = window.navigator.userAgent;\n\n            if (!/chrome/i.test(userAgent)) {\n                $translate('FOLDER_UPLOAD_CHROME_ONLY_MESSAGE').then(showModalError, showModalError);\n                return;\n            }\n\n            uploadFolderInput.value = null;\n            uploadFolderInput.click();\n        }\n\n        function allowAction(actionName) {\n            if (actionName == 'show-editor')\n                return $scope.editorActive;\n\n            if (actionName == 'paste')\n                return $scope.hasPasteSource;\n\n            if (actionsRequiringSelection.indexOf(actionName) == -1)\n                return true;\n\n            return $scope.selectedItemsCount != 0;\n        }\n\n        function performRemoteFetch(url) {\n            $translate('FETCHING_ACTIVITY_STATUS').then(function (translatedBusyMessage) {\n                $rootScope.$broadcast(\"modal-prompt:set-busy\", translatedBusyMessage);\n            });\n\n            connectionFactory.fetchRemoteFile(url, uiOperationFactory.currentDirectory).then(\n                function (response) {\n                    if (responseIsUnsuccessful(response)) {\n                        showResponseError(response, 'remote file fetch of ' + url, $rootScope, $translate);\n                        return;\n                    }\n                    $rootScope.$broadcast('change-directory');\n                    $rootScope.$broadcast('modal-prompt:hide');\n                }, function (response) {\n                    showResponseError(response, 'remote file fetch of ' + url, $rootScope, $translate);\n                    $rootScope.$broadcast(\"modal-prompt:clear-busy\");\n                }\n            );\n        }\n\n        function setModalPromptError(error) {\n            $rootScope.$broadcast('modal-prompt:set-error', error);\n        }\n\n        function remoteFetchCallback(final) {\n            $rootScope.$broadcast('modal-prompt:clear-error');\n\n            if (!basicURLValidate(final)) {\n                $translate('URL_INVALID_MESSAGE').then(setModalPromptError, setModalPromptError);\n                return;\n            }\n\n            var url = final.replace(/^\\s\\s*/, '');\n\n            vm.performRemoteFetch.call(vm, url);\n        }\n\n        function initiateRemoteFetch() {\n            $translate(['FETCH_FILE_PROMPT_TITLE', 'FETCH_FILE_URL_PLACEHOLDER']).then(function (translations) {\n                $rootScope.$broadcast('modal-prompt:show', translations.FETCH_FILE_PROMPT_TITLE, null,\n                    translations.FETCH_FILE_URL_PLACEHOLDER, vm.remoteFetchCallback);\n            });\n        }\n\n        function onEditorHide(activeFileCount) {\n            $scope.editorActive = activeFileCount != 0;\n        }\n\n        function showEditor() {\n            $rootScope.$broadcast('file-editor:show');\n        }\n\n        function validateArchiveUpload(files) {\n            var errorMessage = null;\n            if(files.length != 1)\n                errorMessage = \"MULTIPLE_FILE_ARCHIVE_ERROR\";\n            else if (extractFileExtension(files[0].name) != 'zip')\n                errorMessage = \"INVALID_TYPE_ARCHIVE_ERROR\";\n\n            if (errorMessage == null)\n                return true;\n\n            $rootScope.$broadcast('modal-error:show', errorMessage);\n            return false;\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('FileEditorController', FileEditorController);\n\n    FileEditorController.$inject = ['$scope', '$rootScope', 'connectionFactory', 'jQuery', 'licenseFactory',\n        'codeMirrorFactory', '$translate', 'uiOperationFactory', 'configurationFactory'];\n\n    function FileEditorController($scope, $rootScope, connectionFactory, jQuery, licenseFactory, codeMirrorFactory,\n                                  $translate, uiOperationFactory, configurationFactory) {\n        'use strict';\n        $scope.editorFiles = [];\n        $scope.activeFile = null;\n        $scope.pathOfTabToRemove = null;\n        $scope.licenseFactory = licenseFactory;\n        $scope.settings = {autoSave: false};\n\n        var modalFileEditorId = '#modal-editor', vm = this, autoSaveTimeout = null, $filePickerMenu = null;\n\n        vm.savedDirectories = [];\n        vm.hideProUpgradeMessages = false;\n\n        vm.show = show;\n        vm.hide = hide;\n        vm.setupAdvancedEditor = setupAdvancedEditor;\n        vm.startEditingFile = startEditingFile;\n        vm.ensureFileInScope = ensureFileInScope;\n        vm.getFileIndexByPath = getFileIndexByPath;\n        vm.filePathIsInScope = filePathIsInScope;\n        vm.getEditorFileByPath = getEditorFileByPath;\n        vm.updateFileContents = updateFileContents;\n        vm.loadFileContents = loadFileContents;\n        vm.removeFile = removeFile;\n        vm.initiateConfirmTabClose = initiateConfirmTabClose;\n        vm.confirmTabClose = confirmTabClose;\n        vm.cancelTabClose = cancelTabClose;\n        vm.contentPutFinish = contentPutFinish;\n        vm.beginAutosave = beginAutosave;\n        vm.fileListClick = fileListClick;\n        vm.shouldShowProUpgrade = shouldShowProUpgrade;\n        vm.itemsMoved = itemsMoved;\n\n        $scope.activateTab = function (filePath, $event) {\n            if ($event.target.tagName == 'BUTTON')\n                return;\n\n            $scope.activeFile = vm.getEditorFileByPath(filePath);\n\n            if ($filePickerMenu != null)\n                $filePickerMenu.removeClass('open')\n        };\n\n        $scope.closeTabForFile = function (fileName, filePath) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (!file.dirty) {\n                vm.removeFile(filePath);\n                return false;\n            }\n\n            vm.initiateConfirmTabClose(fileName, filePath);\n            return false;\n        };\n\n        $scope.textChange = function (filePath) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n\n            file.dirty = true;\n\n            vm.beginAutosave.call(vm);\n        };\n\n        $scope.saveActiveFile = function () {\n            if ($scope.activeFile == null)\n                return;\n            $scope.activeFile.saving = true;\n            var path = $scope.activeFile.path, contents = $scope.activeFile.contents;\n            connectionFactory.putFileContents(path, contents).then(function () {\n                vm.contentPutFinish(path, true);\n            }, function (response) {\n                vm.contentPutFinish(path, false);\n                showResponseError(response, 'file save', $rootScope, $translate);\n            });\n        };\n\n        $scope.$on('file-editor:edit', function (ev, fileName, filePath) {\n            vm.startEditingFile(fileName, filePath);\n            vm.show();\n        });\n\n        $scope.$on('file-editor:show', function () {\n            vm.show();\n        });\n\n        $scope.$on('logout', function () {\n            $scope.editorFiles = [];\n            $scope.activeFile = null;\n        });\n\n        $scope.$on('items-deleted', function (ev, deletedItems) {\n            vm.itemsMoved(deletedItems);\n        });\n\n        $scope.$on('items-moved', function (ev, movedItems) {\n            var moveSources = [];\n\n            for(var i = 0; i < movedItems.length; ++i)\n                moveSources.push(movedItems[i][0])\n\n            vm.itemsMoved(moveSources);\n        });\n\n        function show() {\n            vm.hideProUpgradeMessages = configurationFactory.getApplicationSetting('hideProUpgradeMessages');\n            vm.savedDirectories = [];\n            jQuery(modalFileEditorId).modal('show');\n        }\n\n        function hide() {\n            if (vm.savedDirectories.indexOf(uiOperationFactory.currentDirectory) != -1)\n                $rootScope.$broadcast('change-directory'); // refresh directory list if there was a save in current dir\n\n            $rootScope.$broadcast('file-editor:hide', $scope.editorFiles.length);\n            jQuery(modalFileEditorId).modal('hide');\n        }\n\n        function setupAdvancedEditor(fileName, filePath) {\n            var codeMode = codeMirrorFactory.convertFilenameToMode(fileName);\n            window.setTimeout(function () {\n                if (codeMode != null) {\n                    var editorItem = vm.getEditorFileByPath(filePath);\n\n                    if (editorItem.cmSetup == true)\n                        return;\n\n                    var textAreaId = \"editor_ta_\" + filePath;\n                    codeMirrorFactory.initiateCodeMirror(codeMode, document.getElementById(textAreaId), function (cm) {\n                        editorItem.cmSetup = true;\n                        editorItem.cm = cm;\n                        cm.on('change', function (cMirror) {\n                            editorItem.contents = cMirror.getValue();\n                            $scope.textChange(editorItem.path);\n                        });\n                    });\n                }\n            }, 0);\n        }\n\n        function startEditingFile(fileName, filePath) {\n            vm.ensureFileInScope(fileName, filePath, function () {\n                $scope.activeFile = vm.getEditorFileByPath(filePath);\n                if (licenseFactory.isLicensed())\n                    vm.setupAdvancedEditor(fileName, filePath);\n            });\n        }\n\n        function ensureFileInScope(fileName, filePath, contentsLoadedCallback) {\n            if (vm.filePathIsInScope(filePath)) {\n                if (contentsLoadedCallback)\n                    contentsLoadedCallback();\n                return true;\n            }\n\n            var editorFile = {\n                name: fileName,\n                path: filePath,\n                contents: null,\n                dirty: false,\n                saving: false,\n                cmSetup: false,\n                cm: null\n            };\n\n            if (licenseFactory.isLicensed())\n                $scope.editorFiles.push(editorFile);\n            else\n                $scope.editorFiles = [editorFile];\n\n            vm.loadFileContents(filePath, contentsLoadedCallback);\n            return false;\n        }\n\n        function getFileIndexByPath(filePath) {\n            for (var fileIndex = 0; fileIndex < $scope.editorFiles.length; ++fileIndex)\n                if ($scope.editorFiles[fileIndex].path == filePath)\n                    return fileIndex;\n\n            return null;\n        }\n\n        function filePathIsInScope(filePath) {\n            return vm.getFileIndexByPath(filePath) != null;\n        }\n\n        function getEditorFileByPath(filePath) {\n            var fileIndex = vm.getFileIndexByPath(filePath);\n            return fileIndex == null ? null : $scope.editorFiles[fileIndex];\n        }\n\n        function updateFileContents(filePath, fileContents) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n            file.contents = fileContents;\n        }\n\n        function loadFileContents(filePath, contentsLoadedCallback) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n\n            connectionFactory.getFileContents(filePath).then(\n                function (response) {\n                    vm.updateFileContents(filePath, response.data.data);\n                    if (contentsLoadedCallback)\n                        contentsLoadedCallback();\n                }, function (response) {\n                    showResponseError(response, 'file load', $rootScope, $translate);\n                });\n        }\n\n        function removeFile(filePath) {\n            var fileIndex = vm.getFileIndexByPath(filePath);\n            if (fileIndex == null)\n                return;\n\n            var closingFiles = $scope.editorFiles.splice(fileIndex, 1);\n\n            if (closingFiles.length && closingFiles[0].cm) {\n                closingFiles[0].cm.toTextArea();\n                closingFiles[0].cm = null;\n            }\n\n            if ($scope.editorFiles.length == 0) {\n                $scope.activeFile = null;\n                vm.hide();\n                return;\n            }\n\n            var newFileIndex = Math.min(fileIndex, $scope.editorFiles.length - 1);\n            $scope.activeFile = $scope.editorFiles[newFileIndex];\n        }\n\n\n        function showTabCloseConfirm(confirmMessage) {\n            $rootScope.$broadcast('modal-confirm:show', confirmMessage, vm.confirmTabClose, vm.cancelTabClose);\n        }\n\n        function initiateConfirmTabClose(fileName, filePath) {\n            $scope.pathOfTabToRemove = filePath;\n            $translate('EDITOR_CLOSE_CONFIRM_MESSAGE', {file_name: fileName}).then(showTabCloseConfirm,\n                showTabCloseConfirm);\n        }\n\n        function confirmTabClose() {\n            vm.removeFile($scope.pathOfTabToRemove);\n            $scope.pathOfTabToRemove = null;\n        }\n\n        function cancelTabClose() {\n            $scope.pathOfTabToRemove = null;\n        }\n\n        function contentPutFinish(filePath, success) {\n            var file = vm.getEditorFileByPath(filePath);\n            if (file == null)\n                return;\n\n            file.saving = false;\n            if (success) {\n                file.dirty = false;\n                var dirName = filePath.replace(/\\\\/g, '/').replace(/\\/[^\\/]*\\/?$/, '');\n                if (dirName == '')\n                    dirName = '/';\n                if (vm.savedDirectories.indexOf(dirName) == -1)\n                    vm.savedDirectories.push(dirName);\n            }\n        }\n\n        function beginAutosave() {\n            if (!$scope.settings.autoSave)\n                return;\n\n            if (autoSaveTimeout)\n                window.clearTimeout(autoSaveTimeout);\n\n            autoSaveTimeout = window.setTimeout(function () {\n                autoSaveTimeout = null;\n                $scope.saveActiveFile();\n            }, AUTOSAVE_DELAY_MS);\n        }\n\n        function fileListClick($event) {\n            if ($filePickerMenu == null) {\n                $filePickerMenu = jQuery($event.target).parent();\n\n                if ($event.target.tagName == \"I\")\n                    $filePickerMenu = $filePickerMenu.parent();\n            }\n\n            $filePickerMenu.toggleClass('open');\n        }\n\n        function shouldShowProUpgrade() {\n            if (vm.hideProUpgradeMessages === true)\n                return false;\n\n            return !licenseFactory.isLicensed();\n        }\n\n        function itemsMoved(deletedItems) {\n            // this really means the item is no longer where we expected it (moved, renamed or deleted)\n            var pathsToRemove = [];\n            for (var deletedPathIndex = 0; deletedPathIndex < deletedItems.length; ++deletedPathIndex) {\n                var deletedPath = deletedItems[deletedPathIndex];\n\n                if (deletedPath.length == 0)\n                    continue;\n\n                var deletedPathAsDirectory = deletedPath.substr(deletedPath.length - 1) == \"/\" ? deletedPath : (deletedPath + \"/\");\n\n                for (var editorFileIndex = 0; editorFileIndex < $scope.editorFiles.length; ++editorFileIndex) {\n                    var editorFile = $scope.editorFiles[editorFileIndex];\n                    if (deletedPath == editorFile.path)\n                        pathsToRemove.push(editorFile.path);\n                    else {\n                        if(editorFile.path.length <= deletedPathAsDirectory.length )\n                            continue;\n\n                        if(editorFile.path.substr(0, deletedPathAsDirectory.length) == deletedPathAsDirectory)\n                            pathsToRemove.push(editorFile.path);\n                    }\n\n                }\n            }\n\n            for(var removeIndex = 0; removeIndex < pathsToRemove.length; ++removeIndex) {\n                vm.removeFile(pathsToRemove[removeIndex], true);\n            }\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('DragDropController', DragDropController);\n\n    DragDropController.$inject = ['uploadUIFactory', 'jQuery'];\n\n    function DragDropController(uploadUIFactory, jQuery) {\n        'use strict';\n        var overDrop = false, vm = this, $html = jQuery('html');\n\n        vm.handleDropEvent = handleDropEvent;\n\n        $html.ready(function () {\n            var $fileDrop = jQuery(\"#file-xfer-drop\");\n            $html.on('dragenter', function () {\n                var $files = jQuery('#files');\n\n                $fileDrop.css({\n                    top: $files.position().top,\n                    height: $files.height(),\n                    display: \"table\"\n                });\n\n                $fileDrop.show();\n            });\n\n            $html.on('dragend', function () {\n                if (overDrop)\n                    return;\n\n                $fileDrop.hide();\n            });\n\n            $fileDrop.ready(function () {\n                $fileDrop.on({\n                    dragenter: function (e) {\n                        overDrop = true;\n                        e.stopPropagation();\n                        e.preventDefault();\n                    },\n                    dragleave: function (e) {\n                        if (!jQuery.contains($fileDrop, jQuery(e.target)))\n                            overDrop = false;\n                        e.stopPropagation();\n                        e.preventDefault();\n                        $fileDrop.hide();\n                    },\n                    dragover: function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                    },\n                    drop: function (e) {\n                        overDrop = false;\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        var browserEvent = e.originalEvent;\n                        if (!browserEvent.dataTransfer || !browserEvent.dataTransfer.files)\n                            return false;\n\n                        if (!containsFiles(browserEvent))\n                            return false;\n\n                        vm.handleDropEvent(browserEvent);\n                        $fileDrop.hide();\n                    },\n                    dragend: function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        $fileDrop.hide();\n                    }\n                });\n            });\n        });\n\n        function containsFiles(browserEvent) {\n            if (browserEvent.dataTransfer.types) {\n                for (var i = 0; i < browserEvent.dataTransfer.types.length; i++) {\n                    if (browserEvent.dataTransfer.types[i] == \"Files\") {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n        }\n\n        function handleDropEvent(event) {\n            event.preventDefault();\n\n            var items = event.dataTransfer.items;\n\n            if (items != undefined)\n                uploadUIFactory.handleItemsBasedUpload(items, null);\n            else {\n                var files = event.dataTransfer.files;\n                // for IE this needs to be re-referenced, if passing it directly it empties\n                uploadUIFactory.handleFilesBasedUpload(files, null);\n            }\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('HeaderController', HeaderController);\n\n    HeaderController.$inject = ['$scope', '$rootScope', 'historyFactory'];\n\n        function HeaderController($scope, $rootScope, historyFactory) {\n        $scope.canGoBack = false;\n        $scope.canGoForward = false;\n\n        var updateScopeFromHistoryFactory = function () {\n            $scope.canGoBack = historyFactory.hasPreviousHistoryItem();\n            $scope.canGoForward = historyFactory.hasNextHistoryItem();\n        };\n\n        $scope.$on('history-changed', function () {\n            updateScopeFromHistoryFactory();\n        });\n\n        $scope.$on('directory-changed', function () {\n            updateScopeFromHistoryFactory();\n        });\n\n        $scope.navigateBack = function () {\n            if (!$scope.canGoBack)\n                return;\n\n            var newDir = historyFactory.navigateBack();\n\n            if (newDir)\n                $rootScope.$broadcast('change-directory:on-history', newDir);\n        };\n\n        $scope.navigateForward = function () {\n            if (!$scope.canGoForward)\n                return;\n\n            var newDir = historyFactory.navigateForward();\n\n            if (newDir)\n                $rootScope.$broadcast('change-directory:on-history', newDir);\n        };\n\n        $scope.refresh = function () {\n            $rootScope.$broadcast('change-directory');\n        }\n    }\n}());\n","(function () {\n    angular.module('MonstaFTP').controller('HistoryController', HistoryController);\n\n    HistoryController.$inject = ['$scope', 'historyFactory', '$rootScope', 'uiOperationFactory'];\n\n    function HistoryController($scope, historyFactory, $rootScope, uiOperationFactory) {\n        $scope.history = [];\n\n        $scope.$on('directory-changed', function () {\n            updateHistory();\n        });\n\n        $scope.$on('history-changed', function () {\n            updateHistory();\n        });\n\n        $scope.historyClick = function (path) {\n            $rootScope.$broadcast('change-directory', path);\n        };\n\n        $scope.$on('items-deleted', function (ev, itemPaths) {\n            itemPaths.map(function (path) {\n                historyFactory.removeEntry(path);\n            });\n        });\n\n        function updateHistory() {\n            $scope.history = historyFactory.getUniqueHistory(HISTORY_MAX, uiOperationFactory.currentDirectory);\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('historyFactory', historyFactory);\n\n    historyFactory.$inject = ['$rootScope'];\n\n    function historyFactory($rootScope) {\n        var HISTORY_CHANGED_EVENT_NAME = 'history-changed';\n        var ensureTrailingSlash = function (path) {\n            return path + (path.substr(path.length - 1) != '/' ? '/' : '');\n        };\n\n        var factory = {\n            _fullHistory: [],\n            _historyIndex: -1,\n            getFullHistory: function () {\n                return this._fullHistory;\n            },\n            getFullHistoryCount: function () {\n                return this._fullHistory.length;\n            },\n            addEntry: function (path) {\n                path = ensureTrailingSlash(path);\n\n                if (this._historyIndex != this._fullHistory.length - 1)\n                    this._fullHistory.splice(this._historyIndex + 1);\n\n                this._fullHistory.push(path);\n                ++this._historyIndex;\n                $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n            }, removeEntry: function (path) {\n                path = ensureTrailingSlash(path);\n                var changed = false;\n\n                for(var i = this._fullHistory.length - 1; i >= 0; --i) {\n                    var historyItem = this._fullHistory[i];\n                    if (historyItem.length < path.length)\n                        continue;\n\n                    if (historyItem.substr(0, path.length) == path) {// this will take care of sub folders\n                        this._fullHistory.splice(i, 1);\n                        changed = true;\n                    }\n                }\n\n                if(changed)\n                    $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n            },\n            getFullHistoryItem: function (index) {\n                return this._fullHistory[index];\n            },\n            getHistoryIndex: function () {\n                return this._historyIndex;\n            },\n            setHistoryIndex: function (index) {\n                this._historyIndex = index;\n                $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n                return this._fullHistory[index];\n            },\n            hasPreviousHistoryItem: function () {\n                return this._historyIndex > 0;\n            },\n            hasNextHistoryItem: function () {\n                return (this._historyIndex > -1) && this._historyIndex < (this._fullHistory.length - 1);\n            },\n            navigateBack: function () {\n                if (!this.hasPreviousHistoryItem())\n                    return;\n\n                return this.setHistoryIndex(this.getHistoryIndex() - 1);\n            },\n            navigateForward: function () {\n                if (!this.hasNextHistoryItem())\n                    return;\n\n                return this.setHistoryIndex(this.getHistoryIndex() + 1);\n            },\n            getUniqueHistory: function (historySize, currentDirectory) {\n                if (currentDirectory != undefined)\n                    currentDirectory = ensureTrailingSlash(currentDirectory);\n\n                if (this.getFullHistoryCount() == 0)\n                    return [];\n\n                var uniqueHistory = [];\n                for (var fullHistoryIndex = this.getFullHistoryCount() - 1; fullHistoryIndex >= 0; --fullHistoryIndex) {\n                    var historyPath = this.getFullHistoryItem(fullHistoryIndex);\n                    if (historyPath == currentDirectory)\n                        continue;\n\n                    if (uniqueHistory.indexOf(historyPath) == -1)\n                        uniqueHistory.push(historyPath);\n\n                    if (uniqueHistory.length == historySize)\n                        break;\n                }\n\n                return uniqueHistory;\n            },\n            clearHistory: function () {\n                this._fullHistory = [];\n                this._historyIndex = -1;\n                $rootScope.$broadcast(HISTORY_CHANGED_EVENT_NAME);\n            }\n        };\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('licenseFactory', licenseFactory);\n\n    licenseFactory.$inject = ['connectionFactory', '$rootScope'];\n\n    function licenseFactory(connectionFactory, $rootScope) {\n        return {\n            isNullLicense: true,\n            email: null,\n            version: null,\n            expiryDate: null,\n            purchaseDate: null,\n            getLicense: function () {\n                var _this = this;\n                connectionFactory.getLicense().then(function (response) {\n                    if (responseIsUnsuccessful(response)) {\n                        _this.handleGetFailure.call(_this, response);\n                        return;\n                    }\n\n                    _this.handleGetSuccess.call(_this, response);\n                }, function (response) {\n                    _this.handleGetFailure.call(_this, response);\n                });\n            },\n            handleGetSuccess: function (response) {\n                var licenseData = response.data.data;\n                if (licenseData == null)\n                    this.isNullLicense = true;\n                else {\n                    this.email = licenseData.email;\n                    this.version = licenseData.version;\n                    this.expiryDate = licenseData.expiryDate * 1000;\n                    this.purchaseDate = licenseData.purchaseDate * 1000;\n                    this.isNullLicense = false;\n                }\n                $rootScope.$broadcast('license-loaded');\n            }, handleGetFailure: function (response) {\n                var action = 'license reading';\n                $rootScope.$broadcast('modal-error:show', parseErrorResponse(response, action), null, {action: action});\n            }, isLicensed: function () {\n                if (this.isNullLicense)\n                    return false;\n\n                return !this.isLicenseExpired();\n            }, isLicenseExpired: function () {\n                if (this.isNullLicense)\n                    return false;\n\n                if (this.expiryDate == null)\n                    return false;\n\n                return Date.now() > this.expiryDate;\n            }\n        };\n    }\n}());","(function(){\n    angular.module('MonstaFTP').factory('jQuery', monstaJQuery);\n\n    monstaJQuery.$inject = ['$window'];\n\n    function monstaJQuery($window) {\n        return $window.jQuery;\n    }\n})();","(function () {\n    angular.module('MonstaFTP').controller('LoginPanelController', LoginPanelController);\n\n    LoginPanelController.$inject = ['$scope', 'connectionFactory', 'authenticationFactory', '$rootScope', 'jQuery',\n        'licenseFactory', '$translate', 'configurationFactory', 'requestLoginFactory'];\n\n    function LoginPanelController($scope, connectionFactory, authenticationFactory, $rootScope, jQuery,\n                                  licenseFactory, $translate, configurationFactory, requestLoginFactory) {\n        var modalLoginId = \"#modal-login\", vm = this, readURL = true, modalSetup = false;\n\n        $scope.connectionErrorMessage = null;\n        $scope.storedAuthenticationErrorMessage = null;\n        $scope.defaults = g_ConnectionDefaults;\n        $scope.metaConfiguration = {\n            rememberLogin: false,\n            masterPassword: null,\n            savedProfileIndex: null,\n            enteredProfileName: null\n        };\n\n        $scope.hasServerSavedAuthentication = false;\n        $scope.savedAuthentication = null;\n        $scope.licenseFactory = licenseFactory;\n        $scope.metaConfiguration.saveAuthentication = true; // TODO: this is hardcoded until we have a checkbox for this\n        $scope.systemConfiguration = {};\n        $scope.configuration = {};\n        vm.connectionRestrictions = {};\n        vm.applicationSettings = {};\n        vm.isAuthenticated = false;\n\n        vm.buildDefaultConfiguration = buildDefaultConfiguration;\n        vm.hide = hide;\n        vm.show = show;\n        vm.handleError = handleError;\n        vm.setupInitialDirectory = setupInitialDirectory;\n        vm.writeAuthenticationToServer = writeAuthenticationToServer;\n        vm.saveCurrentAuthentication = saveCurrentAuthentication;\n        vm.removeProfile = removeProfile;\n        vm.initiateAuthenticationSave = initiateAuthenticationSave;\n        vm.handleAuthenticationSuccess = handleAuthenticationSuccess;\n        vm.handleAuthenticationFailure = handleAuthenticationFailure;\n        vm.transferConfigToAuthFactory = transferConfigToAuthFactory;\n        vm.successCallback = successCallback;\n        vm.handleTestConfiguration = handleTestConfiguration;\n        vm.testConfiguration = testConfiguration;\n        vm.transferConfigFromAuthFactory = transferConfigFromAuthFactory;\n        vm.initWithStoredAuth = initWithStoredAuth;\n        vm.updateHasServerSavedAuth = updateHasServerSavedAuth;\n        vm.addDefaultsToConfig = addDefaultsToConfig;\n        vm.initWithDefaultAuth = initWithDefaultAuth;\n        vm.init = init;\n        vm.handleCreateAuthSuccess = handleCreateAuthSuccess;\n        vm.handleLoadSavedAuthSuccess = handleLoadSavedAuthSuccess;\n        vm.handleAuthFileFailure = handleAuthFileFailure;\n        vm.performCreateAuthFile = performCreateAuthFile;\n        vm.initiateLoadOfAuthFile = initiateLoadOfAuthFile;\n        vm.loadProfileAtIndex = loadProfileAtIndex;\n        vm.loadNewProfile = loadNewProfile;\n        vm.configurationSettable = configurationSettable;\n        vm.applyRestrictionsToConfiguration = applyRestrictionsToConfiguration;\n        vm.shouldShowProUpgrade = shouldShowProUpgrade;\n        vm.shouldShowProfiles = shouldShowProfiles;\n        vm.showLoginLink = showLoginLink;\n        vm.initWithURLConfig = initWithURLConfig;\n        vm.profileIsSelected = profileIsSelected;\n        vm.getProfileName = getProfileName;\n        vm.getDefaultProfileName = getDefaultProfileName;\n\n        jQuery(document).on('shown.bs.tab', '#login-tab-links a', function (e) {\n            $scope.connectionType = $(e.target).attr('data-type');\n            $scope.$apply(function () {\n                $scope.handleProfileChange();\n            });\n\n        });\n\n        $scope.connect = function () {\n            if ($scope.connectionType == 'sftp' && $scope.systemConfiguration.sftpAvailable === false)\n                return;\n\n            vm.testConfiguration(\"form\");\n        };\n\n        $scope.handleLoginKeyPress = function ($event) {\n            if ($event.which == 13)\n                $scope.connect();\n        };\n\n        $scope.$on('logout', function () {\n            readURL = false;\n            vm.init();\n        });\n\n        $scope.$on('modal-login:show', function () {\n            vm.show();\n        });\n\n        function setStoredAuthenticationErrorMessage(errorMessage) {\n            $scope.storedAuthenticationErrorMessage = errorMessage;\n        }\n\n        $scope.handleAuthGo = function () {\n            if (isEmpty($scope.metaConfiguration.masterPassword)) {\n                $translate('PROFILE_SET_PASSWORD_ERROR').then(setStoredAuthenticationErrorMessage,\n                    setStoredAuthenticationErrorMessage);\n                return;\n            }\n\n            $scope.storedAuthenticationErrorMessage = '';\n\n            if ($scope.hasServerSavedAuthentication)\n                vm.initiateLoadOfAuthFile();\n            else\n                vm.performCreateAuthFile();\n        };\n\n        $scope.masterPasswordKeypress = function ($event) {\n            if ($event.which == 13)\n                $scope.handleAuthGo();\n        };\n\n        $scope.handleProfileChange = function () {\n            var selectValue = $scope.metaConfiguration.savedProfileIndex;\n            if (selectValue == 'new') {\n                vm.loadNewProfile();\n                return;\n            }\n\n            var profileIndex = parseInt(selectValue);\n            if (!isNaN(profileIndex))\n                vm.loadProfileAtIndex(profileIndex);\n        };\n\n        function showRemoveProfileConfirm(message) {\n            $rootScope.$broadcast('modal-confirm:show', message, vm.removeProfile);\n        }\n\n        $scope.initiateProfileDelete = function () {\n            $translate('PROFILE_DELETE_CONFIRM_MESSAGE').then(showRemoveProfileConfirm, showRemoveProfileConfirm)\n        };\n\n        $scope.shouldHideDeleteButton = function () {\n            if (!shouldShowProfiles())\n                return true;\n\n            return isNaN(parseInt($scope.metaConfiguration.savedProfileIndex));\n        };\n\n        $scope.$on('license-loaded', function () {\n            vm.init();\n        });\n\n        configurationFactory.getSystemConfiguration().then(function (systemConfiguration) {\n            $scope.systemConfiguration = systemConfiguration;\n            vm.applicationSettings = systemConfiguration.applicationSettings;\n            vm.connectionRestrictions = systemConfiguration.applicationSettings.connectionRestrictions;\n            licenseFactory.getLicense();\n        }, function (response) {\n            licenseFactory.getLicense();\n        });\n\n        function buildDefaultConfiguration() {\n            var availableConnectionTypes = [\n                ['ftp', 'FTP'],\n                ['sftp', 'SFTP/SCP']\n            ];\n\n            if (DEBUG)\n                availableConnectionTypes.push(['mock', 'Mock']);\n\n            $scope.connectionTypes = [];\n\n            for (var ctIndex = 0; ctIndex < availableConnectionTypes.length; ++ctIndex) {\n                if (connectionTypeAllowed(availableConnectionTypes[ctIndex][0]))\n                    $scope.connectionTypes.push(availableConnectionTypes[ctIndex]);\n            }\n\n            $scope.configuration = {};\n            if ($scope.connectionTypes.length)\n                $scope.connectionType = $scope.connectionTypes[0][0];\n\n            for (ctIndex = 0; ctIndex < $scope.connectionTypes.length; ++ctIndex)\n                $scope.configuration[$scope.connectionTypes[ctIndex][0]] = {};\n        }\n\n        function hide() {\n            jQuery(modalLoginId).modal('hide');\n        }\n\n        function show() {\n            var modalConfig = {};\n            vm.isAuthenticated = authenticationFactory.isAuthenticated;\n\n            if (!authenticationFactory.isAuthenticated) {\n                modalConfig.backdrop = 'static';\n                modalConfig.keyboard = false;\n            } else {\n                modalConfig.backdrop = true;\n                modalConfig.keyboard = true;\n            }\n\n            vm.updateHasServerSavedAuth();\n\n            var $modal = jQuery(modalLoginId);\n\n            if (!modalSetup) {\n                $modal.modal(modalConfig);\n                modalSetup = true;\n            } else {\n                $modal.data('bs.modal').options.backdrop = modalConfig.backdrop;\n                $modal.data('bs.modal').options.keyboard = modalConfig.keyboard;\n            }\n\n            $modal.modal('show');\n        }\n\n        function displayTranslatedError(errorMessage, mode) {\n            if (mode == 'connection-display')\n                $scope.connectionErrorMessage = errorMessage;\n            else if (mode == 'saved-profile-display')\n                $scope.storedAuthenticationErrorMessage = errorMessage;\n            else\n                $rootScope.$broadcast('modal-error:show', errorMessage);\n        }\n\n        function handleError(response, action, mode) {\n            var errorMessage = parseErrorResponse(response, action);\n\n            $translate(errorMessage, {action: action}).then(function (translatedMessage) {\n                displayTranslatedError(translatedMessage, mode);\n            }, function () {\n                displayTranslatedError(errorMessage, mode);\n            });\n        }\n\n        function setupInitialDirectory(resumeType) {\n            var configuration = $scope.configuration, connType = $scope.connectionType; // for shorter refs :)\n            if (resumeType == \"resume\") {\n                var authInitDir = authenticationFactory.initialDirectory;\n                if (isEmpty(authInitDir))\n                    authInitDir = \"/\";\n                configuration[connType].initialDirectory = authInitDir;\n            } else {\n                if (isEmpty(configuration[connType].initialDirectory))\n                    configuration[connType].initialDirectory = \"/\";\n\n                authenticationFactory.initialDirectory = configuration[connType].initialDirectory;\n            }\n        }\n\n        function writeAuthenticationToServer() {\n            connectionFactory.writeSavedAuth($scope.metaConfiguration.masterPassword, $scope.savedAuthentication)\n                .then(function (response) {\n                    if (responseIsUnsuccessful(response))\n                        vm.handleError(response, 'saving profile');\n                }, function (response) {\n                    vm.handleError(response, 'saving profile');\n                });\n        }\n\n        function saveCurrentAuthentication() {\n            if ($scope.savedAuthentication == null || typeof $scope.savedAuthentication != 'object')\n                $scope.savedAuthentication = {};\n\n            if ($scope.savedAuthentication[$scope.connectionType] == undefined)\n                $scope.savedAuthentication[$scope.connectionType] = [];\n\n            var profileToSave = angular.copy($scope.configuration[$scope.connectionType]);\n\n            profileToSave.name = $scope.metaConfiguration.enteredProfileName;\n\n            var profileArray = $scope.savedAuthentication[$scope.connectionType];\n\n            if ($scope.metaConfiguration.savedProfileIndex == 'new')\n                profileArray.push(profileToSave);\n            else\n                profileArray[$scope.metaConfiguration.savedProfileIndex] = profileToSave;\n\n            vm.writeAuthenticationToServer();\n        }\n\n        function removeProfile() {\n            $scope.savedAuthentication[$scope.connectionType].splice($scope.metaConfiguration.savedProfileIndex, 1);\n\n            $scope.metaConfiguration.savedProfileIndex = Math.min($scope.metaConfiguration.savedProfileIndex,\n                $scope.savedAuthentication[$scope.connectionType].length - 1);\n\n            vm.writeAuthenticationToServer();\n        }\n\n        function initiateAuthenticationSave() {\n            if (isEmpty($scope.metaConfiguration.masterPassword) || !$scope.metaConfiguration.saveAuthentication\n                || !$scope.hasServerSavedAuthentication)\n                return;\n\n            vm.saveCurrentAuthentication();\n        }\n\n        function handleAuthenticationSuccess() {\n            authenticationFactory.postLogin();\n            vm.initiateAuthenticationSave();\n            vm.hide();\n            $rootScope.$broadcast('login');\n        }\n\n        function handleAuthenticationFailure(resumeType, response) {\n            if (resumeType == \"resume\" || resumeType == \"url\") {\n                if (resumeType == \"url\") {\n                    $scope.configuration[$scope.connectionType].password = null;\n                    authenticationFactory.configuration[$scope.connectionType].password = null;\n                }\n                vm.show();\n            } else\n                vm.handleError(response, 'authentication', 'connection-display');\n        }\n\n        function transferConfigToAuthFactory() {\n            var config = angular.copy($scope.configuration);\n            vm.applyRestrictionsToConfiguration(config);\n            authenticationFactory.configuration = config;\n            authenticationFactory.connectionType = $scope.connectionType;\n            authenticationFactory.rememberLogin = $scope.metaConfiguration.rememberLogin;\n            authenticationFactory.hasServerSavedAuthentication = $scope.hasServerSavedAuthentication;\n        }\n\n        function successCallback(resumeType, response) {\n            if (responseIsUnsuccessful(response))\n                vm.handleAuthenticationFailure(resumeType, response);\n            else\n                vm.handleAuthenticationSuccess();\n        }\n\n        function handleTestConfiguration(resumeType) {\n            connectionFactory.testConnectAndAuthenticate().then(function (response) {\n                vm.successCallback(resumeType, response);\n            }, function (response) {\n                vm.handleAuthenticationFailure(resumeType, response);\n            });\n        }\n\n        function testConfiguration(resumeType) {\n            vm.setupInitialDirectory(resumeType);\n            vm.transferConfigToAuthFactory();\n            vm.handleTestConfiguration(resumeType);\n        }\n\n        function transferConfigFromAuthFactory() {\n            $scope.connectionType = authenticationFactory.connectionType || $scope.connectionTypes[0][0];\n\n            if (!connectionTypeAllowed($scope.connectionType))\n                $scope.connectionType = $scope.connectionTypes[0][0];\n\n            $scope.metaConfiguration.rememberLogin = authenticationFactory.rememberLogin;\n            $scope.hasServerSavedAuthentication = authenticationFactory.hasServerSavedAuthentication;\n        }\n\n        function initWithStoredAuth() {\n            $scope.configuration = angular.copy(authenticationFactory.configuration);\n\n            vm.applyRestrictionsToConfiguration($scope.configuration);\n\n            if (authenticationFactory.isAuthenticated)\n                vm.testConfiguration(\"resume\");\n            else\n                vm.show();\n        }\n\n        function initWithURLConfig(urlConfig) {\n            var configuration = {};\n\n            configuration[urlConfig.type] = urlConfig.configuration;\n\n            authenticationFactory.configuration = angular.copy(configuration);\n\n            $scope.configuration = angular.copy(configuration);\n            $scope.connectionType = urlConfig.type;\n            vm.testConfiguration(\"url\");\n        }\n\n        function updateHasServerSavedAuth() {\n            connectionFactory.checkSavedAuthExists().then(function (response) {\n                $scope.hasServerSavedAuthentication = (response.data.data === true);\n            }, function () {\n                $scope.hasServerSavedAuthentication = false;\n            });\n        }\n\n        function addDefaultsToConfig() {\n            if ($scope.configuration.ftp) // will not exist if in sftp only mode\n                $scope.configuration.ftp.passive = true;\n        }\n\n        function initWithDefaultAuth() {\n            vm.addDefaultsToConfig();\n            vm.show();\n        }\n\n        function init() {\n            vm.buildDefaultConfiguration();\n            authenticationFactory.loadSettings();\n            vm.transferConfigFromAuthFactory();\n\n            var configFromURL = null;\n\n            if (readURL && licenseFactory.isLicensed())\n                configFromURL = requestLoginFactory.getConfigFromCurrentURL();\n\n            if (configFromURL != null)\n                vm.initWithURLConfig(configFromURL);\n            else if (authenticationFactory.hasStoredAuthenticationDetails())\n                vm.initWithStoredAuth();\n            else\n                vm.initWithDefaultAuth();\n        }\n\n        function handleCreateAuthSuccess() {\n            $scope.masterPasswordValid = true;\n            $scope.hasServerSavedAuthentication = true;\n        }\n\n        function handleLoadSavedAuthSuccess(response) {\n            $scope.savedAuthentication = response.data.data;\n            $scope.masterPasswordValid = true;\n        }\n\n        function handleAuthFileFailure(response) {\n            $scope.masterPasswordValid = false;\n            vm.handleError(response, 'reading/writing the settings file', 'saved-profile-display');\n        }\n\n        function performCreateAuthFile() {\n            var defaultAuth = {};\n\n            for (var tIndex = 0; tIndex < $scope.connectionTypes.length; ++tIndex) {\n                defaultAuth[$scope.connectionTypes[tIndex][0]] = [];\n            }\n\n            connectionFactory.writeSavedAuth($scope.metaConfiguration.masterPassword, defaultAuth).then(\n                function (response) {\n                    if (responseIsUnsuccessful(response))\n                        vm.handleAuthFileFailure(response);\n                    else\n                        vm.handleCreateAuthSuccess(response);\n                }, function (response) {\n                    vm.handleAuthFileFailure(response);\n                });\n        }\n\n        function initiateLoadOfAuthFile() {\n            connectionFactory.readSavedAuth($scope.metaConfiguration.masterPassword).then(function (response) {\n                if (responseIsUnsuccessful(response))\n                    vm.handleAuthFileFailure(response);\n                else\n                    vm.handleLoadSavedAuthSuccess(response);\n            }, function (response) {\n                vm.handleAuthFileFailure(response);\n            });\n        }\n\n        function loadProfileAtIndex(profileIndex) {\n            $scope.configuration[$scope.connectionType] = angular.copy(\n                $scope.savedAuthentication[$scope.connectionType][profileIndex]);\n\n            $scope.metaConfiguration.enteredProfileName = $scope.configuration[$scope.connectionType].name;\n        }\n\n        function loadNewProfile() {\n            $scope.configuration[$scope.connectionType] = {};\n            $scope.metaConfiguration.enteredProfileName = null;\n            vm.addDefaultsToConfig();\n        }\n\n        function configurationSettable(connectionType, configurationKey) {\n            if (vm.connectionRestrictions == null || typeof (vm.connectionRestrictions) != \"object\")\n                return true;\n\n            if (!vm.connectionRestrictions.hasOwnProperty(connectionType))\n                return true;\n\n            return !vm.connectionRestrictions[connectionType].hasOwnProperty(configurationKey);\n        }\n\n        function applyRestrictionsToConfiguration(configuration) {\n            if (vm.connectionRestrictions == null || typeof (vm.connectionRestrictions) != \"object\")\n                return;\n\n            for (var connectionType in vm.connectionRestrictions) {\n                if (!vm.connectionRestrictions.hasOwnProperty(connectionType))\n                    continue;\n\n                if (!configuration.hasOwnProperty(connectionType))\n                    continue;\n\n                var typeConnectionSettings = vm.connectionRestrictions[connectionType];\n                if (typeConnectionSettings == null || typeof (vm.connectionRestrictions) != \"object\")\n                    continue;\n\n                for (var settingName in typeConnectionSettings) {\n                    if (!typeConnectionSettings.hasOwnProperty(settingName))\n                        continue;\n\n                    if (typeConnectionSettings[settingName] === true || typeConnectionSettings[settingName] === 1)\n                        configuration[connectionType][settingName] = null;\n                    else\n                        configuration[connectionType][settingName] = typeConnectionSettings[settingName];\n                }\n            }\n        }\n\n        function connectionTypeAllowed(connectionType) {\n            // this function is designed to be very forgiving\n            if (vm.connectionRestrictions == null || typeof (vm.connectionRestrictions) != \"object\")\n                return true;\n\n            if (Object.prototype.toString.call(vm.connectionRestrictions.types) != '[object Array]')\n                return true;\n\n            if (vm.connectionRestrictions.types.length == 0)\n                return true;\n\n            return vm.connectionRestrictions.types.indexOf(connectionType) != -1;\n        }\n\n        function shouldShowProUpgrade() {\n            if (vm.applicationSettings.hideProUpgradeMessages === true)\n                return false;\n\n            return !licenseFactory.isLicensed();\n        }\n\n        function shouldShowProfiles() {\n            if (vm.applicationSettings.disableMasterLogin === true)\n                return false;\n\n            return licenseFactory.isLicensed();\n        }\n\n        function showLoginLink() {\n            $rootScope.$broadcast(\"modal-login-link:show\", $scope.connectionType,\n                $scope.configuration[$scope.connectionType]);\n            vm.hide();\n        }\n\n        function profileIsSelected() {\n            return $scope.metaConfiguration.savedProfileIndex !== ''\n                && $scope.metaConfiguration.savedProfileIndex !== null;\n        }\n\n        function getProfileName(profile, useDefault) {\n            if (!useDefault && profile.name)\n                return profile.name;\n\n            if (profile.host == null || (profile.username == null && profile.remoteUsername == null))\n                return '';\n\n            return (profile.host || 'host') + \" / \" + (profile.username || profile.remoteUsername || 'username');\n        }\n\n        function getDefaultProfileName() {\n            if ($scope == null || $scope.configuration == null || $scope.connectionType == null)\n                return '';\n\n            return getProfileName($scope.configuration[$scope.connectionType], true);\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalLoginLinkController', ModalLoginLinkController);\n\n    ModalLoginLinkController.$inject = [\"$rootScope\", \"$scope\", \"jQuery\", \"requestLoginFactory\", \"$element\", \"$window\",\n        \"$translate\"];\n\n    function ModalLoginLinkController($rootScope, $scope, jQuery, requestLoginFactory, $element, $window, $translate) {\n        var vm = this, modalId = '#modal-login-link';\n\n        vm.show = show;\n        vm.hide = hide;\n        vm.copy = copy;\n\n        $scope.$on('modal-login-link:show', function(ev, type, configuration){\n            vm.type = type;\n            vm.configuration = configuration;\n            vm.show();\n        });\n\n        function show() {\n            vm.configURL = requestLoginFactory.getConfigURL(vm.type, vm.configuration);\n            vm.supportsCopy = browserSupportsCopy();\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n            $rootScope.$broadcast('modal-login:show');\n        }\n\n        function alertOnCopyFailure(textArea, message) {\n            alert(message);\n            textArea.select();\n        }\n\n        function copy() {\n            var textArea = $element.find('textarea')[0];\n            textArea.select();\n            var copySuccess = false;\n            try {\n                copySuccess = document.execCommand('copy');\n            } catch (err) {\n                copySuccess = false;\n            }\n\n            if(!copySuccess) {\n                $translate(\"COPY_FAILURE_MESSAGE\").then(function(copyFailureMessage){\n                    alertOnCopyFailure(textArea, copyFailureMessage);\n                }, function () {\n                    alertOnCopyFailure(textArea, \"Unfortunately your browser does not support automatic copying, \" +\n                        \"please copy the address from the text box.\");\n                });\n            }\n        }\n\n        function browserSupportsCopy() {\n            var userAgent = $window.navigator.userAgent;\n            if(/chrome/i.test(userAgent))\n                return true;\n\n            if(/safari/i.test(userAgent))\n                return false;\n\n            if(document.queryCommandEnabled == undefined)\n                return false;\n\n            return document.queryCommandEnabled('copy');\n        }\n\n        jQuery(modalId).on('shown.bs.modal', function(){\n            jQuery(this).find(\"textarea\").select();\n        });\n    }\n}());\n\n","(function() {\n    angular.module('MonstaFTP').controller('ModalAddonsController', ModalAddonsController);\n\n    ModalAddonsController.$inject = ['jQuery', 'licenseFactory', '$scope', '$filter'];\n\n    function ModalAddonsController(jQuery, licenseFactory, $scope, $filter) {\n        var modalId = '#modal-addons', vm = this;\n\n        vm.show = show;\n\n        $scope.$on('modal-addons:show', function () {\n            vm.show();\n        });\n\n        function show() {\n            vm.formattedExpiryDate = $filter('date')(licenseFactory.expiryDate, \"d MMMM, yyyy\");\n            vm.licenseExpired = licenseFactory.isLicenseExpired();\n            vm.isLicensed = licenseFactory.isLicensed();\n            jQuery(modalId).modal('show');\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalErrorController', ModalErrorController);\n\n    ModalErrorController.$inject = ['$scope', 'jQuery', '$translate'];\n\n    function ModalErrorController($scope, jQuery, $translate) {\n        var vm = this, modalErrorId = '#modal-error';\n        vm.message = '';\n        vm.show = show;\n        vm.hide = hide;\n        vm.dismissCallback = dismissCallback;\n\n        $scope.$on('modal-error:show', function (ev, message, dismissCallback, context) {\n            $translate(message, context).then(function(translatedMessage){\n                vm.message = translatedMessage;\n            }, function () {\n                vm.message = message;\n            });\n\n            vm.dismissCallback = dismissCallback;\n            jQuery(modalErrorId).modal('show');\n        });\n\n        jQuery(modalErrorId).on('shown.bs.modal', function () {\n            $scope.$apply();\n        });\n\n        function show() {\n            jQuery(modalErrorId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalErrorId).modal('hide');\n            if (vm.dismissCallback)\n                vm.dismissCallback();\n        }\n\n        function dismissCallback() {\n            // empty\n        }\n    }\n\n}());\n","(function () {\n    angular.module('MonstaFTP').controller('ModalConfirmController', ['$scope', 'jQuery', ModalConfirmController]);\n\n    function ModalConfirmController($scope, jQuery) {\n        var modalConfirmId = '#modal-confirm', vm = this;\n\n        vm.message = '';\n        vm.okCallback = null;\n        vm.cancelCallback = null;\n\n        vm.show = show;\n        vm.ok = okHandler;\n        vm.cancel = cancelHandler;\n\n        $scope.$on('modal-confirm:show', function (ev, message, okCallback, cancelCallback) {\n            vm.message = message;\n            vm.okCallback = (typeof okCallback == 'undefined') ? null : okCallback;\n            vm.cancelCallback = (typeof cancelCallback == 'undefined') ? null : cancelCallback;\n            vm.show();\n        });\n\n        function okHandler() {\n            jQuery(modalConfirmId).modal('hide');\n            if (vm.okCallback != null) {\n                vm.okCallback();\n                vm.okCallback = null;\n            }\n        }\n\n        function cancelHandler() {\n            jQuery(modalConfirmId).modal('hide');\n            if (vm.cancelCallback != null) {\n                vm.cancelCallback();\n                vm.cancelCallback = null;\n            }\n        }\n\n        function show() {\n            jQuery(modalConfirmId).modal('show');\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalPermissionsController', ModalPermissionsController);\n\n    ModalPermissionsController.$inject = ['$scope', '$rootScope', 'connectionFactory', 'jQuery','permissionsFactory',\n        '$translate'];\n\n    function ModalPermissionsController($scope, $rootScope, connectionFactory, jQuery, permissionsFactory, $translate) {\n        var modalPermissionsEditorId = '#modal-chmod', vm = this;\n        $scope.filePaths = null;\n        $scope.permissions = null;\n        $scope.formattedPermissions = null;\n        $scope.invalidRange = false;\n        $scope.saving = false;\n\n        vm.show = show;\n        vm.hide = hide;\n        vm.validateFormattedPermission = validateFormattedPermission;\n        vm.formattedPermissionsChange = formattedPermissionsChange;\n        vm.setPermissions = setPermissions;\n        vm.zeroPadLeft = zeroPadLeft;\n        vm.setFormattedPermissions = setFormattedPermissions;\n        vm.permissionsChange = permissionsChange;\n        vm.permissionSaveError = permissionSaveError;\n        vm.permissionSaveSuccess = permissionSaveSuccess;\n        vm.initiatePermissionsSave = initiatePermissionsSave;\n\n        $scope.$on('modal-permissions:show', function (ev, filePaths, numericPermissions) {\n            $scope.filePaths = filePaths;\n            vm.setPermissions(numericPermissions);\n            vm.show();\n        });\n\n        $scope.$watch('permissions', vm.permissionsChange, true);\n\n        $scope.$watch('formattedPermissions', vm.formattedPermissionsChange);\n\n        $scope.manualFocus = function () {\n            $scope.invalidRange = false;\n        };\n\n        $scope.okClick = function () {\n            if ($scope.invalidRange)\n                return;\n\n            vm.initiatePermissionsSave();\n        };\n\n        $scope.cancelClick = function () {\n            vm.hide();\n        };\n\n        function show() {\n            jQuery(modalPermissionsEditorId).modal('show');\n            $scope.invalidRange = false;\n        }\n\n        function hide() {\n            $scope.filePaths = null;\n            $scope.invalidRange = false;\n            jQuery(modalPermissionsEditorId).modal('hide');\n        }\n\n        function setPermissions(numericPermissions) {\n            $scope.permissions = permissionsFactory.numericToObject(numericPermissions);\n        }\n\n        function zeroPadLeft(input) {\n            while (input.length < 3)\n                input = '0' + input;\n\n            return input;\n        }\n\n        function setFormattedPermissions(numericPermissions) {\n            $scope.formattedPermissions = vm.zeroPadLeft(numericPermissions.toString(8));\n        }\n\n        function permissionsChange() {\n            if ($scope.permissions != null)\n                vm.setFormattedPermissions(permissionsFactory.objectToNumeric($scope.permissions));\n        }\n\n        function validateFormattedPermission(formattedPermission) {\n            var numericPermissions = parseInt(formattedPermission, 8);\n            if (isNaN(numericPermissions) || numericPermissions < 0 || numericPermissions > 511) {\n                numericPermissions = 0;\n                $scope.invalidRange = true;\n            }\n            return numericPermissions;\n        }\n\n        function formattedPermissionsChange() {\n            vm.setPermissions(vm.validateFormattedPermission($scope.formattedPermissions));\n        }\n\n        function permissionSaveError(error, context) {\n            $scope.saving = false;\n            $translate(['PERMISSIONS_FAILURE_PRECEDING_MESSAGE', error], context).then(function (translations) {\n                $rootScope.$broadcast('modal-error:show',\n                    translations['PERMISSIONS_FAILURE_PRECEDING_MESSAGE'] + ' ' + translations[error]);\n            });\n        }\n\n        function permissionSaveSuccess() {\n            $scope.saving = false;\n            $rootScope.$broadcast('change-directory');\n            vm.hide();\n        }\n\n        function initiatePermissionsSave() {\n            var filesSaved = 0, mode = permissionsFactory.objectToNumeric($scope.permissions);\n\n            var checkCompleted = function () {\n                ++filesSaved;\n\n                if (filesSaved == $scope.filePaths.length)\n                    vm.permissionSaveSuccess();\n            };\n\n            $scope.saving = true;\n\n            $scope.filePaths.map(function (path) {\n                connectionFactory.changePermissions(path, mode).then(function () {\n                    checkCompleted();\n                }, function (response) {\n                    var action = \"permission save\";\n                    vm.permissionSaveError(parseErrorResponse(response, action), {action: action});\n                });\n            });\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalPromptController', ModalPromptController);\n\n    ModalPromptController.$inject = ['$scope', 'jQuery', '$translate'];\n\n    function ModalPromptController($scope, jQuery, $translate) {\n        var modalPromptId = '#modal-prompt', vm = this;\n\n        this.setVars = function (title, initial, placeHolder) {\n            $translate(title).then(function (translatedTitle) {\n                $scope.title = translatedTitle;\n            }, function () {\n                $scope.title = title;\n            });\n\n            $translate(placeHolder).then(function (translatedPlaceholder) {\n                $scope.placeHolder = translatedPlaceholder;\n            }, function () {\n                $scope.placeHolder = placeHolder;\n            });\n\n            $scope.initial = initial;\n            $scope.final = initial;\n            $scope.errorSet = false;\n            $scope.errorMessage = '';\n            $scope.isBusy = false;\n            $scope.busyMessage = null;\n            this.updateDismissMessage();\n        };\n\n        this.updateDismissMessage = function () {\n            $translate($scope.busyMessage || 'DISMISS_OK_ACTION').then(function (translatedDismissMessage) {\n                $scope.dismissMessage = translatedDismissMessage;\n            }, function (dismissMessage) {\n                $scope.dismissMessage = dismissMessage;\n            });\n        };\n\n        jQuery(modalPromptId).on('shown.bs.modal', function () {\n            jQuery(this).find('input[type=text]').focus();\n        });\n\n        this.setVars('', '', '');\n\n        this.successCallback = function () {\n            // empty\n        };\n\n        $scope.successClose = function () {\n            vm.successCallback($scope.final, $scope.initial);\n        };\n\n        $scope.handlePromptKeypress = function ($event) {\n            if ($event.which == 13)\n                $scope.successClose();\n        };\n\n        this.show = function () {\n            jQuery(modalPromptId).modal('show');\n            vm.clearError();\n            vm.clearBusy();\n        };\n\n        this.hide = function () {\n            jQuery(modalPromptId).modal('hide');\n        };\n\n        this.clearError = function () {\n            $scope.errorSet = false;\n            $scope.errorMessage = '';\n        };\n\n        this.setBusy = function (busyMessage) {\n            $scope.isBusy = true;\n            $scope.busyMessage = busyMessage;\n            this.updateDismissMessage();\n        };\n\n        this.clearBusy = function () {\n            $scope.isBusy = false;\n            $scope.busyMessage = null;\n            this.updateDismissMessage();\n        };\n\n        $scope.$on('modal-prompt:show', function (ev, title, initial, placeHolder, successCallback) {\n            vm.setVars(title, initial, placeHolder);\n            vm.successCallback = successCallback;\n            vm.show();\n        });\n\n        $scope.$on('modal-prompt:set-error', function (ev, errorMessage) {\n            $scope.errorSet = true;\n\n            $translate(errorMessage).then(function (translatedErrorMessage) {\n                $scope.errorMessage = translatedErrorMessage;\n            }, function () {\n                $scope.errorMessage = errorMessage;\n            });\n        });\n\n        $scope.$on('modal-prompt:clear-error', function () {\n            vm.clearError();\n        });\n\n        $scope.$on('modal-prompt:hide', function () {\n            vm.hide();\n        });\n\n        $scope.$on('modal-prompt:set-busy', function (ev, busyMessage) {\n            vm.setBusy(busyMessage);\n        });\n\n        $scope.$on('modal-prompt:clear-busy', function () {\n            vm.clearBusy();\n        });\n    }\n}());","(function(){\n    angular.module('MonstaFTP').controller('ModalPropertiesController', ModalPropertiesController);\n\n    ModalPropertiesController.$inject = ['jQuery', '$scope'];\n\n    function ModalPropertiesController(jQuery, $scope) {\n        var vm = this, modalPropertiesId = \"#modal-properties\";\n        vm.item = null;\n\n        vm.hide = hide;\n        vm.show = show;\n\n        $scope.$on('modal-properties:show', function (ev, item) {\n           vm.show(item);\n        });\n\n        function hide() {\n            jQuery(modalPropertiesId).modal('hide');\n        }\n\n        function show(item){\n            vm.item = item;\n            jQuery(modalPropertiesId).modal('show');\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('ModalChoiceController', ModalChoiceController);\n\n    ModalChoiceController.$inject = [\"$scope\", \"jQuery\", '$timeout'];\n\n    function ModalChoiceController($scope, jQuery, $timeout) {\n        var vm = this, modalId = \"#modal-choice\";\n        vm.callbacks = [];\n        vm.title = null;\n        vm.message = null;\n        vm.show = show;\n        vm.handleCallback = handleCallback;\n\n        $scope.$on('modal-choice:show', function (ev, title, message, callbacks) {\n            vm.title = title;\n            vm.message = message;\n            vm.callbacks = callbacks;\n\n            $timeout(function () {\n                $scope.$apply(function () {\n                    vm.show();\n                });\n            });\n        });\n\n        function show() {\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n        }\n\n        function handleCallback(callbackIndex) {\n            vm.callbacks[callbackIndex][1]();\n            hide();\n        }\n    }\n}());","(function () {\n    var TRANSFER_UI_UPDATE_DELAY = 200;  // only update the UI after this many MS\n\n    angular.module('MonstaFTP').controller('ModalTransferController', ModalTransferController);\n\n    ModalTransferController.$inject = ['uploadFactory', '$rootScope', '$scope', 'jQuery', '$timeout',\n        '$filter'];\n\n    function ModalTransferController(uploadFactory, $rootScope, $scope, jQuery, $timeout, $filter) {\n        var modalId = '#modal-transfers', vm = this, updateApplyTimeout = null;\n\n        vm.updateUploads = updateUploads;\n        vm.uploadFinished = uploadFinished;\n        vm.show = show;\n        vm.hide = hide;\n        vm.abortItem = abortItem;\n        vm.abortAll = abortAll;\n        vm.fsFilter = $filter('file_size');\n\n        vm.uploads = [];\n        vm.itemToAbort = null;\n\n        uploadFactory.updateCallback = vm.updateUploads;\n\n        $scope.$on('upload:load', this.uploadFinished);\n        $scope.$on('upload:add', this.show);\n\n        function updateUploads(instantUpdate) {\n            var uploads = uploadFactory.getUploads();\n            if (uploads.length == 0) {\n                updateApplyTimeout = null;\n                vm.uploads = uploads;\n                vm.hide();\n            } else {\n                var timeout = instantUpdate ? 0 : TRANSFER_UI_UPDATE_DELAY;\n\n                if(instantUpdate && updateApplyTimeout != null) {\n                    clearTimeout(updateApplyTimeout);\n                    updateApplyTimeout = null;\n                }\n\n                if(updateApplyTimeout == null) {\n                    vm.uploads = uploads;\n                    updateApplyTimeout = $timeout(function () {\n                        $scope.$apply();\n                        updateApplyTimeout = null;\n                    }, timeout);\n                }\n            }\n        }\n\n        function uploadFinished() {\n            vm.updateUploads();\n            if(vm.uploads.length == 0)\n                $rootScope.$broadcast('change-directory'); // refresh directory\n            else\n                $rootScope.$broadcast('change-directory:on-upload'); // refresh directory which is allowed to fail\n        }\n\n        function show() {\n            vm.updateUploads();\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n        }\n\n        function abortItem(item) {\n            uploadFactory.abortItem(item);\n            vm.updateUploads();\n        }\n\n        function abortAll() {\n            uploadFactory.abortAll();\n        }\n    }\n}());","(function () {\n    angular.module('MonstaFTP').directive('uploadProgressBar', uploadProgressBar);\n\n    uploadProgressBar.$inject = ['transfer_percentFilter'];\n\n    function uploadProgressBar(transfer_percentFilter) {\n        function getProgressBarHtml(upload) {\n            var indeterminateClasses = '';\n\n            if (upload.stats.completedBytes == upload.stats.totalBytes)\n                indeterminateClasses = ' progress-bar-striped active';\n\n            var transferPercent = transfer_percentFilter(upload);\n\n            return '<div class=\"progress-bar progress-bar-success' + indeterminateClasses + '\" ' +\n                'role=\"progressbar\" aria-valuenow=\"' + transferPercent + '\" ' +\n                'aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: ' + transferPercent + '%;\"></div>';\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                upload: '='\n            },\n            template: '<div></div>',\n            link: function ($scope, element, attrs) {\n                var updatePBarHtml = function () {\n                    element.html(getProgressBarHtml($scope.upload));\n                };\n\n                updatePBarHtml();\n\n                $scope.$watch('upload.stats', function () {\n                    updatePBarHtml();\n                }, true);\n            }\n        };\n    }\n}());","(function(){\n    angular.module('MonstaFTP').controller('ModalSettingsController', ModalSettingsController);\n\n    ModalSettingsController.$inject = ['jQuery', '$scope', 'configurationFactory', '$rootScope', '$translate',\n        'localConfigurationFactory'];\n\n    function ModalSettingsController(jQuery, $scope, configurationFactory, $rootScope, $translate,\n                                     localConfigurationFactory) {\n        var modalId = '#modal-settings', vm = this, applicationSettingsKeys = [], previousShowDotFiles;\n        vm.applicationSettings = {};\n        vm.show = show;\n        vm.saveSettings = saveSettings;\n        vm.debug = DEBUG;\n        vm.systemShowDotFiles = false;\n\n        configurationFactory.getSystemConfiguration().then(systemVarLoadSuccess, systemVarLoadFailure);\n\n        $scope.$on('modal-settings:show', function () {\n            localConfigurationFactory.getApplicationSettings().then(function(){\n                for (var i = 0; i < applicationSettingsKeys.length; ++i) {\n                    var key = applicationSettingsKeys[i];\n                    vm.applicationSettings[key] = localConfigurationFactory.getConfigurationItem(key);\n                }\n                vm.show();\n            }, systemVarLoadFailure);\n        });\n\n        function show() {\n            previousShowDotFiles = vm.applicationSettings.showDotFiles;\n            jQuery(modalId).modal('show');\n        }\n\n        function hide() {\n            jQuery(modalId).modal('hide');\n        }\n\n        function systemVarLoadSuccess(vars) {\n            vm.systemShowDotFiles = vars.applicationSettings.showDotFiles;\n            applicationSettingsKeys = Object.keys(vars.applicationSettings);\n        }\n\n        function systemVarLoadFailure(response) {\n            showResponseError(response, \"system var load\", $rootScope, $translate);\n        }\n        \n        function saveSettings() {\n            for(var key in vm.applicationSettings){\n                if (vm.applicationSettings.hasOwnProperty(key))\n                    localConfigurationFactory.setConfigurationItem(key, vm.applicationSettings[key]);\n            }\n\n            if (vm.applicationSettings.showDotFiles != previousShowDotFiles)\n                $rootScope.$broadcast('change-directory');\n\n            hide();\n        }\n\n        $rootScope.$on('configuration:key-changed', function (ev, key, value) {\n            if(key == 'language') {\n                $translate.use(value);\n            }\n        });\n    }\n}());","(function () {\n    angular.module('MonstaFTP').controller('SlidebarController', SlidebarController);\n\n    SlidebarController.$inject = ['authenticationFactory', '$rootScope', 'jQuery', '$translate'];\n\n    function SlidebarController(authenticationFactory, $rootScope, jQuery, $translate) {\n        var vm = this;\n\n        jQuery('#slidebar').ready(function () {\n            jQuery.slidebars();\n        });\n\n        vm.confirmLogout = confirmLogout;\n\n        function confirmLogout() {\n            jQuery.slidebars.close('#slidebar');\n            authenticationFactory.logout();\n            $rootScope.$broadcast('logout');\n        }\n\n        vm.initiateLogout = initiateLogout;\n        vm.showAddonsModal = showAddonsModal;\n        vm.showSettingsModal = showSettingsModal;\n        vm.showLoginPanel = showLoginPanel;\n\n        function showModalConfirm(translatedMessage) {\n            $rootScope.$broadcast('modal-confirm:show', translatedMessage, vm.confirmLogout);\n        }\n\n        function initiateLogout() {\n            $translate('LOGOUT_CONFIRM_MESSAGE').then(showModalConfirm, showModalConfirm);\n        }\n\n        function showAddonsModal() {\n            $rootScope.$broadcast('modal-addons:show');\n        }\n\n        function showSettingsModal() {\n            $rootScope.$broadcast('modal-settings:show');\n        }\n\n        function showLoginPanel() {\n            $rootScope.$broadcast('modal-login:show');\n            jQuery.slidebars.close('#slidebar');\n        }\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').controller('SpinnerController', SpinnerController);\n\n    SpinnerController.$inject = ['$scope'];\n\n    function SpinnerController($scope) {\n        $scope.spinnerVisible = false;\n\n        $scope.$on('request-count-change', function (ev, reqCount) {\n            $scope.spinnerVisible = reqCount != 0;\n        });\n    }\n}());\n","(function () {\n    angular.module('MonstaFTP').factory('permissionsFactory', permissionsFactory);\n\n    function permissionsFactory() {\n        return {\n            objectToNumeric: function (permissions) {\n                return (permissions.ownerRead ? 0x100 : 0) + (permissions.ownerWrite ? 0x80 : 0) +\n                    (permissions.ownerExecute ? 0x40 : 0) + (permissions.groupRead ? 0x20 : 0) +\n                    (permissions.groupWrite ? 0x10 : 0) + (permissions.groupExecute ? 0x8 : 0) +\n                    (permissions.otherRead ? 0x4 : 0) + (permissions.otherWrite ? 0x2 : 0) +\n                    (permissions.otherExecute ? 0x1 : 0);\n            },\n            numericToObject: function (numericPermission) {\n                return {\n                    ownerRead: (numericPermission & 0x100) != 0,\n                    ownerWrite: (numericPermission & 0x80) != 0,\n                    ownerExecute: (numericPermission & 0x40) != 0,\n                    groupRead: (numericPermission & 0x20) != 0,\n                    groupWrite: (numericPermission & 0x10) != 0,\n                    groupExecute: (numericPermission & 0x8) != 0,\n                    otherRead: (numericPermission & 0x4) != 0,\n                    otherWrite: (numericPermission & 0x2) != 0,\n                    otherExecute: (numericPermission & 0x1) != 0\n                };\n            }\n        }\n    }\n}());\n\n","(function () {\n    angular.module('MonstaFTP').factory('uiOperationFactory', uiOperationFactory);\n\n    uiOperationFactory.$inject = ['$rootScope'];\n\n    function uiOperationFactory($rootScope) {\n        return {\n            cutSource: null,\n            copySource: null,\n            currentDirectory: \"\",\n            setCutSource: function (newCutSource) {\n                this.cutSource = newCutSource;\n                this.copySource = null;\n\n                if (newCutSource != null)\n                    $rootScope.$broadcast('paste-source:set');\n            },\n            setCopySource: function (newCopySource) {\n                this.copySource = newCopySource;\n                this.cutSource = null;\n\n                if (newCopySource != null)\n                    $rootScope.$broadcast('paste-source:set');\n            },\n            pasteComplete: function () {\n                if (this.cutSource != null)\n                    $rootScope.$broadcast('paste-source:cleared');\n                this.cutSource = null;\n            },\n            clearCutAndCopySource: function () {\n                this.copySource = null;\n                this.cutSource = null;\n                $rootScope.$broadcast('paste-source:cleared');\n            },\n            isCutOrCopySource: function (path) {\n                return path == this.copySource || path == this.cutSource;\n            },\n            joinNameToCurrentDirectory: function (name) {\n                return pathJoin(this.currentDirectory, name);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('requestLoginFactory', requestLoginFactory);\n\n    requestLoginFactory.$inject = [\"$location\"];\n\n    function requestLoginFactory($location) {\n        var factory = {};\n\n        factory.encodeConfiguration = encodeConfiguration;\n        factory.decodeConfiguration = decodeConfiguration;\n        factory.getPreHashURL = getPreHashURL;\n        factory.getConfigURL = getConfigURL;\n        factory.compactConfigKeys = compactConfigKeys;\n        factory.uncompactConfigKeys = uncompactConfigKeys;\n        factory.decodePostHash = decodePostHash;\n        factory.getConfigFromCurrentURL = getConfigFromCurrentURL;\n        factory.getFormFieldHTML = getFormFieldHTML;\n\n        function encodeConfiguration(type, configuration) {\n            var configDict = {\n                t: type,\n                c: factory.compactConfigKeys(configuration)\n            };\n            return encodeURIComponent(b64EncodeUnicode(JSON.stringify(configDict)));\n        }\n\n        function decodeConfiguration(encodedConfiguration) {\n            var configDict = JSON.parse(b64DecodeUnicode(decodeURIComponent(encodedConfiguration)));\n\n            return {\n                type: configDict.t,\n                configuration: factory.uncompactConfigKeys(configDict.c)\n            };\n        }\n\n        function decodePostHash(postHash) {\n            if (isEmpty(postHash))\n                return null;\n\n            if (postHash.substr(0, 1) == \"/\")\n                postHash = postHash.substr(1);\n\n            var splitURL = postHash.split(\"/\");\n\n            if (splitURL.length < 4 || splitURL[0] != 'c')\n                return null;\n\n            var host = splitURL[1], username = splitURL[2], config = splitURL[3], decodedConfiguration = null;\n\n            try {\n                decodedConfiguration = factory.decodeConfiguration(config);\n            } catch (e) {\n                return null;\n            }\n\n            if (host != \"_\")\n                decodedConfiguration.configuration.host = host;\n\n            if (username != \"_\") {\n                var usernameKey = decodedConfiguration.type == 'sftp' ? 'remoteUsername' : 'username';\n\n                decodedConfiguration.configuration[usernameKey] = username;\n            }\n\n            return decodedConfiguration;\n        }\n\n        function getPreHashURL() {\n            var absURL = $location.absUrl();\n            var splitURL = absURL.split('#');\n            return splitURL[0];\n        }\n\n        function getConfigURL(type, configuration) {\n            if(configuration == null)\n                return null;\n\n            configuration = angular.copy(configuration);\n            var host = null, username = null;\n\n            if (configuration.hasOwnProperty('host')) {\n                host = configuration.host;\n                delete configuration.host;\n            }\n\n            var usernameKey = type == 'sftp' ? 'remoteUsername' : 'username';\n\n            if (configuration.hasOwnProperty(usernameKey)) {\n                username = configuration[usernameKey];\n                delete configuration[usernameKey];\n            }\n\n            if (isEmpty(host))\n                host = '_';\n            else\n                host = encodeURIComponent(host);\n\n            if (isEmpty(username))\n                username = '_';\n            else\n                username = encodeURIComponent(username);\n\n            var postHash = '/c/' + host + '/' + username + '/' + factory.encodeConfiguration(type, configuration);\n\n            return factory.getPreHashURL() + \"#\" + postHash;\n        }\n\n        function getConfigFromCurrentURL() {\n            var absURL = $location.absUrl();\n            var splitURL = absURL.split('#');\n            if(splitURL.length == 1)\n                return null;\n\n            return decodePostHash(splitURL[1]);\n        }\n\n        function getTransformLookup(isCompact) {\n            var compactLookup = [\n                [\"passive\", \"v\"],\n                [\"ssl\", \"s\"],\n                [\"password\", \"p\"],\n                [\"initialDirectory\", \"i\"],\n                [\"port\", \"o\"],\n                [\"authenticationModeName\", \"m\"],\n                [\"privateKeyFilePath\", \"r\"],\n                [\"publicKeyFilePath\", \"q\"]\n            ];\n\n            var to = isCompact ? 1 : 0;\n            var from = isCompact ? 0 : 1;\n\n            var transformLookup = {};\n\n            for (var i = 0; i < compactLookup.length; ++i) {\n                transformLookup[compactLookup[i][from]] = compactLookup[i][to];\n            }\n\n            return transformLookup;\n        }\n\n        function compactAndUncompact(isCompact, toTransform) {\n            var transformResult = {};\n\n            var transformLookup = getTransformLookup(isCompact);\n\n            for (var key in toTransform) {\n                if (!toTransform.hasOwnProperty(key))\n                    continue;\n\n                var value = toTransform[key];\n\n                if (transformLookup.hasOwnProperty(key))\n                    key = transformLookup[key];\n\n                if (isCompact) {\n                    if (value === true)\n                        value = 1;\n                    else if (value === false)\n                        value = 0;\n                } else {\n                    if (value === 1)\n                        value = true;\n                    if (value === 0)\n                        value = false;\n                }\n\n                transformResult[key] = value;\n            }\n\n            return transformResult;\n        }\n\n        function compactConfigKeys(config) {\n            return compactAndUncompact(true, config);\n        }\n\n        function uncompactConfigKeys(config) {\n            return compactAndUncompact(false, config);\n        }\n\n        function getFormFieldHTML(name, value) {\n            var entityMap = {\n                \"&\": \"&amp;\",\n                \"<\": \"&lt;\",\n                \">\": \"&gt;\",\n                '\"': '&quot;'\n            };\n\n            value = String(value).replace(/[&<>\"]/g, function (s) {\n                return entityMap[s];\n            });\n\n            return '<input type=\"hidden\" name=\"'+ name +'\" value=\"' + value + '\">'\n        }\n\n        return factory;\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('uploadUIFactory', uploadUIFactory);\n\n    uploadUIFactory.$inject = ['uiOperationFactory', 'uploadFactory', '$filter', '$rootScope', '$translate'];\n\n    function uploadUIFactory(uiOperationFactory, uploadFactory, $filter, $rootScope, $translate) {\n        var sizeFilter = $filter('file_size'),\n            NAME_INDEX = 0,\n            REMOTE_PATH_INDEX = 1,\n            FILE_INDEX = 2,\n            SIZE_INDEX = 3,\n            IS_ARCHIVE_INDEX = 4;\n\n        function showErrorModal(message) {\n            $rootScope.$broadcast('modal-error:show', message, function () {\n\n            });\n        }\n\n        function showTooLargeFilesError(message, tooLargeFiles) {\n            for (var fileIndex = 0; fileIndex < tooLargeFiles.length; ++fileIndex) {\n                var fileData = tooLargeFiles[fileIndex];\n                message += \"<br>&nbsp;&nbsp;&nbsp;&nbsp;\" + fileData[0] + \" (\" + sizeFilter(fileData[1]) + \")\";\n            }\n\n            showErrorModal(message);\n        }\n\n        function broadcastExtractMessage(factory, $rootScope, message) {\n            $rootScope.$broadcast(\"modal-choice:show\", \"EXTRACT_AFTER_UPLOAD_TITLE\", message, [\n                [\"UPLOAD_STANDARD_ACTION\", function () {\n                    factory.uploadStandardCallback()\n                }],\n                [\"UPLOAD_EXTRACT_ACTION\", function () {\n                    factory.uploadAndExtractCallback()\n                }]\n            ]);\n        }\n\n        return {\n            tooLargeFiles: [],\n            filesToQueue: [],\n            fileQueueIndex: 0,\n            treeTotalSize: 0,\n            treeProcessed: 0,\n            traverseFinished: false,\n            uploadStandardCallback: function () {\n                this.filesToQueue[this.fileQueueIndex][IS_ARCHIVE_INDEX] = false;\n                this.processUploadQueue();\n            },\n            uploadAndExtractCallback: function () {\n                this.filesToQueue[this.fileQueueIndex][IS_ARCHIVE_INDEX] = true;\n                this.processUploadQueue();\n            },\n            promptForExtract: function (fileName) {\n                var _this = this;\n                $translate(\"EXTRACT_AFTER_UPLOAD_MESSAGE\", {\n                    file_name: fileName,\n                    file_type: extractFileExtension(fileName)\n                }).then(function (translatedMessage) {\n                    broadcastExtractMessage(_this, $rootScope, translatedMessage);\n                }, function () {\n                    broadcastExtractMessage(_this, $rootScope, \"Extract \" + fileName + \" after uploading?\");\n                });\n            },\n            processUploadQueue: function () {\n                if (this.fileQueueIndex >= this.filesToQueue.length) {\n                    this.checkTooLargeFiles();\n                    this.performUploads();\n                    return;\n                }\n\n                var fileInfo = this.filesToQueue[this.fileQueueIndex];\n\n                if (fileInfo[IS_ARCHIVE_INDEX] == null && extractFileExtension(fileInfo[NAME_INDEX]) == \"zip\")\n                    this.promptForExtract(fileInfo[NAME_INDEX]);\n                else {\n                    ++this.fileQueueIndex;\n                    this.processUploadQueue();\n                }\n            },\n            performUploads: function () {\n                for (var i = 0; i < this.filesToQueue.length; ++i) {\n                    var fileInfo = this.filesToQueue[i];\n                    uploadFactory.addUpload(fileInfo[NAME_INDEX], fileInfo[REMOTE_PATH_INDEX], fileInfo[FILE_INDEX],\n                        fileInfo[SIZE_INDEX], fileInfo[IS_ARCHIVE_INDEX]);\n                }\n\n                this.filesToQueue = [];\n                this.fileQueueIndex = 0;\n                this.tooLargeFiles = [];\n            },\n            checkTooLargeFiles: function () {\n                if (this.tooLargeFiles.length != 0) {\n                    var tLFCopy = this.tooLargeFiles.slice();\n                    $translate('UPLOAD_FILES_TOO_LARGE_MESSAGE', {\n                        item_count: this.tooLargeFiles.length,\n                        maximum_size: sizeFilter(MAX_UPLOAD_BYTES)\n                    }).then(function (translatedMessage) {\n                        showTooLargeFilesError(translatedMessage, tLFCopy);\n                    }, function (message) {\n                        showTooLargeFilesError(message, tLFCopy);\n                    });\n                }\n            },\n            doUploadAdd: function (file, relativeFilePath, isArchive) {\n                var remotePath = uiOperationFactory.joinNameToCurrentDirectory(relativeFilePath);\n\n                if (file.size > MAX_UPLOAD_BYTES)\n                    this.tooLargeFiles.push([relativeFilePath, file.size]);\n                else\n                    this.filesToQueue.push([file.name, remotePath, file, file.size, isArchive]);\n            },\n            traverseFileTree: function (item, path, isArchive) {\n                path = path || \"\";\n                var _this = this;\n                if (item.isFile) {\n                    ++_this.treeTotalSize;\n                    item.file(function (file) {\n                        ++_this.treeProcessed;\n                        var relativeFilePath = pathJoin(path, item.name);\n                        _this.doUploadAdd.call(_this, file, relativeFilePath, isArchive);\n                        if (_this.traverseFinished && _this.treeProcessed == _this.treeTotalSize) {\n                            _this.processUploadQueue();\n                        }\n                    });\n                } else if (item.isDirectory) {\n                    var dirReader = item.createReader();\n                    dirReader.readEntries(function (entries) {\n                        for (var entryIndex = 0; entryIndex < entries.length; ++entryIndex) {\n                            _this.traverseFileTree.call(_this, entries[entryIndex], pathJoin(path, item.name),\n                                isArchive);\n                        }\n                    });\n                }\n            },\n            handleItemsBasedUpload: function (items, isArchive) {\n                if (!EXTRACT_UPLOAD)\n                    isArchive = false;\n\n                this.tooLargeFiles = [];\n                this.filesToQueue = [];\n                this.fileQueueIndex = 0;\n                this.treeTotalSize = 0;\n                this.treeProcessed = 0;\n                this.traverseFinished = false;\n                for (var itemIndex = 0; itemIndex < items.length; ++itemIndex) {\n                    var item = items[itemIndex].webkitGetAsEntry();\n                    if (item)\n                        this.traverseFileTree(item, null, isArchive);\n                }\n                this.fileQueueIndex = 0;\n                this.traverseFinished = true;\n            },\n            handleFilesBasedUpload: function (files, isArchive) {\n                if (!EXTRACT_UPLOAD)\n                    isArchive = false;\n\n                this.tooLargeFiles = [];\n                this.filesToQueue = [];\n                this.fileQueueIndex = 0;\n                var checkedFilesCount = 0, _this = this;\n\n                var handleFileCheckFinished = function () {\n                    if (checkedFilesCount != files.length)\n                        return;\n\n                    for (fileIndex = 0; fileIndex < files.length; ++fileIndex) {\n                        file = files[fileIndex];\n                        var relativeFilePath = file.webkitRelativePath ? file.webkitRelativePath : file.name;\n                        _this.doUploadAdd.call(_this, file, relativeFilePath, isArchive);\n                    }\n                    _this.processUploadQueue();\n                };\n\n                if (window.FileReader == undefined) {\n                    // can't check if it's file or folder so just try to upload and hope for the best\n                    checkedFilesCount = files.length;\n                    handleFileCheckFinished();\n                    return;\n                }\n\n                var loadSuccess = function () {\n                    ++checkedFilesCount;\n                    handleFileCheckFinished();\n                };\n\n                var showChromeFolderUploadError = function () {\n                    $translate('FOLDER_UPLOAD_CHROME_ONLY_MESSAGE').then(showErrorModal, showErrorModal);\n                };\n\n                if (files.length == 0) {\n                    // happens for folder drag drop in IE\n                    showChromeFolderUploadError();\n                    return;\n                }\n\n                var userAgent = window.navigator.userAgent;\n\n                var isInternetExplorer = /trident/i.test(userAgent) || /msie/i.test(userAgent);\n\n                for (var fileIndex = 0; fileIndex < files.length; ++fileIndex) {\n                    if (isInternetExplorer) {\n                        loadSuccess();  // if dropping a folder on IE files will be empty and we won't get here\n                        continue\n                    }\n\n                    var file = files[fileIndex];\n\n                    var reader = new FileReader();\n\n                    reader.onerror = function (e) {\n                        showChromeFolderUploadError();\n                    };\n\n                    reader.onload = loadSuccess;\n                    if (file.size <= MAX_UPLOAD_BYTES) {\n                        // we won't be able to upload them anyway so don't bother reading\n                        try {\n                            var s = file.slice(0, Math.min(file.size, 1024));\n\n                            if(s.size == 0)\n                                reader.readAsBinaryString(file); // might be a directory depending on browser\n                            else\n                                reader.readAsBinaryString(s);\n                        } catch (e) {\n\n                        }\n                    } else\n                        loadSuccess();\n                }\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').factory('uploadFactory', uploadFactory);\n\n    uploadFactory.$inject = ['connectionFactory', '$rootScope', '$translate'];\n\n    function uploadFactory(connectionFactory, $rootScope, $translate) {\n        var EXTRACT_PROGRESS_STEPS = 8;\n\n        return {\n            updateCallback: null,\n            _uploads: [],\n            _activeUploadCount: 0,\n            addUpload: function (name, remotePath, fileObject, size, isArchive) {\n                if(!EXTRACT_UPLOAD)\n                    isArchive = false;\n\n                if (size > MAX_UPLOAD_BYTES)\n                    return false;\n\n                this._uploads.push({\n                    name: name,\n                    remotePath: remotePath,\n                    file: fileObject,\n                    request: null,\n                    stats: new FileTransferStats(size),\n                    hasError: false,\n                    isArchive: isArchive,\n                    archiveExtractMax: 0,\n                    archiveExtractCurrent: -1\n                });\n                $rootScope.$broadcast('upload:add');\n                if (this._activeUploadCount < MAX_CONCURRENT_UPLOADS)\n                    this.startUploadOfItemAtIndex(this._uploads.length - 1);\n\n                return true;\n            },\n            startNextItem: function () {\n                if (this._activeUploadCount >= MAX_CONCURRENT_UPLOADS)\n                    return;\n\n                for (var itemIndex = 0; itemIndex < this._uploads.length; ++itemIndex) {\n                    if (this._uploads[itemIndex].stats.hasBeenStarted())\n                        continue;\n\n                    this.startUploadOfItemAtIndex(itemIndex);\n                    break;\n                }\n            },\n            getUploads: function () {\n                return this._uploads;\n            },\n            getUploadItem: function (itemIndex) {\n                return this._uploads[itemIndex];\n            },\n            progressItem: function (uploadItem, transferredBytes) {\n                if(uploadItem.stats.updateTransferAmount(transferredBytes) && this.updateCallback != null)\n                    this.updateCallback();\n            },\n            getUploadRequestBody: function (remotePath, isArchive) {\n                var requestBody = connectionFactory.getRequestBody();\n                requestBody.actionName = isArchive ? UPLOAD_ARCHIVE_ACTION : UPLOAD_ACTION;\n\n                requestBody.context = {\n                    remotePath: remotePath\n                };\n\n                return requestBody;\n            },\n            encodeRequestBody: function (requestBody) {\n                var jsonRequestBody = JSON.stringify(requestBody);\n\n                return b64EncodeUnicode(jsonRequestBody);\n            },\n            getXHR: function () {\n                return new XMLHttpRequest();\n            },\n            startXHR: function (request, requestBody, file) {\n                ++this._activeUploadCount;\n                request.open('POST', UPLOAD_PATH);\n                request.setRequestHeader(\"X-Monsta\", this.encodeRequestBody(requestBody));\n                request.send(file);\n                if(this.updateCallback != null)\n                    this.updateCallback(true);\n            },\n            startUploadOfItemAtIndex: function (itemIndex) {\n                var fileRequestDescription = this._uploads[itemIndex];\n                var request = this.getXHR();\n                fileRequestDescription.request = request;\n                var _this = this;\n\n                var requestBody = this.getUploadRequestBody(fileRequestDescription.remotePath,\n                    fileRequestDescription.isArchive);\n\n                request.upload.addEventListener(\"progress\", function (e) {\n                    if (request.readyState == XMLHttpRequest.OPENED)\n                        _this.progressItem(fileRequestDescription, e.lengthComputable ? e.loaded : null);\n                }, false);\n\n                request.upload.addEventListener('load', function () {\n                    fileRequestDescription.stats.completedBytes = fileRequestDescription.stats.totalBytes;\n                    if(this.updateCallback != null)\n                        this.updateCallback();\n                }, false);\n\n                request.onreadystatechange = function () {\n                    if (request.readyState === XMLHttpRequest.DONE) {\n                        if (request.status == 200)\n                            _this.completeItem(fileRequestDescription, request.responseText, false);\n                        else if (request.status != 0) // is zero on abort\n                            _this.setItemError(fileRequestDescription);\n                    }\n                };\n                this.startXHR(request, requestBody, fileRequestDescription.file);\n                fileRequestDescription.stats.wasStarted();\n            },\n            progressExtract: function (fileKey, uploadItem, fileCount, fileOffset) {\n                var _this = this;\n                connectionFactory.extractArchive(fileKey, fileOffset, EXTRACT_PROGRESS_STEPS).then(function () {\n                    uploadItem.archiveExtractCurrent = Math.min(fileOffset + EXTRACT_PROGRESS_STEPS, fileCount);\n\n                    if((fileOffset + EXTRACT_PROGRESS_STEPS) > (fileCount + 1)) {\n                        _this.completeItem(uploadItem, null, true);\n                    } else {\n                        _this.progressExtract(fileKey, uploadItem, fileCount, fileOffset + EXTRACT_PROGRESS_STEPS);\n                    }\n                }, function (response) {\n                    showResponseError(response, \"extract archive\", $rootScope, $translate);\n                    _this.completeItem(uploadItem, null, true);\n                });\n            },\n            completeItem: function (uploadItem, responseText, isPostExtract) {\n                var _this = this;\n                if(uploadItem.isArchive && !isPostExtract) {\n                    var responseData = JSON.parse(responseText);\n                    uploadItem.archiveExtractCurrent = 0;\n                    uploadItem.archiveExtractMax = responseData.fileCount;\n                    this.progressExtract(responseData.fileKey, uploadItem, responseData.fileCount, 0);\n                } else {\n                    --this._activeUploadCount;\n                    uploadItem.request = null;\n                    uploadItem.stats.complete();\n                    this.removeItem(uploadItem);\n\n                    setTimeout(function () {\n                        _this.broadcastComplete.call(_this);\n                    }, 0);\n                }\n            }, broadcastComplete: function () {\n                $rootScope.$broadcast('upload:load');\n                this.startNextItem();\n                if(this.updateCallback != null)\n                    this.updateCallback(true);\n            },\n            abortItem: function (uploadItem) {\n                --this._activeUploadCount;\n                if (uploadItem.request != null) {\n                    uploadItem.request.abort();\n                    uploadItem.request = null;\n                }\n\n                this.removeItem(uploadItem);\n                $rootScope.$broadcast('upload:abort');\n                this.startNextItem();\n            },\n            removeItem: function (uploadItem) {\n                this._uploadIterator(function (_itemIndex, _item) {\n                    if (uploadItem.remotePath == _item.remotePath) {\n                        if (_item.request != null)\n                            return false;\n\n                        this._uploads.splice(_itemIndex, 1);\n                        return false;\n                    }\n                })\n            },\n            setItemError: function (uploadItem) {\n                uploadItem.hasError = true;\n                if (uploadItem.request != null) {\n                    uploadItem.request = null;\n                    if(this.updateCallback != null)\n                        this.updateCallback();\n                }\n            },\n            _uploadIterator: function (callback) {\n                for (var itemIndex = 0; itemIndex < this._uploads.length; ++itemIndex) {\n                    if (callback.call(this, itemIndex, this._uploads[itemIndex]) === false)\n                        break;\n                }\n            },\n            abortAll: function () {\n                for (var itemIndex = 0; itemIndex < this._uploads.length; ++itemIndex) {\n                    var uploadItem = this._uploads[itemIndex];\n\n                    if (uploadItem.request != null) {\n                        uploadItem.request.abort();\n                        uploadItem.request = null;\n                    }\n                }\n                this._uploads = [];\n                this._activeUploadCount = 0;\n                if(this.updateCallback != null)\n                    this.updateCallback(true);\n            }\n        };\n    }\n}());","(function () {\n    angular.module('MonstaFTP').filter('file_last_modified', filesLastModified);\n\n    filesLastModified.$inject = ['dateFilter'];\n\n    function filesLastModified(dateFilter) {\n        function filter(input) {\n            if (typeof(input) != 'number')\n                return '';\n\n            var inputDate = new Date(input * 1000);\n            var currentDate = new Date();\n            var format;\n\n            if (inputDate.getDate() == currentDate.getDate() &&\n                inputDate.getMonth() == currentDate.getMonth() &&\n                inputDate.getFullYear() == currentDate.getFullYear())\n                format = 'shortTime';\n            else\n                format = 'mediumDate';\n\n            return dateFilter(inputDate, format)\n        }\n\n        return filter;\n    }\n}());","angular.module('MonstaFTP').filter('file_size', function () {\n    return function (input) {\n        return normalizeFileSize(input);\n    };\n});","angular.module('MonstaFTP').filter(\"html_safe\", ['$sce', function($sce) {\n    return function(htmlCode){\n        return $sce.trustAsHtml(htmlCode);\n    };\n}]);","(function () {\n    angular.module('MonstaFTP').filter('human_time_since', humanTimeSince);\n    function humanTimeSince() {\n        function timestampToFormattedDate(timeStamp, dmyFormat) {\n            var d = new Date(timeStamp * 1000);\n            if (dmyFormat === true)\n                return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();\n\n            return (d.getMonth() + 1) + '/' + d.getDate() + '/' + d.getFullYear();\n        }\n\n        return function (input, dmyFormat) {\n            if (typeof(input) != 'number')\n                return '';\n\n            var scaledTimeDelta, units,\n                timeDiff = Date.now() / 1000 - input,\n                timeSteps = [\n                    [3540, 60, 'minute'], // 59 minutes\n                    [82800, 3600, 'hour'], // 23 hours\n                    [2592000, 86400, 'day'] // 30 days\n                ];\n\n            if (timeDiff < 0 || timeDiff > timeSteps[timeSteps.length - 1][0])\n                return timestampToFormattedDate(input, dmyFormat);\n            else if (timeDiff <= 60)\n                return 'now';\n\n            for (var i = 0; i < timeSteps.length; ++i) {\n                if (timeDiff > timeSteps[i][0])\n                    continue;\n\n                scaledTimeDelta = Math.round(timeDiff / timeSteps[i][1]);\n                units = timeSteps[i][2];\n                break;\n            }\n\n            if (scaledTimeDelta != 1)\n                units += 's';\n\n            return scaledTimeDelta + ' ' + units + ' ago';\n        }\n    }\n}());","angular.module('MonstaFTP').filter('icon', function () {\n    return function (item) {\n        if (item.isDirectory)\n            return 'fa-folder';\n\n        if (item.isLink)\n            return 'fa-long-arrow-right';\n\n        var iconName = '';\n\n        switch (extractFileExtension(item.name)) {\n            case 'doc':\n            case 'docx':\n                iconName = 'word';\n                break;\n            case 'xlr':\n            case 'xls':\n            case 'xlsx':\n                iconName = 'excel';\n                break;\n            case 'ppt':\n            case 'pps':\n            case 'pptx':\n                iconName = 'powerpoint';\n                break;\n            case 'pdf':\n                iconName = 'pdf';\n                break;\n            case 'txt':\n            case 'rtf':\n            case 'text':\n                iconName = 'text';\n                break;\n            case 'bmp':\n            case 'gif':\n            case 'jpg':\n            case 'png':\n            case 'psd':\n            case 'tif':\n            case 'ai':\n            case 'eps':\n            case 'svg':\n            case 'ps':\n            case 'jpeg':\n                iconName = 'image';\n                break;\n            case 'avi':\n            case 'flv':\n            case 'm4v':\n            case 'mov':\n            case 'mp4':\n            case 'mkv':\n            case 'mpg':\n            case 'wmv':\n                iconName = 'video';\n                break;\n            case 'wav':\n            case 'mp3':\n            case 'wma':\n            case 'm4a':\n            case 'm4p':\n            case 'mpa':\n            case 'flac':\n            case 'aif':\n            case 'aiff':\n                iconName = 'audio';\n                break;\n            case 'tar':\n            case 'zip':\n            case 'tgz':\n            case 'gz':\n            case 'gzip':\n            case 'rar':\n                iconName = 'archive';\n                break;\n            case 'htm':\n            case 'html':\n            case 'php':\n            case 'asp':\n            case 'aspx':\n            case 'js':\n            case 'css':\n            case 'xhtml':\n            case 'cfm':\n            case 'pl':\n            case 'py':\n            case 'c':\n            case 'cpp':\n            case 'rb':\n            case 'java':\n            case 'xml':\n                iconName = 'code';\n                break;\n            default:\n                break;\n        }\n\n        return 'fa-file' + (iconName == '' ? '' : '-') + iconName + '-o';\n    }\n});","angular.module('MonstaFTP').filter('item_permission_description', ['permissionsFactory', function (permissionsFactory) {\n    return function (item) {\n        var description = item.isDirectory ? 'd' : '-';\n        var permissionObject = permissionsFactory.numericToObject(item.numericPermissions);\n        description += permissionObject.ownerRead ? 'r' : '-';\n        description += permissionObject.ownerWrite ? 'w' : '-';\n        description += permissionObject.ownerExecute ? 'x' : '-';\n\n        description += permissionObject.groupRead ? 'r' : '-';\n        description += permissionObject.groupWrite ? 'w' : '-';\n        description += permissionObject.groupExecute ? 'x' : '-';\n\n        description += permissionObject.otherRead ? 'r' : '-';\n        description += permissionObject.otherWrite ? 'w' : '-';\n        description += permissionObject.otherExecute ? 'x' : '-';\n\n        return description;\n    };\n}]);\n","angular.module('MonstaFTP').filter('sort_description', function () {\n    return function (sortName) {\n        // these are localized so must be uppercase\n        switch (sortName) {\n            case 'modified':\n                return 'CHANGED';\n            default:\n                return sortName.toUpperCase();\n        }\n    };\n});\n","angular.module('MonstaFTP').filter('spaces_to_nbsp', function () {\n    return function (input) {\n        return input.replace(/ /g, String.fromCharCode(160));\n    };\n});\n","angular.module('MonstaFTP').filter('transfer_percent', function () {\n    return function (upload) {\n        if (!upload.hasError && upload.request == null && !upload.stats.hasBeenStarted()) {\n            return 0;\n        }\n\n        if (upload.stats == null)\n            return 0;\n\n        if(upload.archiveExtractMax != 0 && upload.archiveExtractCurrent != -1)\n            return upload.archiveExtractCurrent / upload.archiveExtractMax * 100;\n\n        return upload.stats.getTransferPercent();\n    };\n});","angular.module('MonstaFTP').filter('transfer_rate', function () {\n    return function (upload) {\n        if (upload.stats == null)\n            return '-';\n\n        var tr = upload.stats.calculateTransferRate();\n\n        var fileSize = normalizeFileSize(tr);\n        return fileSize == '' ? '-' : fileSize + '/s';\n    };\n});","String.prototype.capitalizeFirstLetter = function () {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\nif (typeof String.prototype.trim !== 'function') {\n    String.prototype.trim = function () {\n        return this.replace(/^\\s+|\\s+$/g, '');\n    }\n}"],"sourceRoot":"/source/"}